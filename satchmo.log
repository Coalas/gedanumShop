Mon, 12 Dec 2011 02:40:56 root         INFO     Satchmo Started
Mon, 12 Dec 2011 02:40:56 root         INFO     Satchmo Started
Mon, 12 Dec 2011 02:40:57 shop.listeners DEBUG    Added default shop listeners
Mon, 12 Dec 2011 02:40:57 satchmo_toolbar DEBUG    Satchmo toolbar ready
Mon, 12 Dec 2011 02:40:57 iterchoices  DEBUG    Management command: runserver
Mon, 12 Dec 2011 02:40:57 iterchoices  DEBUG    Called model choices initialization function <shipping_choices>
Mon, 12 Dec 2011 02:40:57 django.db.backends DEBUG    (0.007) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:40:57 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = SHIPPING  AND "livesettings_setting"."key" = MODULES ); args=(1, 1, 'SHIPPING', 'MODULES')
Mon, 12 Dec 2011 02:40:57 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = SHIPPING  AND "livesettings_longsetting"."key" = MODULES ); args=(1, 1, 'SHIPPING', 'MODULES')
Mon, 12 Dec 2011 02:40:57 iterchoices  DEBUG    Management command: runserver
Mon, 12 Dec 2011 02:40:57 iterchoices  DEBUG    Called model choices initialization function <labelled_gateway_choices>
Mon, 12 Dec 2011 02:40:57 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PAYMENT_DUMMY  AND "livesettings_setting"."key" = LABEL ); args=(1, 1, 'PAYMENT_DUMMY', 'LABEL')
Mon, 12 Dec 2011 02:40:57 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PAYMENT_DUMMY  AND "livesettings_longsetting"."key" = LABEL ); args=(1, 1, 'PAYMENT_DUMMY', 'LABEL')
Mon, 12 Dec 2011 02:40:57 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PAYMENT_DUMMY  AND "livesettings_setting"."key" = KEY ); args=(1, 1, 'PAYMENT_DUMMY', 'KEY')
Mon, 12 Dec 2011 02:40:57 django.db.backends DEBUG    (0.001) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PAYMENT_DUMMY  AND "livesettings_longsetting"."key" = KEY ); args=(1, 1, 'PAYMENT_DUMMY', 'KEY')
Mon, 12 Dec 2011 02:40:57 iterchoices  DEBUG    Management command: runserver
Mon, 12 Dec 2011 02:40:57 iterchoices  DEBUG    Called model choices initialization function <labelled_gateway_choices>
Mon, 12 Dec 2011 02:40:57 iterchoices  DEBUG    Management command: runserver
Mon, 12 Dec 2011 02:40:57 iterchoices  DEBUG    Called model choices initialization function <credit_choices>
Mon, 12 Dec 2011 02:40:57 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PAYMENT_DUMMY  AND "livesettings_setting"."key" = CREDITCHOICES ); args=(1, 1, 'PAYMENT_DUMMY', 'CREDITCHOICES')
Mon, 12 Dec 2011 02:40:57 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PAYMENT_DUMMY  AND "livesettings_longsetting"."key" = CREDITCHOICES ); args=(1, 1, 'PAYMENT_DUMMY', 'CREDITCHOICES')
Mon, 12 Dec 2011 02:52:37 django.db.backends DEBUG    (0.000) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 02:52:37.603100 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 02:52:37.603100')
Mon, 12 Dec 2011 02:52:37 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:38 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = SHOP  AND "livesettings_setting"."key" = SHOW_SITE ); args=(1, 1, 'SHOP', 'SHOW_SITE')
Mon, 12 Dec 2011 02:52:38 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = SHOP  AND "livesettings_longsetting"."key" = SHOW_SITE ); args=(1, 1, 'SHOP', 'SHOW_SITE')
Mon, 12 Dec 2011 02:52:39 satchmo_store.urls DEBUG    Adding local serving of static files at: /home/ubuntu/workspace_python/store/../store/static/
Mon, 12 Dec 2011 02:52:39 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = SHOP  AND "livesettings_setting"."key" = ACCOUNT_VERIFICATION ); args=(1, 1, 'SHOP', 'ACCOUNT_VERIFICATION')
Mon, 12 Dec 2011 02:52:39 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = SHOP  AND "livesettings_longsetting"."key" = ACCOUNT_VERIFICATION ); args=(1, 1, 'SHOP', 'ACCOUNT_VERIFICATION')
Mon, 12 Dec 2011 02:52:39 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PAYMENT_DUMMY  AND "livesettings_setting"."key" = URL_BASE ); args=(1, 1, 'PAYMENT_DUMMY', 'URL_BASE')
Mon, 12 Dec 2011 02:52:39 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PAYMENT_DUMMY  AND "livesettings_longsetting"."key" = URL_BASE ); args=(1, 1, 'PAYMENT_DUMMY', 'URL_BASE')
Mon, 12 Dec 2011 02:52:39 payment.urls DEBUG    Found payment processor: DUMMY, adding urls at ^dummy/
Mon, 12 Dec 2011 02:52:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "auth_user"; args=()
Mon, 12 Dec 2011 02:52:39 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" ORDER BY "auth_user"."username" ASC; args=()
Mon, 12 Dec 2011 02:52:39 django.db.backends DEBUG    (0.003) SELECT "shop_config"."site_id", "shop_config"."store_name", "shop_config"."store_description", "shop_config"."store_email", "shop_config"."street1", "shop_config"."street2", "shop_config"."city", "shop_config"."state", "shop_config"."postal_code", "shop_config"."country_id", "shop_config"."phone", "shop_config"."in_country_only", "shop_config"."sales_country_id" FROM "shop_config" WHERE "shop_config"."site_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:39 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:39 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_discount" WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."site_id" = 1  AND "product_discount"."startDate" <= 2011-12-12  AND "product_discount"."endDate" > 2011-12-12 ); args=(True, True, 1, '2011-12-12', '2011-12-12')
Mon, 12 Dec 2011 02:52:39 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 02:52:39 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = user ; args=(u'user',)
Mon, 12 Dec 2011 02:52:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 02:52:39 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 02:52:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 02:52:39.653458 ; args=(u'2011-12-05 02:52:39.653458',)
Mon, 12 Dec 2011 02:52:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 02:52:39.653510 ; args=(u'2011-12-11 02:52:39.653510',)
Mon, 12 Dec 2011 02:52:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 01:52:39.653520 ; args=(u'2011-12-12 01:52:39.653520',)
Mon, 12 Dec 2011 02:52:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 02:52:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 02:52:40 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PAYMENT_DUMMY  AND "livesettings_setting"."key" = LABEL ); args=(1, 1, 'PAYMENT_DUMMY', 'LABEL')
Mon, 12 Dec 2011 02:52:40 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PAYMENT_DUMMY  AND "livesettings_longsetting"."key" = LABEL ); args=(1, 1, 'PAYMENT_DUMMY', 'LABEL')
Mon, 12 Dec 2011 02:52:40 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PAYMENT_DUMMY  AND "livesettings_setting"."key" = KEY ); args=(1, 1, 'PAYMENT_DUMMY', 'KEY')
Mon, 12 Dec 2011 02:52:40 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PAYMENT_DUMMY  AND "livesettings_longsetting"."key" = KEY ); args=(1, 1, 'PAYMENT_DUMMY', 'KEY')
Mon, 12 Dec 2011 02:52:40 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:40 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 02:52:40.308051 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 02:52:40.308051')
Mon, 12 Dec 2011 02:52:40 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 02:52:52.140781 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 02:52:52.140781')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.004) SELECT COUNT(*) FROM "product_product"; args=()
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=()
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" ASC; args=()
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = product ; args=(u'product',)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 02:52:52.196573 ; args=(u'2011-12-05 02:52:52.196573',)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 02:52:52.196596 ; args=(u'2011-12-11 02:52:52.196596',)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 01:52:52.197739 ; args=(u'2011-12-12 01:52:52.197739',)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 2 ; args=(2,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 2 ; args=(2,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 2 ; args=(2,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 2  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(2, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 5  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(5, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(5,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 5  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(5, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(5,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 6 ; args=(6,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 6 ; args=(6,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 6 ; args=(6,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 6  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(6, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.001) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(6,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 6  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(6, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(6,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 7 ; args=(7,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 7 ; args=(7,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 7 ; args=(7,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 7  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(7, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(7,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 7  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(7, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(7,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 8 ; args=(8,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 8 ; args=(8,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 8 ; args=(8,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 8  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(8, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(8,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 8  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(8, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(8,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 9 ; args=(9,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 9 ; args=(9,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 9 ; args=(9,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.004) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 9  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(9, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.001) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(9,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 9  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(9, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(9,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 10 ; args=(10,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 10 ; args=(10,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 10 ; args=(10,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 10  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(10, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(10,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 10  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(10, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.001) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(10,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 11 ; args=(11,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 11 ; args=(11,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.004) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 11 ; args=(11,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 11 ; args=(11,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 11  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(11, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(11,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 11  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(11, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(11,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 12 ; args=(12,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 12 ; args=(12,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 12 ; args=(12,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 12 ; args=(12,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 12  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(12, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 12  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(12,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 12  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(12, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.001) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 12  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(12,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 13 ; args=(13,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 13 ; args=(13,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 13 ; args=(13,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 13  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(13, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(13,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 13  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(13, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(13,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 14 ; args=(14,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 14 ; args=(14,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 14 ; args=(14,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 14 ; args=(14,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 14  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(14, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 14  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(14,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 14  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(14, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.007) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 14  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(14,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 15 ; args=(15,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 15 ; args=(15,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 15 ; args=(15,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 15 ; args=(15,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 15  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(15, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 15  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(15,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 15  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(15, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.010) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 15  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(15,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 16 ; args=(16,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 16 ; args=(16,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 16 ; args=(16,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 16 ; args=(16,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 16  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(16, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 16  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(16,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 16  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(16, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 16  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(16,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 17 ; args=(17,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 17 ; args=(17,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 17 ; args=(17,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 17 ; args=(17,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 17  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(17, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(17,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 17  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(17, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(17,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 18 ; args=(18,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.011) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 18 ; args=(18,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 18 ; args=(18,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 18 ; args=(18,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 18  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(18, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.007) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(18,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 18  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(18, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(18,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 19 ; args=(19,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 19 ; args=(19,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 19 ; args=(19,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 19 ; args=(19,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 19  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(19, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 19  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(19,)
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.006) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 19  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(19, '2011-12-12')
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:52:53 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 19  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(19,)
Mon, 12 Dec 2011 02:52:53 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 02:52:53.266986 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 02:52:53.266986')
Mon, 12 Dec 2011 02:52:53 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:53:21 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 02:53:21.862762 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 02:53:21.862762')
Mon, 12 Dec 2011 02:53:21 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:53:21 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category"; args=()
Mon, 12 Dec 2011 02:53:21 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" ASC; args=()
Mon, 12 Dec 2011 02:53:21 django.db.backends DEBUG    (0.001) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:53:21 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:53:21 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 02:53:21 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = category ; args=(u'category',)
Mon, 12 Dec 2011 02:53:21 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 02:53:21 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 02:53:21 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 02:53:21.940948 ; args=(u'2011-12-05 02:53:21.940948',)
Mon, 12 Dec 2011 02:53:21 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 02:53:21.940967 ; args=(u'2011-12-11 02:53:21.940967',)
Mon, 12 Dec 2011 02:53:21 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 01:53:21.940975 ; args=(u'2011-12-12 01:53:21.940975',)
Mon, 12 Dec 2011 02:53:21 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 02:53:21 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 02:53:22 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:53:22 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:53:22 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:53:22 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:53:22 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:53:22 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:53:22 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 02:53:22.302179 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 02:53:22.302179')
Mon, 12 Dec 2011 02:53:22 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 02:53:25.443353 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 02:53:25.443353')
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.006) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_category_related_categories" ON ("product_category"."id" = "product_category_related_categories"."to_category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_category_related_categories"."from_category_id" = 1  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(1,)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "product_categoryattribute"."id", "product_categoryattribute"."category_id", "product_categoryattribute"."languagecode", "product_categoryattribute"."option_id", "product_categoryattribute"."value" FROM "product_categoryattribute" INNER JOIN "product_attributeoption" ON ("product_categoryattribute"."option_id" = "product_attributeoption"."id") WHERE "product_categoryattribute"."category_id" = 1  ORDER BY "product_attributeoption"."sort_order" ASC; args=(1,)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "product_categoryimage"."id", "product_categoryimage"."category_id", "product_categoryimage"."picture", "product_categoryimage"."caption", "product_categoryimage"."sort" FROM "product_categoryimage" WHERE "product_categoryimage"."category_id" = 1  ORDER BY "product_categoryimage"."sort" ASC; args=(1,)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = category  AND "django_content_type"."app_label" = product ); args=('category', 'product')
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = 1 ; args=(u'1',)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 02:53:25.534708 ; args=(u'2011-12-05 02:53:25.534708',)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 02:53:25.534733 ; args=(u'2011-12-11 02:53:25.534733',)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 01:53:25.534747 ; args=(u'2011-12-12 01:53:25.534747',)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" ORDER BY "django_site"."domain" ASC; args=()
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=()
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=()
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Mon, 12 Dec 2011 02:53:25 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 02:53:25.989806 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 02:53:25.989806')
Mon, 12 Dec 2011 02:53:26 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:54:43 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 02:54:43.892972 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 02:54:43.892972')
Mon, 12 Dec 2011 02:54:43 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:54:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category"; args=()
Mon, 12 Dec 2011 02:54:43 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" ASC; args=()
Mon, 12 Dec 2011 02:54:43 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:54:43 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:54:43 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 02:54:43 django.db.backends DEBUG    (0.009) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = category ; args=(u'category',)
Mon, 12 Dec 2011 02:54:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 02:54:43 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 02:54:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 02:54:43.974676 ; args=(u'2011-12-05 02:54:43.974676',)
Mon, 12 Dec 2011 02:54:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 02:54:43.974697 ; args=(u'2011-12-11 02:54:43.974697',)
Mon, 12 Dec 2011 02:54:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 01:54:43.975067 ; args=(u'2011-12-12 01:54:43.975067',)
Mon, 12 Dec 2011 02:54:43 django.db.backends DEBUG    (0.004) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 02:54:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 02:54:44 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:54:44 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:54:44 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:54:44 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:54:44 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:54:44 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 02:58:56.113931 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 02:58:56.113931')
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.005) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."slug" = dj-rocks  AND "product_product"."site_id" = 1 ); args=(True, u'dj-rocks', 1)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = TAX  AND "livesettings_setting"."key" = DEFAULT_VIEW_TAX ); args=(1, 1, 'TAX', 'DEFAULT_VIEW_TAX')
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = TAX  AND "livesettings_longsetting"."key" = DEFAULT_VIEW_TAX ); args=(1, 1, 'TAX', 'DEFAULT_VIEW_TAX')
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.003) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.001) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2011-12-12  AND "product_discount"."endDate" > 2011-12-12  AND ("product_discount_valid_products"."product_id" IN (1) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2011-12-12', '2011-12-12', 1, True)
Mon, 12 Dec 2011 02:58:56 root         DEBUG    subtypes = ('ConfigurableProduct',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" INNER JOIN "product_product" T4 ON ("configurable_productvariation"."product_id" = T4."id") WHERE ("configurable_productvariation"."parent_id" = 1  AND T4."active" = True ); args=(1, True)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(11,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 12  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(12,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(13,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") INNER JOIN "django_site" ON ("product_optiongroup"."site_id" = "django_site"."id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 2  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(2,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.005) SELECT "product_optiongroup"."id", "product_optiongroup"."sort_order" FROM "product_optiongroup" ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=()
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE ("product_option"."option_group_id" IN (1, 2) AND "product_option"."value" IN (B, BL, M, L, S, W)) ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1, 2, 'B', 'BL', 'M', 'L', 'S', 'W')
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 2  AND "product_optiongrouptranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(2, u'pl-pl')
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 2  AND "product_optiongrouptranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(2, u'pl')
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 2  AND "product_optiongrouptranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(2, u'pl%')
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 1  AND "product_optiongrouptranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(1, u'pl-pl')
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 1  AND "product_optiongrouptranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(1, u'pl')
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 1  AND "product_optiongrouptranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(1, u'pl%')
Mon, 12 Dec 2011 02:58:56 product.utils DEBUG    serialized: ({'id': 1, 'items': (<Option: Small>, <Option: Medium>, <Option: Large>), 'name': u'sizes', 'description': u''}, {'id': 2, 'items': (<Option: Black>, <Option: White>, <Option: Blue>), 'name': u'colors', 'description': u''})
Mon, 12 Dec 2011 02:58:56 product.utils DEBUG    Serialized Options dj-rocks: ({'id': 1, 'items': (<Option: Small>, <Option: Medium>, <Option: Large>), 'name': u'sizes', 'description': u''}, {'id': 2, 'items': (<Option: Black>, <Option: White>, <Option: Blue>), 'name': u'colors', 'description': u''})
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PRODUCT  AND "livesettings_setting"."key" = NO_STOCK_CHECKOUT ); args=(1, 1, 'PRODUCT', 'NO_STOCK_CHECKOUT')
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PRODUCT  AND "livesettings_longsetting"."key" = NO_STOCK_CHECKOUT ); args=(1, 1, 'PRODUCT', 'NO_STOCK_CHECKOUT')
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2011-12-12  AND "product_discount"."endDate" > 2011-12-12  AND ("product_discount_valid_products"."product_id" IN (1) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2011-12-12', '2011-12-12', 1, True)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productpricelookup" WHERE "product_productpricelookup"."parentid" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.002) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE "product_productpricelookup"."parentid" = 1  ORDER BY "product_productpricelookup"."price" DESC; args=(1,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_l_bl ; args=(u'dj-rocks_l_bl',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 13  ORDER BY "product_productimage"."sort" ASC; args=(13,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_m_bl ; args=(u'dj-rocks_m_bl',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 10  ORDER BY "product_productimage"."sort" ASC; args=(10,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_s_bl ; args=(u'dj-rocks_s_bl',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 7  ORDER BY "product_productimage"."sort" ASC; args=(7,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.003) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_l_b ; args=(u'dj-rocks_l_b',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 11  ORDER BY "product_productimage"."sort" ASC; args=(11,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_l_w ; args=(u'dj-rocks_l_w',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 12  ORDER BY "product_productimage"."sort" ASC; args=(12,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_m_b ; args=(u'dj-rocks_m_b',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 8  ORDER BY "product_productimage"."sort" ASC; args=(8,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_m_w ; args=(u'dj-rocks_m_w',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 9  ORDER BY "product_productimage"."sort" ASC; args=(9,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.002) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_s_b ; args=(u'dj-rocks_s_b',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 5  ORDER BY "product_productimage"."sort" ASC; args=(5,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_s_w ; args=(u'dj-rocks_s_w',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 6  ORDER BY "product_productimage"."sort" ASC; args=(6,)
Mon, 12 Dec 2011 02:58:56 product.views DEBUG    finding product template: ['product/detail_configurableproduct.html', 'product/product.html']
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.001) SELECT "shop_config"."site_id", "shop_config"."store_name", "shop_config"."store_description", "shop_config"."store_email", "shop_config"."street1", "shop_config"."street2", "shop_config"."city", "shop_config"."state", "shop_config"."postal_code", "shop_config"."country_id", "shop_config"."phone", "shop_config"."in_country_only", "shop_config"."sales_country_id" FROM "shop_config" WHERE "shop_config"."site_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_discount" WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."site_id" = 1  AND "product_discount"."startDate" <= 2011-12-12  AND "product_discount"."endDate" > 2011-12-12 ); args=(True, True, 1, '2011-12-12', '2011-12-12')
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks ; args=(u'dj-rocks',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.004) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.005) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 11 ; args=(11,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 12 ; args=(12,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 02:58:56.586333 ; args=(u'2011-12-05 02:58:56.586333',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 02:58:56.586368 ; args=(u'2011-12-11 02:58:56.586368',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 01:58:56.586391 ; args=(u'2011-12-12 01:58:56.586391',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = page_head ; args=(u'page_head',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "app_plugins_plugin"."id", "app_plugins_plugin"."point_id", "app_plugins_plugin"."label", "app_plugins_plugin"."index", "app_plugins_plugin"."registered", "app_plugins_plugin"."status", "app_plugins_plugin"."required", "app_plugins_plugin"."template", "app_plugins_plugin"."_order" FROM "app_plugins_plugin" WHERE "app_plugins_plugin"."label" = satchmo_toolbar.page_head ; args=(u'satchmo_toolbar.page_head',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = page_top ; args=(u'page_top',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "app_plugins_plugin"."id", "app_plugins_plugin"."point_id", "app_plugins_plugin"."label", "app_plugins_plugin"."index", "app_plugins_plugin"."registered", "app_plugins_plugin"."status", "app_plugins_plugin"."required", "app_plugins_plugin"."template", "app_plugins_plugin"."_order" FROM "app_plugins_plugin" WHERE "app_plugins_plugin"."label" = satchmo_toolbar.page_top ; args=(u'satchmo_toolbar.page_top',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = satchmo_toolbar ; args=(u'satchmo_toolbar',)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.005) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 1  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(1,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 1  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(1,)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."id" = 1 ); args=(True, 1)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") WHERE ("product_category"."is_active" = True  AND "product_category"."site_id" = 1  AND T3."id" IS NULL) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(True, 1)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 3  AND "product_category"."is_active" = True ); args=(3, True)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 3  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(3, u'pl-pl')
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 3  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(3, u'pl')
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 3  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(3, u'pl%')
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 3  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(3, True)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 4  AND "product_category"."is_active" = True ); args=(4, True)
Mon, 12 Dec 2011 02:58:56 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 4  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(4, u'pl-pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 4  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(4, u'pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 4  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(4, u'pl%')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 4  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(4, True)
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 5  AND "product_category"."is_active" = True ); args=(5, True)
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 5  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(5, u'pl-pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 5  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(5, u'pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 5  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(5, u'pl%')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 6  AND "product_category"."is_active" = True ); args=(6, True)
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 6  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(6, u'pl-pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 6  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(6, u'pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 6  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(6, u'pl%')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 1  AND "product_category"."is_active" = True ); args=(1, True)
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 1  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(1, u'pl-pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 1  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(1, u'pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 1  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(1, u'pl%')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 1  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(1, True)
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 2  AND "product_category"."is_active" = True ); args=(2, True)
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.001) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 2  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(2, u'pl-pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 2  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(2, u'pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 2  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(2, u'pl%')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 7  AND "product_category"."is_active" = True ); args=(7, True)
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 7  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(7, u'pl-pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 7  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(7, u'pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 7  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(7, u'pl%')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = sidebar_secondary_bottom ; args=(u'sidebar_secondary_bottom',)
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 1  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(1, u'pl-pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 1  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(1, u'pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 1  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(1, u'pl%')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 1  ORDER BY "product_productimage"."sort" ASC; args=(1,)
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productattribute" WHERE ("product_productattribute"."product_id" = 1  AND "product_productattribute"."languagecode" = pl-pl ); args=(1, 'pl-pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE ("product_productattribute"."product_id" = 1  AND ("product_productattribute"."languagecode" IS NULL OR "product_productattribute"."languagecode" =  )) ORDER BY "product_attributeoption"."sort_order" ASC; args=(1, '')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 1  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(1, u'pl-pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 1  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(1, u'pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 1  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(1, u'pl%')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 2  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(2, u'pl-pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 2  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(2, u'pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 2  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(2, u'pl%')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 3  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(3, u'pl-pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 3  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(3, u'pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 3  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(3, u'pl%')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 4  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(4, u'pl-pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 4  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(4, u'pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 4  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(4, u'pl%')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 5  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(5, u'pl-pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 5  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(5, u'pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 5  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(5, u'pl%')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 6  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(6, u'pl-pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 6  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(6, u'pl')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 6  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(6, u'pl%')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.001) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = product_add_buttons ; args=(u'product_add_buttons',)
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.001) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = product_form ; args=(u'product_form',)
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = product_footer ; args=(u'product_footer',)
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = GOOGLE  AND "livesettings_setting"."key" = ANALYTICS ); args=(1, 1, 'GOOGLE', 'ANALYTICS')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = GOOGLE  AND "livesettings_longsetting"."key" = ANALYTICS ); args=(1, 1, 'GOOGLE', 'ANALYTICS')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 02:58:57.545634 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 02:58:57.545634')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 02:58:57.975817 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 02:58:57.975817')
Mon, 12 Dec 2011 02:58:57 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:43 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:00:43.800902 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:00:43.800902')
Mon, 12 Dec 2011 03:00:43 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongroup"; args=()
Mon, 12 Dec 2011 03:00:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_optiongroup" INNER JOIN "django_site" ON ("product_optiongroup"."site_id" = "django_site"."id") ORDER BY "product_optiongroup"."sort_order" ASC; args=()
Mon, 12 Dec 2011 03:00:43 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:43 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:43 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:00:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = optiongroup ; args=(u'optiongroup',)
Mon, 12 Dec 2011 03:00:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:00:43 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:00:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:00:43.842977 ; args=(u'2011-12-05 03:00:43.842977',)
Mon, 12 Dec 2011 03:00:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:00:43.842992 ; args=(u'2011-12-11 03:00:43.842992',)
Mon, 12 Dec 2011 03:00:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:00:43.842997 ; args=(u'2011-12-12 02:00:43.842997',)
Mon, 12 Dec 2011 03:00:43 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:00:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:00:43 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:44 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:00:44.064327 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:00:44.064327')
Mon, 12 Dec 2011 03:00:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:52 django.db.backends DEBUG    (0.016) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:00:52.956683 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:00:52.956683')
Mon, 12 Dec 2011 03:00:52 django.db.backends DEBUG    (0.004) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_product"; args=()
Mon, 12 Dec 2011 03:00:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=()
Mon, 12 Dec 2011 03:00:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" ASC; args=()
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.003) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = product ; args=(u'product',)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:00:53.047724 ; args=(u'2011-12-05 03:00:53.047724',)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:00:53.047760 ; args=(u'2011-12-11 03:00:53.047760',)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:00:53.047785 ; args=(u'2011-12-12 02:00:53.047785',)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.003) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 2  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(2, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 5  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(5, '2011-12-12')
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 5  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(5, '2011-12-12')
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 6  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(6, '2011-12-12')
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.001) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 6  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(6, '2011-12-12')
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 7  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(7, '2011-12-12')
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 7  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(7, '2011-12-12')
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.004) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.001) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 8  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(8, '2011-12-12')
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 8  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(8, '2011-12-12')
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 9  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(9, '2011-12-12')
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.006) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.003) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 9  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(9, '2011-12-12')
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 10  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(10, '2011-12-12')
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.008) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 10  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(10, '2011-12-12')
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 11  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(11, '2011-12-12')
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(11,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 11  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(11, '2011-12-12')
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(11,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 12  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(12, '2011-12-12')
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.004) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.005) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 12  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(12,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 12  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(12, '2011-12-12')
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.001) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 12  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(12,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 13  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(13, '2011-12-12')
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 13  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(13, '2011-12-12')
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.005) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 14 ; args=(14,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 14 ; args=(14,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 14 ; args=(14,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 14 ; args=(14,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 14  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(14, '2011-12-12')
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.005) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 14  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(14,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 14  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(14, '2011-12-12')
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 14  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(14,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 15 ; args=(15,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 15 ; args=(15,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 15 ; args=(15,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 15 ; args=(15,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 15  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(15, '2011-12-12')
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:00:53 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 15  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(15,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 15  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(15, '2011-12-12')
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 15  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(15,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 16 ; args=(16,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 16 ; args=(16,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 16 ; args=(16,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 16 ; args=(16,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 16  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(16, '2011-12-12')
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 16  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(16,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 16  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(16, '2011-12-12')
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 16  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(16,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 17  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(17, '2011-12-12')
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(17,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 17  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(17, '2011-12-12')
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.001) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(17,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 18  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(18, '2011-12-12')
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(18,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 18  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(18, '2011-12-12')
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.002) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(18,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 19  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(19, '2011-12-12')
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 19  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(19,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 19  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(19, '2011-12-12')
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.005) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 19  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(19,)
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:00:54.574890 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:00:54.574890')
Mon, 12 Dec 2011 03:00:54 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:01:10.995720 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:01:10.995720')
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "configurable_productvariation"; args=()
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" INNER JOIN "product_product" ON ("configurable_productvariation"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" DESC, "product_product"."ordering" DESC, "product_product"."name" DESC; args=()
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = productvariation ; args=(u'productvariation',)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:01:11.035754 ; args=(u'2011-12-05 03:01:11.035754',)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:01:11.035782 ; args=(u'2011-12-11 03:01:11.035782',)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:01:11.035800 ; args=(u'2011-12-12 02:01:11.035800',)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.011) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.003) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 15 ; args=(15,)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 16 ; args=(16,)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 14 ; args=(14,)
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:01:11.328186 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:01:11.328186')
Mon, 12 Dec 2011 03:01:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.015) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:03:39.588326 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:03:39.588326')
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(18,)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = productvariation  AND "django_content_type"."app_label" = configurable ); args=('productvariation', 'configurable')
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = 18 ; args=(u'18',)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:03:39.660351 ; args=(u'2011-12-05 03:03:39.660351',)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:03:39.660370 ; args=(u'2011-12-11 03:03:39.660370',)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:03:39.660378 ; args=(u'2011-12-12 02:03:39.660378',)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=()
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:03:39 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:03:40 django.db.backends DEBUG    (0.013) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:03:40.118435 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:03:40.118435')
Mon, 12 Dec 2011 03:03:40 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:03:44.651792 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:03:44.651792')
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "configurable_productvariation"; args=()
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" INNER JOIN "product_product" ON ("configurable_productvariation"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" DESC, "product_product"."ordering" DESC, "product_product"."name" DESC; args=()
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = productvariation ; args=(u'productvariation',)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:03:44.693706 ; args=(u'2011-12-05 03:03:44.693706',)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:03:44.693742 ; args=(u'2011-12-11 03:03:44.693742',)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:03:44.693769 ; args=(u'2011-12-12 02:03:44.693769',)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.009) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 15 ; args=(15,)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 16 ; args=(16,)
Mon, 12 Dec 2011 03:03:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 14 ; args=(14,)
Mon, 12 Dec 2011 03:03:48 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:03:48.270421 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:03:48.270421')
Mon, 12 Dec 2011 03:03:48 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:48 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "configurable_configurableproduct"; args=()
Mon, 12 Dec 2011 03:03:48 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" INNER JOIN "product_product" ON ("configurable_configurableproduct"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" DESC, "product_product"."ordering" DESC, "product_product"."name" DESC; args=()
Mon, 12 Dec 2011 03:03:48 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:48 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:48 django.db.backends DEBUG    (0.013) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:03:48 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = configurableproduct ; args=(u'configurableproduct',)
Mon, 12 Dec 2011 03:03:48 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:03:48 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:03:48 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:03:48.326757 ; args=(u'2011-12-05 03:03:48.326757',)
Mon, 12 Dec 2011 03:03:48 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:03:48.326773 ; args=(u'2011-12-11 03:03:48.326773',)
Mon, 12 Dec 2011 03:03:48 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:03:48.326778 ; args=(u'2011-12-12 02:03:48.326778',)
Mon, 12 Dec 2011 03:03:48 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:03:48 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:03:48 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:48 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:03:48 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:48 django.db.backends DEBUG    (0.005) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:03:48 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:03:48.672740 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:03:48.672740')
Mon, 12 Dec 2011 03:03:48 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:03:52.385795 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:03:52.385795')
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 4  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(4,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = configurableproduct  AND "django_content_type"."app_label" = configurable ); args=('configurableproduct', 'configurable')
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.007) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = 4 ; args=(u'4',)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:03:52.440760 ; args=(u'2011-12-05 03:03:52.440760',)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:03:52.440775 ; args=(u'2011-12-11 03:03:52.440775',)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:03:52.440781 ; args=(u'2011-12-12 02:03:52.440781',)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=()
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 4  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(4,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 3  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(3,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(17,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(17,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(18,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(17,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(18,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 19  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(19,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:03:52.761239 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:03:52.761239')
Mon, 12 Dec 2011 03:03:52 django.db.backends DEBUG    (0.001) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:08 django.db.backends DEBUG    (0.018) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:06:08.557980 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:06:08.557980')
Mon, 12 Dec 2011 03:06:08 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_attributeoption"; args=()
Mon, 12 Dec 2011 03:06:08 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Mon, 12 Dec 2011 03:06:08 django.db.backends DEBUG    (0.000) SELECT "shop_config"."site_id", "shop_config"."store_name", "shop_config"."store_description", "shop_config"."store_email", "shop_config"."street1", "shop_config"."street2", "shop_config"."city", "shop_config"."state", "shop_config"."postal_code", "shop_config"."country_id", "shop_config"."phone", "shop_config"."in_country_only", "shop_config"."sales_country_id" FROM "shop_config" WHERE "shop_config"."site_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:08 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:08 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_discount" WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."site_id" = 1  AND "product_discount"."startDate" <= 2011-12-12  AND "product_discount"."endDate" > 2011-12-12 ); args=(True, True, 1, '2011-12-12', '2011-12-12')
Mon, 12 Dec 2011 03:06:08 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:06:08 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = attributeoption ; args=(u'attributeoption',)
Mon, 12 Dec 2011 03:06:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:06:08 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:06:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:06:08.631715 ; args=(u'2011-12-05 03:06:08.631715',)
Mon, 12 Dec 2011 03:06:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:06:08.631770 ; args=(u'2011-12-11 03:06:08.631770',)
Mon, 12 Dec 2011 03:06:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:06:08.631811 ; args=(u'2011-12-12 02:06:08.631811',)
Mon, 12 Dec 2011 03:06:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:06:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:06:08 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:09 django.db.backends DEBUG    (0.025) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:06:09.071233 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:06:09.071233')
Mon, 12 Dec 2011 03:06:09 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:06:14.496104 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:06:14.496104')
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.004) SELECT COUNT(*) FROM "product_option"; args=()
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=()
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = option ; args=(u'option',)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.001) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:06:14.545370 ; args=(u'2011-12-05 03:06:14.545370',)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:06:14.545392 ; args=(u'2011-12-11 03:06:14.545392',)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:06:14.545398 ; args=(u'2011-12-12 02:06:14.545398',)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:06:14.810913 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:06:14.810913')
Mon, 12 Dec 2011 03:06:14 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:23 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:06:23.859123 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:06:23.859123')
Mon, 12 Dec 2011 03:06:23 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_taxclass"; args=()
Mon, 12 Dec 2011 03:06:23 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" ORDER BY "product_taxclass"."id" DESC; args=()
Mon, 12 Dec 2011 03:06:23 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:23 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:23 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:06:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = taxclass ; args=(u'taxclass',)
Mon, 12 Dec 2011 03:06:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:06:23 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:06:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:06:23.900456 ; args=(u'2011-12-05 03:06:23.900456',)
Mon, 12 Dec 2011 03:06:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:06:23.900475 ; args=(u'2011-12-11 03:06:23.900475',)
Mon, 12 Dec 2011 03:06:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:06:23.900480 ; args=(u'2011-12-12 02:06:23.900480',)
Mon, 12 Dec 2011 03:06:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:06:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:06:23 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:24 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:06:24.133655 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:06:24.133655')
Mon, 12 Dec 2011 03:06:24 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:32 django.db.backends DEBUG    (0.019) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:06:32.800542 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:06:32.800542')
Mon, 12 Dec 2011 03:06:32 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "configurable_configurableproduct"; args=()
Mon, 12 Dec 2011 03:06:32 django.db.backends DEBUG    (0.007) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" INNER JOIN "product_product" ON ("configurable_configurableproduct"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" DESC, "product_product"."ordering" DESC, "product_product"."name" DESC; args=()
Mon, 12 Dec 2011 03:06:32 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:32 django.db.backends DEBUG    (0.004) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:32 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:06:32 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = configurableproduct ; args=(u'configurableproduct',)
Mon, 12 Dec 2011 03:06:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:06:32 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:06:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:06:32.870091 ; args=(u'2011-12-05 03:06:32.870091',)
Mon, 12 Dec 2011 03:06:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:06:32.870110 ; args=(u'2011-12-11 03:06:32.870110',)
Mon, 12 Dec 2011 03:06:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:06:32.870118 ; args=(u'2011-12-12 02:06:32.870118',)
Mon, 12 Dec 2011 03:06:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:06:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:06:33 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:33 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:06:33 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:33 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:06:33 django.db.backends DEBUG    (0.021) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:06:33.286921 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:06:33.286921')
Mon, 12 Dec 2011 03:06:33 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:40 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:06:40.627004 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:06:40.627004')
Mon, 12 Dec 2011 03:06:40 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_interaction"; args=()
Mon, 12 Dec 2011 03:06:40 django.db.backends DEBUG    (0.000) SELECT "contact_contactinteractiontype"."key", "contact_contactinteractiontype"."name" FROM "contact_contactinteractiontype"; args=()
Mon, 12 Dec 2011 03:06:40 django.db.backends DEBUG    (0.007) SELECT "contact_interaction"."id", "contact_interaction"."contact_id", "contact_interaction"."type_id", "contact_interaction"."date_time", "contact_interaction"."description" FROM "contact_interaction" ORDER BY "contact_interaction"."id" DESC; args=()
Mon, 12 Dec 2011 03:06:40 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:40 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:40 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:06:40 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = interaction ; args=(u'interaction',)
Mon, 12 Dec 2011 03:06:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:06:40 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:06:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:06:40.690738 ; args=(u'2011-12-05 03:06:40.690738',)
Mon, 12 Dec 2011 03:06:40 django.db.backends DEBUG    (0.007) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:06:40.690771 ; args=(u'2011-12-11 03:06:40.690771',)
Mon, 12 Dec 2011 03:06:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:06:40.690794 ; args=(u'2011-12-12 02:06:40.690794',)
Mon, 12 Dec 2011 03:06:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:06:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:06:40 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:06:40 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:06:40.917050 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:06:40.917050')
Mon, 12 Dec 2011 03:06:40 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:08:49 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:08:49.134191 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:08:49.134191')
Mon, 12 Dec 2011 03:08:49 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:08:49 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongroup"; args=()
Mon, 12 Dec 2011 03:08:49 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_optiongroup" INNER JOIN "django_site" ON ("product_optiongroup"."site_id" = "django_site"."id") ORDER BY "product_optiongroup"."sort_order" ASC; args=()
Mon, 12 Dec 2011 03:08:49 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:08:49 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:08:49 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:08:49 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = optiongroup ; args=(u'optiongroup',)
Mon, 12 Dec 2011 03:08:49 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:08:49 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:08:49 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:08:49.172747 ; args=(u'2011-12-05 03:08:49.172747',)
Mon, 12 Dec 2011 03:08:49 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:08:49.172766 ; args=(u'2011-12-11 03:08:49.172766',)
Mon, 12 Dec 2011 03:08:49 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:08:49.172776 ; args=(u'2011-12-12 02:08:49.172776',)
Mon, 12 Dec 2011 03:08:49 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:08:49 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:08:49 django.db.backends DEBUG    (0.001) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:08:49 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:08:49.365839 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:08:49.365839')
Mon, 12 Dec 2011 03:08:49 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:08:58 django.db.backends DEBUG    (0.019) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:08:58.052223 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:08:58.052223')
Mon, 12 Dec 2011 03:08:58 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:08:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_discount"; args=()
Mon, 12 Dec 2011 03:08:58 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_discount" INNER JOIN "django_site" ON ("product_discount"."site_id" = "django_site"."id") ORDER BY "product_discount"."id" DESC; args=()
Mon, 12 Dec 2011 03:08:58 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:08:58 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:08:58 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:08:58 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = discount ; args=(u'discount',)
Mon, 12 Dec 2011 03:08:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:08:58 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:08:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:08:58.115389 ; args=(u'2011-12-05 03:08:58.115389',)
Mon, 12 Dec 2011 03:08:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:08:58.115410 ; args=(u'2011-12-11 03:08:58.115410',)
Mon, 12 Dec 2011 03:08:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:08:58.115422 ; args=(u'2011-12-12 02:08:58.115422',)
Mon, 12 Dec 2011 03:08:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:08:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:08:58 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:08:58 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:08:58.394198 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:08:58.394198')
Mon, 12 Dec 2011 03:08:58 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:09:03 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:09:03.901185 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:09:03.901185')
Mon, 12 Dec 2011 03:09:03 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:09:03 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_attributeoption"; args=()
Mon, 12 Dec 2011 03:09:03 django.db.backends DEBUG    (0.006) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Mon, 12 Dec 2011 03:09:03 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:09:03 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:09:03 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:09:03 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = attributeoption ; args=(u'attributeoption',)
Mon, 12 Dec 2011 03:09:03 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:09:03 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:09:03 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:09:03.949371 ; args=(u'2011-12-05 03:09:03.949371',)
Mon, 12 Dec 2011 03:09:03 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:09:03.949392 ; args=(u'2011-12-11 03:09:03.949392',)
Mon, 12 Dec 2011 03:09:03 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:09:03.949402 ; args=(u'2011-12-12 02:09:03.949402',)
Mon, 12 Dec 2011 03:09:03 django.db.backends DEBUG    (0.006) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:09:03 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:09:04 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:09:04 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:09:04.278179 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:09:04.278179')
Mon, 12 Dec 2011 03:09:04 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:09:06 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:09:06.639283 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:09:06.639283')
Mon, 12 Dec 2011 03:09:06 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:09:06 django.db.backends DEBUG    (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = attributeoption  AND "django_content_type"."app_label" = product ); args=('attributeoption', 'product')
Mon, 12 Dec 2011 03:09:06 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:09:06 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:09:06 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:09:06 django.db.backends DEBUG    (0.002) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = add ; args=(u'add',)
Mon, 12 Dec 2011 03:09:06 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:09:06 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:09:06 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:09:06.688116 ; args=(u'2011-12-05 03:09:06.688116',)
Mon, 12 Dec 2011 03:09:06 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:09:06.688132 ; args=(u'2011-12-11 03:09:06.688132',)
Mon, 12 Dec 2011 03:09:06 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:09:06.688137 ; args=(u'2011-12-12 02:09:06.688137',)
Mon, 12 Dec 2011 03:09:06 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:09:06 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:09:06 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:09:06 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:09:06.974213 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:09:06.974213')
Mon, 12 Dec 2011 03:09:06 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:10:08.337631 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:10:08.337631')
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.019) INSERT INTO "product_attributeoption" ("description", "name", "validation", "sort_order", "error_message") VALUES (voiship, voiship, product.utils.validation_simple, 1, Invalid Entry); args=(u'voiship', u'voiship', u'product.utils.validation_simple', 1, u'Invalid Entry')
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.000) INSERT INTO "django_admin_log" ("action_time", "user_id", "content_type_id", "object_id", "object_repr", "action_flag", "change_message") VALUES (2011-12-12 03:10:08.417534, 1, 52, 1, voiship, 1, ); args=(u'2011-12-12 03:10:08.417534', 1, 52, u'1', u'voiship', 1, '')
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:10:08.535017 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:10:08.535017')
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_attributeoption"; args=()
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = attributeoption ; args=(u'attributeoption',)
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:10:08.593625 ; args=(u'2011-12-05 03:10:08.593625',)
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:10:08.593648 ; args=(u'2011-12-11 03:10:08.593648',)
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:10:08.593655 ; args=(u'2011-12-12 02:10:08.593655',)
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:10:08 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:09 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:10:09.029347 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:10:09.029347')
Mon, 12 Dec 2011 03:10:09 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:13 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:10:13.826034 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:10:13.826034')
Mon, 12 Dec 2011 03:10:13 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:13 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:13 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:13 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:10:13 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = product ; args=(u'product',)
Mon, 12 Dec 2011 03:10:13 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:10:13 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:10:13 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:10:13.879760 ; args=(u'2011-12-05 03:10:13.879760',)
Mon, 12 Dec 2011 03:10:13 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:10:13.879775 ; args=(u'2011-12-11 03:10:13.879775',)
Mon, 12 Dec 2011 03:10:13 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:10:13.879780 ; args=(u'2011-12-12 02:10:13.879780',)
Mon, 12 Dec 2011 03:10:13 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:10:13 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:10:13 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:14 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:10:14.043948 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:10:14.043948')
Mon, 12 Dec 2011 03:10:14 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:10:19.519172 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:10:19.519172')
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_product"; args=()
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=()
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" ASC; args=()
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.004) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = product ; args=(u'product',)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:10:19.582164 ; args=(u'2011-12-05 03:10:19.582164',)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:10:19.582179 ; args=(u'2011-12-11 03:10:19.582179',)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:10:19.582185 ; args=(u'2011-12-12 02:10:19.582185',)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.002) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 2  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(2, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.001) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.002) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 5  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(5, '2011-12-12')
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 5  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(5, '2011-12-12')
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 6  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(6, '2011-12-12')
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 6  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(6, '2011-12-12')
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.002) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 7  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(7, '2011-12-12')
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 7  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(7, '2011-12-12')
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.006) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 8  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(8, '2011-12-12')
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 8  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(8, '2011-12-12')
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.004) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 9  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(9, '2011-12-12')
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.002) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 9  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(9, '2011-12-12')
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 10  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(10, '2011-12-12')
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 10  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(10, '2011-12-12')
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 11  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(11, '2011-12-12')
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(11,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 11  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(11, '2011-12-12')
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(11,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:10:19 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 12  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(12, '2011-12-12')
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 12  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(12,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 12  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(12, '2011-12-12')
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 12  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(12,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.003) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 13  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(13, '2011-12-12')
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 13  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(13, '2011-12-12')
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 14 ; args=(14,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 14 ; args=(14,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 14 ; args=(14,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 14 ; args=(14,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 14  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(14, '2011-12-12')
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 14  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(14,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 14  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(14, '2011-12-12')
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 14  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(14,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 15 ; args=(15,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 15 ; args=(15,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 15 ; args=(15,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 15 ; args=(15,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 15  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(15, '2011-12-12')
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 15  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(15,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 15  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(15, '2011-12-12')
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 15  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(15,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 16 ; args=(16,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 16 ; args=(16,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 16 ; args=(16,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 16 ; args=(16,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 16  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(16, '2011-12-12')
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 16  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(16,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 16  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(16, '2011-12-12')
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 16  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(16,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 17  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(17, '2011-12-12')
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.007) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(17,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 17  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(17, '2011-12-12')
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(17,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 18  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(18, '2011-12-12')
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.002) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(18,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 18  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(18, '2011-12-12')
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(18,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.001) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 19  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(19, '2011-12-12')
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 19  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(19,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 19  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(19, '2011-12-12')
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 19  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(19,)
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:10:20.585922 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:10:20.585922')
Mon, 12 Dec 2011 03:10:20 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:10:22.009464 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:10:22.009464')
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.006) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.009) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PRODUCT  AND "livesettings_setting"."key" = MEASUREMENT_SYSTEM ); args=(1, 1, 'PRODUCT', 'MEASUREMENT_SYSTEM')
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PRODUCT  AND "livesettings_longsetting"."key" = MEASUREMENT_SYSTEM ); args=(1, 1, 'PRODUCT', 'MEASUREMENT_SYSTEM')
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 1  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "product_product_related_items" ON ("product_product"."id" = "product_product_related_items"."to_product_id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product_related_items"."from_product_id" = 1  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "product_product_also_purchased" ON ("product_product"."id" = "product_product_also_purchased"."to_product_id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product_also_purchased"."from_product_id" = 1  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE "product_productattribute"."product_id" = 1  ORDER BY "product_attributeoption"."sort_order" ASC; args=(1,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE "product_price"."product_id" = 1  ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 1  ORDER BY "product_productimage"."sort" ASC; args=(1,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = price  AND "django_content_type"."app_label" = product ); args=('price', 'product')
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.005) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = productimage  AND "django_content_type"."app_label" = product ); args=('productimage', 'product')
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = product  AND "django_content_type"."app_label" = product ); args=('product', 'product')
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = 1 ; args=(u'1',)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:10:22.198960 ; args=(u'2011-12-05 03:10:22.198960',)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:10:22.198991 ; args=(u'2011-12-11 03:10:22.198991',)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:10:22.198997 ; args=(u'2011-12-12 02:10:22.198997',)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" ORDER BY "django_site"."domain" ASC; args=()
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=()
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass"; args=()
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=()
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=()
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Mon, 12 Dec 2011 03:10:22 satchmo_utils.widgets DEBUG    value: <class 'decimal.Decimal'>
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = THUMBNAIL  AND "livesettings_setting"."key" = IMAGE_QUALITY ); args=(1, 1, 'THUMBNAIL', 'IMAGE_QUALITY')
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = THUMBNAIL  AND "livesettings_longsetting"."key" = IMAGE_QUALITY ); args=(1, 1, 'THUMBNAIL', 'IMAGE_QUALITY')
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:10:22.889225 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:10:22.889225')
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:10:22.912805 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:10:22.912805')
Mon, 12 Dec 2011 03:10:22 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:11:21.609289 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:11:21.609289')
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 1  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "product_product_related_items" ON ("product_product"."id" = "product_product_related_items"."to_product_id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product_related_items"."from_product_id" = 1  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.002) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "product_product_also_purchased" ON ("product_product"."id" = "product_product_also_purchased"."to_product_id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product_also_purchased"."from_product_id" = 1  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") WHERE "product_category"."id" IN (1) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "django_site" WHERE "django_site"."id" = 1  LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_product" WHERE ("product_product"."sku" = dj-rocks  AND "product_product"."site_id" = 1  AND NOT ("product_product"."id" = 1 )) LIMIT 1; args=(u'dj-rocks', 1, 1)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_product" WHERE ("product_product"."site_id" = 1  AND "product_product"."slug" = dj-rocks  AND NOT ("product_product"."id" = 1 )) LIMIT 1; args=(1, u'dj-rocks', 1)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE "product_price"."product_id" = 1  ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 1  ORDER BY "product_productimage"."sort" ASC; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" WHERE "product_attributeoption"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_attributeoption" WHERE "product_attributeoption"."id" = 1  LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE "product_price"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_product" WHERE "product_product"."id" = 1  LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.005) UPDATE "product_product" SET "site_id" = 1, "name" = Django Rocks shirt, "slug" = dj-rocks, "sku" = dj-rocks, "short_description" = , "description" = Really cool shirt, "items_in_stock" = 0.000000, "meta" = , "date_added" = 2011-11-15, "active" = True, "featured" = True, "ordering" = 0, "weight" = NULL, "weight_units" = , "length" = NULL, "length_units" = , "width" = NULL, "width_units" = , "height" = NULL, "height_units" = , "total_sold" = 0.000000, "taxable" = False, "taxClass_id" = NULL, "shipclass" = DEFAULT WHERE "product_product"."id" = 1 ; args=(1, u'Django Rocks shirt', u'dj-rocks', u'dj-rocks', u'', u'Really cool shirt', u'0.000000', u'', '2011-11-15', True, True, 0, u'', u'', u'', u'', u'0.000000', False, u'DEFAULT', 1)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks', 1)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (30); args=(30,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1, '2011-12-12')
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, None, None, dj-rocks, 20.000000, 1.000000, True, True, 0.000000); args=(1, None, None, u'dj-rocks', u'20.000000', u'1.000000', True, True, u'0.000000')
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" INNER JOIN "product_product" T4 ON ("configurable_productvariation"."product_id" = T4."id") WHERE ("configurable_productvariation"."parent_id" = 1  AND T4."active" = True ); args=(1, True)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_s_b  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_s_b', 1)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (31); args=(31,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 5  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(5, '2011-12-12')
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.007) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1, '2011-12-12')
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.004) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_option"."option_group_id" ASC; args=(5,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.010) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, S::B, 1, dj-rocks_s_b, 20.000000, 1.000000, True, True, 0.000000); args=(1, 'S::B', 1, u'dj-rocks_s_b', u'20.000000', u'1.000000', True, True, u'0.000000')
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.005) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_s_w  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_s_w', 1)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (32); args=(32,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 6  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(6, '2011-12-12')
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1, '2011-12-12')
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:21 django.db.backends DEBUG    (0.005) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_option"."option_group_id" ASC; args=(6,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, S::W, 1, dj-rocks_s_w, 20.000000, 1.000000, True, True, 0.000000); args=(1, 'S::W', 1, u'dj-rocks_s_w', u'20.000000', u'1.000000', True, True, u'0.000000')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_s_bl  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_s_bl', 1)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (33); args=(33,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 7  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(7, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_option"."option_group_id" ASC; args=(7,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, S::BL, 1, dj-rocks_s_bl, 22.000000, 1.000000, True, True, 0.000000); args=(1, 'S::BL', 1, u'dj-rocks_s_bl', u'22.000000', u'1.000000', True, True, u'0.000000')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_m_b  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_m_b', 1)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (34); args=(34,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 8  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(8, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_option"."option_group_id" ASC; args=(8,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, M::B, 1, dj-rocks_m_b, 20.000000, 1.000000, True, True, 0.000000); args=(1, 'M::B', 1, u'dj-rocks_m_b', u'20.000000', u'1.000000', True, True, u'0.000000')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_m_w  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_m_w', 1)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (35); args=(35,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 9  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(9, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.010) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_option"."option_group_id" ASC; args=(9,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.004) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, M::W, 1, dj-rocks_m_w, 20.000000, 1.000000, True, True, 0.000000); args=(1, 'M::W', 1, u'dj-rocks_m_w', u'20.000000', u'1.000000', True, True, u'0.000000')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_m_bl  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_m_bl', 1)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (36); args=(36,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 10  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(10, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_option"."option_group_id" ASC; args=(10,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, M::BL, 1, dj-rocks_m_bl, 22.000000, 1.000000, True, True, 0.000000); args=(1, 'M::BL', 1, u'dj-rocks_m_bl', u'22.000000', u'1.000000', True, True, u'0.000000')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_l_b  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_l_b', 1)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (37); args=(37,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 11  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(11, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(11,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_option"."option_group_id" ASC; args=(11,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, L::B, 1, dj-rocks_l_b, 21.000000, 1.000000, True, True, 0.000000); args=(1, 'L::B', 1, u'dj-rocks_l_b', u'21.000000', u'1.000000', True, True, u'0.000000')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_l_w  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_l_w', 1)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (38); args=(38,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 12  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(12, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 12  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(12,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 12  ORDER BY "product_option"."option_group_id" ASC; args=(12,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, L::W, 1, dj-rocks_l_w, 21.000000, 1.000000, True, True, 0.000000); args=(1, 'L::W', 1, u'dj-rocks_l_w', u'21.000000', u'1.000000', True, True, u'0.000000')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.008) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_l_bl  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_l_bl', 1)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (39); args=(39,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 13  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(13, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.003) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_option"."option_group_id" ASC; args=(13,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, L::BL, 1, dj-rocks_l_bl, 23.000000, 1.000000, True, True, 0.000000); args=(1, 'L::BL', 1, u'dj-rocks_l_bl', u'23.000000', u'1.000000', True, True, u'0.000000')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product_category"."id", "product_product_category"."product_id", "product_product_category"."category_id" FROM "product_product_category" WHERE "product_product_category"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) DELETE FROM "product_product_category" WHERE "id" IN (5); args=(5,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product_category"."category_id" FROM "product_product_category" WHERE ("product_product_category"."product_id" = 1  AND "product_product_category"."category_id" IN (1)); args=(1, 1)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) INSERT INTO "product_product_category" ("product_id", "category_id") VALUES (1, 1); args=(1, 1)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product_related_items"."id", "product_product_related_items"."from_product_id", "product_product_related_items"."to_product_id" FROM "product_product_related_items" WHERE "product_product_related_items"."from_product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product_related_items"."id", "product_product_related_items"."from_product_id", "product_product_related_items"."to_product_id" FROM "product_product_related_items" WHERE "product_product_related_items"."to_product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product_also_purchased"."id", "product_product_also_purchased"."from_product_id", "product_product_also_purchased"."to_product_id" FROM "product_product_also_purchased" WHERE "product_product_also_purchased"."from_product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product_also_purchased"."id", "product_product_also_purchased"."from_product_id", "product_product_also_purchased"."to_product_id" FROM "product_product_also_purchased" WHERE "product_product_also_purchased"."to_product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE "product_productattribute"."product_id" = 1  ORDER BY "product_attributeoption"."sort_order" ASC; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.001) INSERT INTO "product_productattribute" ("product_id", "languagecode", "option_id", "value") VALUES (1, pl, 1, war); args=(1, u'pl', 1, u'war')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE "product_price"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 1  AND "product_price"."quantity" = 1  AND "product_price"."expires" IS NULL AND NOT ("product_price"."id" = 1 )); args=(1, Decimal('1'), 1)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_price" WHERE "product_price"."id" = 1  LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.002) UPDATE "product_price" SET "product_id" = 1, "price" = 20.000000, "quantity" = 1.000000, "expires" = NULL WHERE "product_price"."id" = 1 ; args=(1, u'20.000000', u'1.000000', 1)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks', 1)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (53); args=(53,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.002) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, None, None, dj-rocks, 20.000000, 1.000000, True, True, 0.000000); args=(1, None, None, u'dj-rocks', u'20.000000', u'1.000000', True, True, u'0.000000')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" INNER JOIN "product_product" T4 ON ("configurable_productvariation"."product_id" = T4."id") WHERE ("configurable_productvariation"."parent_id" = 1  AND T4."active" = True ); args=(1, True)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_s_b  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_s_b', 1)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (54); args=(54,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 5  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(5, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_option"."option_group_id" ASC; args=(5,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, S::B, 1, dj-rocks_s_b, 20.000000, 1.000000, True, True, 0.000000); args=(1, 'S::B', 1, u'dj-rocks_s_b', u'20.000000', u'1.000000', True, True, u'0.000000')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_s_w  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_s_w', 1)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (55); args=(55,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 6  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(6, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_option"."option_group_id" ASC; args=(6,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, S::W, 1, dj-rocks_s_w, 20.000000, 1.000000, True, True, 0.000000); args=(1, 'S::W', 1, u'dj-rocks_s_w', u'20.000000', u'1.000000', True, True, u'0.000000')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_s_bl  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_s_bl', 1)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (56); args=(56,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 7  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(7, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_option"."option_group_id" ASC; args=(7,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, S::BL, 1, dj-rocks_s_bl, 22.000000, 1.000000, True, True, 0.000000); args=(1, 'S::BL', 1, u'dj-rocks_s_bl', u'22.000000', u'1.000000', True, True, u'0.000000')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_m_b  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_m_b', 1)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (57); args=(57,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 8  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(8, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_option"."option_group_id" ASC; args=(8,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, M::B, 1, dj-rocks_m_b, 20.000000, 1.000000, True, True, 0.000000); args=(1, 'M::B', 1, u'dj-rocks_m_b', u'20.000000', u'1.000000', True, True, u'0.000000')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.001) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_m_w  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_m_w', 1)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (58); args=(58,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 9  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(9, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_option"."option_group_id" ASC; args=(9,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, M::W, 1, dj-rocks_m_w, 20.000000, 1.000000, True, True, 0.000000); args=(1, 'M::W', 1, u'dj-rocks_m_w', u'20.000000', u'1.000000', True, True, u'0.000000')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_m_bl  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_m_bl', 1)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (59); args=(59,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 10  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(10, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_option"."option_group_id" ASC; args=(10,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, M::BL, 1, dj-rocks_m_bl, 22.000000, 1.000000, True, True, 0.000000); args=(1, 'M::BL', 1, u'dj-rocks_m_bl', u'22.000000', u'1.000000', True, True, u'0.000000')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_l_b  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_l_b', 1)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (60); args=(60,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 11  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(11, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(11,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_option"."option_group_id" ASC; args=(11,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, L::B, 1, dj-rocks_l_b, 21.000000, 1.000000, True, True, 0.000000); args=(1, 'L::B', 1, u'dj-rocks_l_b', u'21.000000', u'1.000000', True, True, u'0.000000')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_l_w  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_l_w', 1)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (61); args=(61,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 12  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(12, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 12  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(12,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 12  ORDER BY "product_option"."option_group_id" ASC; args=(12,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, L::W, 1, dj-rocks_l_w, 21.000000, 1.000000, True, True, 0.000000); args=(1, 'L::W', 1, u'dj-rocks_l_w', u'21.000000', u'1.000000', True, True, u'0.000000')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.001) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_l_bl  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_l_bl', 1)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (62); args=(62,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 13  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(13, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(1, '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_option"."option_group_id" ASC; args=(13,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, L::BL, 1, dj-rocks_l_bl, 23.000000, 1.000000, True, True, 0.000000); args=(1, 'L::BL', 1, u'dj-rocks_l_bl', u'23.000000', u'1.000000', True, True, u'0.000000')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.003) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) INSERT INTO "django_admin_log" ("action_time", "user_id", "content_type_id", "object_id", "object_repr", "action_flag", "change_message") VALUES (2011-12-12 03:11:22.777654, 1, 49, 1, Django Rocks shirt, 2, Zmieniono taxable Dodano Atrybut produktu "voiship". Zmieniono price w Cena "20.00".); args=(u'2011-12-12 03:11:22.777654', 1, 49, u'1', u'Django Rocks shirt', 2, u'Zmieniono taxable Dodano Atrybut produktu "voiship". Zmieniono price w Cena "20.00".')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.002) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:11:22.815185 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:11:22.815185')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_product"; args=()
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=()
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" ASC; args=()
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "shop_config"."site_id", "shop_config"."store_name", "shop_config"."store_description", "shop_config"."store_email", "shop_config"."street1", "shop_config"."street2", "shop_config"."city", "shop_config"."state", "shop_config"."postal_code", "shop_config"."country_id", "shop_config"."phone", "shop_config"."in_country_only", "shop_config"."sales_country_id" FROM "shop_config" WHERE "shop_config"."site_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_discount" WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."site_id" = 1  AND "product_discount"."startDate" <= 2011-12-12  AND "product_discount"."endDate" > 2011-12-12 ); args=(True, True, 1, '2011-12-12', '2011-12-12')
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = product ; args=(u'product',)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.003) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:11:22.914060 ; args=(u'2011-12-05 03:11:22.914060',)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:11:22.914096 ; args=(u'2011-12-11 03:11:22.914096',)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:11:22.914161 ; args=(u'2011-12-12 02:11:22.914161',)
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:11:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.004) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 2  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(2, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 5  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(5, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.008) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 5  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(5, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 6  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(6, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.009) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 6  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(6, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 7  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(7, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 7  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(7, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 8  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(8, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 8  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(8, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 9  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(9, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 9  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(9, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 10  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(10, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 10  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(10, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 11  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(11, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(11,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 11  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(11, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.003) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(11,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 12  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(12, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 12  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(12,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 12  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(12, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 12  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(12,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 13  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(13, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 13  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(13, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 14 ; args=(14,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 14 ; args=(14,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 14 ; args=(14,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 14 ; args=(14,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 14  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(14, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 14  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(14,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 14  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(14, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 14  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(14,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 15 ; args=(15,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 15 ; args=(15,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 15 ; args=(15,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 15 ; args=(15,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 15  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(15, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 15  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(15,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 15  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(15, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 15  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(15,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 16 ; args=(16,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 16 ; args=(16,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 16 ; args=(16,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 16 ; args=(16,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 16  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(16, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 16  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(16,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 16  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(16, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 16  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(16,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 17  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(17, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(17,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 17  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(17, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(17,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 18  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(18, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(18,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 18  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(18, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(18,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 19  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(19, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 19  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(19,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 19  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(19, '2011-12-12')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 19  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(19,)
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:11:23.864796 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:11:23.864796')
Mon, 12 Dec 2011 03:11:23 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:42 django.db.backends DEBUG    (0.013) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:11:42.864221 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:11:42.864221')
Mon, 12 Dec 2011 03:11:42 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:42 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:42 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:42 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:11:42 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = product ; args=(u'product',)
Mon, 12 Dec 2011 03:11:42 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:11:42 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:11:42 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:11:42.915118 ; args=(u'2011-12-05 03:11:42.915118',)
Mon, 12 Dec 2011 03:11:42 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:11:42.915133 ; args=(u'2011-12-11 03:11:42.915133',)
Mon, 12 Dec 2011 03:11:42 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:11:42.915139 ; args=(u'2011-12-12 02:11:42.915139',)
Mon, 12 Dec 2011 03:11:42 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:11:42 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:11:42 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:43 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:11:43.087382 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:11:43.087382')
Mon, 12 Dec 2011 03:11:43 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:46 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:11:46.591342 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:11:46.591342')
Mon, 12 Dec 2011 03:11:46 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:46 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:46 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:46 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:11:46 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = admin ; args=(u'admin',)
Mon, 12 Dec 2011 03:11:46 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:11:46 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:11:46 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:11:46.644390 ; args=(u'2011-12-05 03:11:46.644390',)
Mon, 12 Dec 2011 03:11:46 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:11:46.644407 ; args=(u'2011-12-11 03:11:46.644407',)
Mon, 12 Dec 2011 03:11:46 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:11:46.644417 ; args=(u'2011-12-12 02:11:46.644417',)
Mon, 12 Dec 2011 03:11:46 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:11:46 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:11:46 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:46 django.db.backends DEBUG    (0.000) SELECT "django_admin_log"."id", "django_admin_log"."action_time", "django_admin_log"."user_id", "django_admin_log"."content_type_id", "django_admin_log"."object_id", "django_admin_log"."object_repr", "django_admin_log"."action_flag", "django_admin_log"."change_message", "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined", "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_admin_log" INNER JOIN "auth_user" ON ("django_admin_log"."user_id" = "auth_user"."id") LEFT OUTER JOIN "django_content_type" ON ("django_admin_log"."content_type_id" = "django_content_type"."id") WHERE "django_admin_log"."user_id" = 1  ORDER BY "django_admin_log"."action_time" DESC LIMIT 10; args=(1,)
Mon, 12 Dec 2011 03:11:46 django.db.backends DEBUG    (0.000) SELECT "shop_order"."id", "shop_order"."site_id", "shop_order"."contact_id", "shop_order"."ship_addressee", "shop_order"."ship_street1", "shop_order"."ship_street2", "shop_order"."ship_city", "shop_order"."ship_state", "shop_order"."ship_postal_code", "shop_order"."ship_country", "shop_order"."bill_addressee", "shop_order"."bill_street1", "shop_order"."bill_street2", "shop_order"."bill_city", "shop_order"."bill_state", "shop_order"."bill_postal_code", "shop_order"."bill_country", "shop_order"."notes", "shop_order"."sub_total", "shop_order"."total", "shop_order"."discount_code", "shop_order"."discount", "shop_order"."method", "shop_order"."shipping_description", "shop_order"."shipping_method", "shop_order"."shipping_model", "shop_order"."shipping_cost", "shop_order"."shipping_discount", "shop_order"."tax", "shop_order"."time_stamp", "shop_order"."status" FROM "shop_order" WHERE "shop_order"."status" = New  ORDER BY "shop_order"."time_stamp" DESC; args=(u'New',)
Mon, 12 Dec 2011 03:11:46 django.db.backends DEBUG    (0.001) SELECT "shop_order"."id", "shop_order"."site_id", "shop_order"."contact_id", "shop_order"."ship_addressee", "shop_order"."ship_street1", "shop_order"."ship_street2", "shop_order"."ship_city", "shop_order"."ship_state", "shop_order"."ship_postal_code", "shop_order"."ship_country", "shop_order"."bill_addressee", "shop_order"."bill_street1", "shop_order"."bill_street2", "shop_order"."bill_city", "shop_order"."bill_state", "shop_order"."bill_postal_code", "shop_order"."bill_country", "shop_order"."notes", "shop_order"."sub_total", "shop_order"."total", "shop_order"."discount_code", "shop_order"."discount", "shop_order"."method", "shop_order"."shipping_description", "shop_order"."shipping_method", "shop_order"."shipping_model", "shop_order"."shipping_cost", "shop_order"."shipping_discount", "shop_order"."tax", "shop_order"."time_stamp", "shop_order"."status" FROM "shop_order" WHERE "shop_order"."status" = Blocked  ORDER BY "shop_order"."time_stamp" DESC; args=(u'Blocked',)
Mon, 12 Dec 2011 03:11:46 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = admin_tools ; args=(u'admin_tools',)
Mon, 12 Dec 2011 03:11:46 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:11:46.876837 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:11:46.876837')
Mon, 12 Dec 2011 03:11:46 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:52 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:11:52.904428 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:11:52.904428')
Mon, 12 Dec 2011 03:11:52 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "configurable_configurableproduct"; args=()
Mon, 12 Dec 2011 03:11:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" INNER JOIN "product_product" ON ("configurable_configurableproduct"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" DESC, "product_product"."ordering" DESC, "product_product"."name" DESC; args=()
Mon, 12 Dec 2011 03:11:52 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:52 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:52 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:11:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = configurableproduct ; args=(u'configurableproduct',)
Mon, 12 Dec 2011 03:11:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:11:52 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:11:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:11:52.936946 ; args=(u'2011-12-05 03:11:52.936946',)
Mon, 12 Dec 2011 03:11:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:11:52.936966 ; args=(u'2011-12-11 03:11:52.936966',)
Mon, 12 Dec 2011 03:11:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:11:52.936972 ; args=(u'2011-12-12 02:11:52.936972',)
Mon, 12 Dec 2011 03:11:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:11:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:11:52 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:53 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:11:53 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:11:53.164460 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:11:53.164460')
Mon, 12 Dec 2011 03:11:53 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:11:55.142625 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:11:55.142625')
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 4  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(4,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = 4 ; args=(u'4',)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:11:55.227701 ; args=(u'2011-12-05 03:11:55.227701',)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:11:55.227717 ; args=(u'2011-12-11 03:11:55.227717',)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:11:55.227722 ; args=(u'2011-12-12 02:11:55.227722',)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=()
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 4  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(4,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 3  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(3,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(17,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(17,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(18,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(17,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(18,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 19  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(19,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:11:55.533704 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:11:55.533704')
Mon, 12 Dec 2011 03:11:55 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:25 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:12:25.964555 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:12:25.964555')
Mon, 12 Dec 2011 03:12:25 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:25 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.011) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 3  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(3,)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.007) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = 3 ; args=(u'3',)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:12:26.050606 ; args=(u'2011-12-05 03:12:26.050606',)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:12:26.050625 ; args=(u'2011-12-11 03:12:26.050625',)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:12:26.050633 ; args=(u'2011-12-12 02:12:26.050633',)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=()
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 3  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(3,)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 3  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(3,)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 14  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(14,)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 14 ; args=(14,)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 14  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(14,)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.002) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 15  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(15,)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 15 ; args=(15,)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 14  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(14,)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 15  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(15,)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 16  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(16,)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.005) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 16 ; args=(16,)
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:12:26.431819 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:12:26.431819')
Mon, 12 Dec 2011 03:12:26 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:12:31.627140 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:12:31.627140')
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.001) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = 1 ; args=(u'1',)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:12:31.699758 ; args=(u'2011-12-05 03:12:31.699758',)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:12:31.699773 ; args=(u'2011-12-11 03:12:31.699773',)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:12:31.699778 ; args=(u'2011-12-12 02:12:31.699778',)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=()
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 2  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.008) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.006) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(11,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(11,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.001) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 12  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(12,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(11,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 12  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(12,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:12:31.992517 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:12:31.992517')
Mon, 12 Dec 2011 03:12:31 django.db.backends DEBUG    (0.001) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = 1 ; args=(u'1',)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:12:32.036938 ; args=(u'2011-12-05 03:12:32.036938',)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:12:32.036954 ; args=(u'2011-12-11 03:12:32.036954',)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:12:32.036960 ; args=(u'2011-12-12 02:12:32.036960',)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.005) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=()
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.001) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 2  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.002) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.001) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(11,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(11,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 12  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(12,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.004) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(11,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 12  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(12,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.014) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:12:32.707212 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:12:32.707212')
Mon, 12 Dec 2011 03:12:32 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:06 django.db.backends DEBUG    (0.014) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:13:06.972314 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:13:06.972314')
Mon, 12 Dec 2011 03:13:06 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:06 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:06 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.013) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 2  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.003) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.002) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(11,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 12  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(12,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 2  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.004) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = variations ; args=(u'variations',)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:13:07.173271 ; args=(u'2011-12-05 03:13:07.173271',)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:13:07.173291 ; args=(u'2011-12-11 03:13:07.173291',)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:13:07.173298 ; args=(u'2011-12-12 02:13:07.173298',)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:13:07 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.022) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:13:43.621315 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:13:43.621315')
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.005) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.001) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 2  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.001) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.009) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(11,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 12  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(12,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 2  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.009) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.010) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.008) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.006) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:13:43 product.views.adminviews DEBUG    Saving form
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_optiongroup"."site_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 2  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:13:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(11,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 12  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(12,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.001) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 2  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.006) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.010) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.003) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = variations ; args=(u'variations',)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.004) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:13:44.139254 ; args=(u'2011-12-05 03:13:44.139254',)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:13:44.139274 ; args=(u'2011-12-11 03:13:44.139274',)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.004) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:13:44.139282 ; args=(u'2011-12-12 02:13:44.139282',)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:13:44 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:00 django.db.backends DEBUG    (0.017) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:00.910688 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:00.910688')
Mon, 12 Dec 2011 03:14:00 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:00 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:00 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:00 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:00 django.db.backends DEBUG    (0.001) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:00 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:00 django.db.backends DEBUG    (0.001) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:00 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:00 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:00 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:00 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 2  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:14:00 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:14:00 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:14:00 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 11  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(11,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 12  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(12,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 2  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 11 ; args=(11,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 12 ; args=(12,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:14:01 product.views.adminviews DEBUG    Saving form
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_optiongroup"."site_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.006) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:14:01 product.forms INFO     Deleting variation for [dj-rocks] [<Option: Large>, <Option: Black>]
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_producttranslation"."id", "product_producttranslation"."product_id", "product_producttranslation"."languagecode", "product_producttranslation"."name", "product_producttranslation"."description", "product_producttranslation"."short_description", "product_producttranslation"."version", "product_producttranslation"."active" FROM "product_producttranslation" INNER JOIN "product_product" ON ("product_producttranslation"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_producttranslation"."product_id" IN (11) ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC, "product_producttranslation"."name" ASC, "product_producttranslation"."languagecode" ASC; args=(11,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE "product_productattribute"."product_id" IN (11) ORDER BY "product_attributeoption"."sort_order" ASC; args=(11,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE "product_price"."product_id" IN (11) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(11,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" IN (11) ORDER BY "product_productimage"."sort" ASC; args=(11,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."product_id" IN (11) ORDER BY "shop_cartitem"."id" ASC; args=(11,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "shop_orderitem"."id", "shop_orderitem"."order_id", "shop_orderitem"."product_id", "shop_orderitem"."quantity", "shop_orderitem"."unit_price", "shop_orderitem"."unit_tax", "shop_orderitem"."line_item_price", "shop_orderitem"."tax", "shop_orderitem"."expire_date", "shop_orderitem"."completed", "shop_orderitem"."discount" FROM "shop_orderitem" WHERE "shop_orderitem"."product_id" IN (11) ORDER BY "shop_orderitem"."id" ASC; args=(11,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" IN (11); args=(11,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" IN (11); args=(11,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" IN (11); args=(11,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) DELETE FROM "product_product_also_purchased" WHERE "to_product_id" IN (11); args=(11,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) DELETE FROM "product_product_also_purchased" WHERE "from_product_id" IN (11); args=(11,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.005) DELETE FROM "product_product_category" WHERE "product_id" IN (11); args=(11,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) DELETE FROM "product_discount_valid_products" WHERE "product_id" IN (11); args=(11,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) DELETE FROM "configurable_productvariation_options" WHERE "productvariation_id" IN (11); args=(11,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) DELETE FROM "product_product_related_items" WHERE "from_product_id" IN (11); args=(11,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) DELETE FROM "product_product_related_items" WHERE "to_product_id" IN (11); args=(11,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) DELETE FROM "configurable_productvariation" WHERE "product_id" IN (11); args=(11,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) DELETE FROM "product_product" WHERE "id" IN (11); args=(11,)
Mon, 12 Dec 2011 03:14:01 product.forms INFO     Deleting variation for [dj-rocks] [<Option: Large>, <Option: White>]
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_producttranslation"."id", "product_producttranslation"."product_id", "product_producttranslation"."languagecode", "product_producttranslation"."name", "product_producttranslation"."description", "product_producttranslation"."short_description", "product_producttranslation"."version", "product_producttranslation"."active" FROM "product_producttranslation" INNER JOIN "product_product" ON ("product_producttranslation"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_producttranslation"."product_id" IN (12) ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC, "product_producttranslation"."name" ASC, "product_producttranslation"."languagecode" ASC; args=(12,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE "product_productattribute"."product_id" IN (12) ORDER BY "product_attributeoption"."sort_order" ASC; args=(12,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE "product_price"."product_id" IN (12) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(12,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" IN (12) ORDER BY "product_productimage"."sort" ASC; args=(12,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."product_id" IN (12) ORDER BY "shop_cartitem"."id" ASC; args=(12,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "shop_orderitem"."id", "shop_orderitem"."order_id", "shop_orderitem"."product_id", "shop_orderitem"."quantity", "shop_orderitem"."unit_price", "shop_orderitem"."unit_tax", "shop_orderitem"."line_item_price", "shop_orderitem"."tax", "shop_orderitem"."expire_date", "shop_orderitem"."completed", "shop_orderitem"."discount" FROM "shop_orderitem" WHERE "shop_orderitem"."product_id" IN (12) ORDER BY "shop_orderitem"."id" ASC; args=(12,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" IN (12); args=(12,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" IN (12); args=(12,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" IN (12); args=(12,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) DELETE FROM "product_product_also_purchased" WHERE "to_product_id" IN (12); args=(12,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) DELETE FROM "product_product_also_purchased" WHERE "from_product_id" IN (12); args=(12,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) DELETE FROM "product_product_category" WHERE "product_id" IN (12); args=(12,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) DELETE FROM "product_discount_valid_products" WHERE "product_id" IN (12); args=(12,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.007) DELETE FROM "configurable_productvariation_options" WHERE "productvariation_id" IN (12); args=(12,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) DELETE FROM "product_product_related_items" WHERE "from_product_id" IN (12); args=(12,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) DELETE FROM "product_product_related_items" WHERE "to_product_id" IN (12); args=(12,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) DELETE FROM "configurable_productvariation" WHERE "product_id" IN (12); args=(12,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) DELETE FROM "product_product" WHERE "id" IN (12); args=(12,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 2  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 2  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.008) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = variations ; args=(u'variations',)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:14:01.526708 ; args=(u'2011-12-05 03:14:01.526708',)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:14:01.526729 ; args=(u'2011-12-11 03:14:01.526729',)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:14:01.526737 ; args=(u'2011-12-12 02:14:01.526737',)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:14:01 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:09.264329 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:09.264329')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."slug" = dj-rocks  AND "product_product"."site_id" = 1 ); args=(True, u'dj-rocks', 1)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = TAX  AND "livesettings_setting"."key" = DEFAULT_VIEW_TAX ); args=(1, 1, 'TAX', 'DEFAULT_VIEW_TAX')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = TAX  AND "livesettings_longsetting"."key" = DEFAULT_VIEW_TAX ); args=(1, 1, 'TAX', 'DEFAULT_VIEW_TAX')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2011-12-12  AND "product_discount"."endDate" > 2011-12-12  AND ("product_discount_valid_products"."product_id" IN (1) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2011-12-12', '2011-12-12', 1, True)
Mon, 12 Dec 2011 03:14:09 root         DEBUG    subtypes = ('ConfigurableProduct',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" INNER JOIN "product_product" T4 ON ("configurable_productvariation"."product_id" = T4."id") WHERE ("configurable_productvariation"."parent_id" = 1  AND T4."active" = True ); args=(1, True)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") INNER JOIN "django_site" ON ("product_optiongroup"."site_id" = "django_site"."id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 2  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."sort_order" FROM "product_optiongroup" ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=()
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE ("product_option"."option_group_id" IN (1, 2) AND "product_option"."value" IN (B, BL, M, L, S, W)) ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1, 2, 'B', 'BL', 'M', 'L', 'S', 'W')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 2  AND "product_optiongrouptranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(2, u'pl-pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 2  AND "product_optiongrouptranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(2, u'pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 2  AND "product_optiongrouptranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(2, u'pl%')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 1  AND "product_optiongrouptranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(1, u'pl-pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 1  AND "product_optiongrouptranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(1, u'pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 1  AND "product_optiongrouptranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(1, u'pl%')
Mon, 12 Dec 2011 03:14:09 product.utils DEBUG    serialized: ({'id': 1, 'items': (<Option: Small>, <Option: Medium>, <Option: Large>), 'name': u'sizes', 'description': u''}, {'id': 2, 'items': (<Option: Black>, <Option: White>, <Option: Blue>), 'name': u'colors', 'description': u''})
Mon, 12 Dec 2011 03:14:09 product.utils DEBUG    Serialized Options dj-rocks: ({'id': 1, 'items': (<Option: Small>, <Option: Medium>, <Option: Large>), 'name': u'sizes', 'description': u''}, {'id': 2, 'items': (<Option: Black>, <Option: White>, <Option: Blue>), 'name': u'colors', 'description': u''})
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PRODUCT  AND "livesettings_setting"."key" = NO_STOCK_CHECKOUT ); args=(1, 1, 'PRODUCT', 'NO_STOCK_CHECKOUT')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PRODUCT  AND "livesettings_longsetting"."key" = NO_STOCK_CHECKOUT ); args=(1, 1, 'PRODUCT', 'NO_STOCK_CHECKOUT')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2011-12-12  AND "product_discount"."endDate" > 2011-12-12  AND ("product_discount_valid_products"."product_id" IN (1) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2011-12-12', '2011-12-12', 1, True)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productpricelookup" WHERE "product_productpricelookup"."parentid" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE "product_productpricelookup"."parentid" = 1  ORDER BY "product_productpricelookup"."price" DESC; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_l_bl ; args=(u'dj-rocks_l_bl',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 13  ORDER BY "product_productimage"."sort" ASC; args=(13,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_m_bl ; args=(u'dj-rocks_m_bl',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 10  ORDER BY "product_productimage"."sort" ASC; args=(10,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_s_bl ; args=(u'dj-rocks_s_bl',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 7  ORDER BY "product_productimage"."sort" ASC; args=(7,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_l_b ; args=(u'dj-rocks_l_b',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_l_w ; args=(u'dj-rocks_l_w',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_m_b ; args=(u'dj-rocks_m_b',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 8  ORDER BY "product_productimage"."sort" ASC; args=(8,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_m_w ; args=(u'dj-rocks_m_w',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 9  ORDER BY "product_productimage"."sort" ASC; args=(9,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_s_b ; args=(u'dj-rocks_s_b',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 5  ORDER BY "product_productimage"."sort" ASC; args=(5,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_s_w ; args=(u'dj-rocks_s_w',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 6  ORDER BY "product_productimage"."sort" ASC; args=(6,)
Mon, 12 Dec 2011 03:14:09 product.views DEBUG    finding product template: ['product/detail_configurableproduct.html', 'product/product.html']
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks ; args=(u'dj-rocks',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.001) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:14:09.489097 ; args=(u'2011-12-05 03:14:09.489097',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:14:09.489113 ; args=(u'2011-12-11 03:14:09.489113',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:14:09.489118 ; args=(u'2011-12-12 02:14:09.489118',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.007) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = page_head ; args=(u'page_head',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "app_plugins_plugin"."id", "app_plugins_plugin"."point_id", "app_plugins_plugin"."label", "app_plugins_plugin"."index", "app_plugins_plugin"."registered", "app_plugins_plugin"."status", "app_plugins_plugin"."required", "app_plugins_plugin"."template", "app_plugins_plugin"."_order" FROM "app_plugins_plugin" WHERE "app_plugins_plugin"."label" = satchmo_toolbar.page_head ; args=(u'satchmo_toolbar.page_head',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = page_top ; args=(u'page_top',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "app_plugins_plugin"."id", "app_plugins_plugin"."point_id", "app_plugins_plugin"."label", "app_plugins_plugin"."index", "app_plugins_plugin"."registered", "app_plugins_plugin"."status", "app_plugins_plugin"."required", "app_plugins_plugin"."template", "app_plugins_plugin"."_order" FROM "app_plugins_plugin" WHERE "app_plugins_plugin"."label" = satchmo_toolbar.page_top ; args=(u'satchmo_toolbar.page_top',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = satchmo_toolbar ; args=(u'satchmo_toolbar',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 1  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 1  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.001) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."id" = 1 ); args=(True, 1)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") WHERE ("product_category"."is_active" = True  AND "product_category"."site_id" = 1  AND T3."id" IS NULL) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(True, 1)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 3  AND "product_category"."is_active" = True ); args=(3, True)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 3  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(3, u'pl-pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 3  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(3, u'pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 3  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(3, u'pl%')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 3  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(3, True)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 4  AND "product_category"."is_active" = True ); args=(4, True)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 4  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(4, u'pl-pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 4  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(4, u'pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 4  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(4, u'pl%')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 4  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(4, True)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 5  AND "product_category"."is_active" = True ); args=(5, True)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.003) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 5  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(5, u'pl-pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 5  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(5, u'pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 5  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(5, u'pl%')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 6  AND "product_category"."is_active" = True ); args=(6, True)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 6  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(6, u'pl-pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 6  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(6, u'pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 6  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(6, u'pl%')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 1  AND "product_category"."is_active" = True ); args=(1, True)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 1  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(1, u'pl-pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 1  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(1, u'pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 1  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(1, u'pl%')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 1  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(1, True)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 2  AND "product_category"."is_active" = True ); args=(2, True)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 2  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(2, u'pl-pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 2  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(2, u'pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 2  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(2, u'pl%')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 7  AND "product_category"."is_active" = True ); args=(7, True)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 7  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(7, u'pl-pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 7  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(7, u'pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 7  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(7, u'pl%')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = sidebar_secondary_bottom ; args=(u'sidebar_secondary_bottom',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 1  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(1, u'pl-pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 1  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(1, u'pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 1  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(1, u'pl%')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 1  ORDER BY "product_productimage"."sort" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productattribute" WHERE ("product_productattribute"."product_id" = 1  AND "product_productattribute"."languagecode" = pl-pl ); args=(1, 'pl-pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE ("product_productattribute"."product_id" = 1  AND ("product_productattribute"."languagecode" IS NULL OR "product_productattribute"."languagecode" =  )) ORDER BY "product_attributeoption"."sort_order" ASC; args=(1, '')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 1  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(1, u'pl-pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 1  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(1, u'pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 1  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(1, u'pl%')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 2  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(2, u'pl-pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 2  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(2, u'pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 2  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(2, u'pl%')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 3  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(3, u'pl-pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 3  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(3, u'pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.003) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 3  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(3, u'pl%')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 4  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(4, u'pl-pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 4  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(4, u'pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 4  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(4, u'pl%')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 5  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(5, u'pl-pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 5  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(5, u'pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 5  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(5, u'pl%')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 6  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(6, u'pl-pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 6  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(6, u'pl')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 6  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(6, u'pl%')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = product_add_buttons ; args=(u'product_add_buttons',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = product_form ; args=(u'product_form',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = product_footer ; args=(u'product_footer',)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = GOOGLE  AND "livesettings_setting"."key" = ANALYTICS ); args=(1, 1, 'GOOGLE', 'ANALYTICS')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = GOOGLE  AND "livesettings_longsetting"."key" = ANALYTICS ); args=(1, 1, 'GOOGLE', 'ANALYTICS')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:09.847877 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:09.847877')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.006) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:09.864567 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:09.864567')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:09.878242 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:09.878242')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.005) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.015) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:09.905487 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:09.905487')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.015) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:09.925398 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:09.925398')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:09.949983 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:09.949983')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:09.974424 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:09.974424')
Mon, 12 Dec 2011 03:14:09 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.013) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:09.996198 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:09.996198')
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.012) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:10.026861 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:10.026861')
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:10.052102 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:10.052102')
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.017) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:10.068786 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:10.068786')
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:10.370925 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:10.370925')
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:10.474515 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:10.474515')
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:10.491994 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:10.491994')
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:10.511521 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:10.511521')
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:10.534328 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:10.534328')
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:10.553859 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:10.553859')
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.001) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:10.576920 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:10.576920')
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:10.606800 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:10.606800')
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.019) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:10.617245 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:10.617245')
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:10.641093 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:10.641093')
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:10.669992 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:10.669992')
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:10.688398 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:10.688398')
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:10.708016 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:10.708016')
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:10.728482 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:10.728482')
Mon, 12 Dec 2011 03:14:10 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:34.284382 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:34.284382')
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:34 shop.views.cart DEBUG    FORM: <QueryDict: {u'addcart': [u'Dodaj do koszyka'], u'productname': [u'dj-rocks_l_b'], u'1': [u'L'], u'2': [u'B'], u'csrfmiddlewaretoken': [u'0519ea972c538f23846b83b01ec90545'], u'quantity': [u'1']}>
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = SHOP  AND "livesettings_setting"."key" = CART_PRECISION ); args=(1, 1, 'SHOP', 'CART_PRECISION')
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = SHOP  AND "livesettings_longsetting"."key" = CART_PRECISION ); args=(1, 1, 'SHOP', 'CART_PRECISION')
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = SHOP  AND "livesettings_setting"."key" = CART_ROUNDING ); args=(1, 1, 'SHOP', 'CART_ROUNDING')
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = SHOP  AND "livesettings_longsetting"."key" = CART_ROUNDING ); args=(1, 1, 'SHOP', 'CART_ROUNDING')
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE ("product_product"."slug" = dj-rocks_l_b  AND "product_product"."site_id" = 1 ); args=(u'dj-rocks_l_b', 1)
Mon, 12 Dec 2011 03:14:34 shop.views.cart DEBUG    Could not find product: dj-rocks_l_b
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = add ; args=(u'add',)
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:14:34.345084 ; args=(u'2011-12-05 03:14:34.345084',)
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:14:34.345099 ; args=(u'2011-12-11 03:14:34.345099',)
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:14:34.345104 ; args=(u'2011-12-12 02:14:34.345104',)
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:34.493517 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:34.493517')
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:34.674817 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:34.674817')
Mon, 12 Dec 2011 03:14:34 django.db.backends DEBUG    (0.006) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.023) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:44.331737 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:44.331737')
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PRODUCT  AND "livesettings_setting"."key" = NUM_DISPLAY ); args=(1, 1, 'PRODUCT', 'NUM_DISPLAY')
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PRODUCT  AND "livesettings_longsetting"."key" = NUM_DISPLAY ); args=(1, 1, 'PRODUCT', 'NUM_DISPLAY')
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PRODUCT  AND "livesettings_setting"."key" = RANDOM_FEATURED ); args=(1, 1, 'PRODUCT', 'RANDOM_FEATURED')
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PRODUCT  AND "livesettings_longsetting"."key" = RANDOM_FEATURED ); args=(1, 1, 'PRODUCT', 'RANDOM_FEATURED')
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PRODUCT  AND "livesettings_setting"."key" = NUM_PAGINATED ); args=(1, 1, 'PRODUCT', 'NUM_PAGINATED')
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PRODUCT  AND "livesettings_longsetting"."key" = NUM_PAGINATED ); args=(1, 1, 'PRODUCT', 'NUM_PAGINATED')
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."site_id" = 1  AND "product_product"."featured" = True ); args=(True, 1, True)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" =  ; args=(u'',)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:14:44.440212 ; args=(u'2011-12-05 03:14:44.440212',)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:14:44.440231 ; args=(u'2011-12-11 03:14:44.440231',)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:14:44.440239 ; args=(u'2011-12-12 02:14:44.440239',)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.006) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_product"."active" = True  AND "product_product"."site_id" = 1  AND "product_product"."featured" = True ) ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC LIMIT 2; args=(True, 1, True)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.003) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 3  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(3,)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 3  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(3,)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(3, u'pl-pl')
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(3, u'pl')
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(3, u'pl%')
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.001) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 1  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 1  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 1  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(1, u'pl-pl')
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 1  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(1, u'pl')
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 1  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(1, u'pl%')
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:44.889742 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:44.889742')
Mon, 12 Dec 2011 03:14:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:45 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:45.356157 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:45.356157')
Mon, 12 Dec 2011 03:14:45 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:45 django.db.backends DEBUG    (0.016) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:45.389250 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:45.389250')
Mon, 12 Dec 2011 03:14:45 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:45 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:45.429556 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:45.429556')
Mon, 12 Dec 2011 03:14:45 django.db.backends DEBUG    (0.011) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:47.470714 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:47.470714')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."slug" = dj-rocks  AND "product_product"."site_id" = 1 ); args=(True, u'dj-rocks', 1)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.009) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2011-12-12  AND "product_discount"."endDate" > 2011-12-12  AND ("product_discount_valid_products"."product_id" IN (1) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2011-12-12', '2011-12-12', 1, True)
Mon, 12 Dec 2011 03:14:47 root         DEBUG    subtypes = ('ConfigurableProduct',)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.002) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" INNER JOIN "product_product" T4 ON ("configurable_productvariation"."product_id" = T4."id") WHERE ("configurable_productvariation"."parent_id" = 1  AND T4."active" = True ); args=(1, True)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.001) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.001) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") INNER JOIN "django_site" ON ("product_optiongroup"."site_id" = "django_site"."id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 2  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."sort_order" FROM "product_optiongroup" ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=()
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE ("product_option"."option_group_id" IN (1, 2) AND "product_option"."value" IN (B, BL, M, L, S, W)) ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1, 2, 'B', 'BL', 'M', 'L', 'S', 'W')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 2  AND "product_optiongrouptranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(2, u'pl-pl')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 2  AND "product_optiongrouptranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(2, u'pl')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 2  AND "product_optiongrouptranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(2, u'pl%')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 1  AND "product_optiongrouptranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(1, u'pl-pl')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 1  AND "product_optiongrouptranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(1, u'pl')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 1  AND "product_optiongrouptranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(1, u'pl%')
Mon, 12 Dec 2011 03:14:47 product.utils DEBUG    serialized: ({'id': 1, 'items': (<Option: Small>, <Option: Medium>, <Option: Large>), 'name': u'sizes', 'description': u''}, {'id': 2, 'items': (<Option: Black>, <Option: White>, <Option: Blue>), 'name': u'colors', 'description': u''})
Mon, 12 Dec 2011 03:14:47 product.utils DEBUG    Serialized Options dj-rocks: ({'id': 1, 'items': (<Option: Small>, <Option: Medium>, <Option: Large>), 'name': u'sizes', 'description': u''}, {'id': 2, 'items': (<Option: Black>, <Option: White>, <Option: Blue>), 'name': u'colors', 'description': u''})
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2011-12-12  AND "product_discount"."endDate" > 2011-12-12  AND ("product_discount_valid_products"."product_id" IN (1) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2011-12-12', '2011-12-12', 1, True)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productpricelookup" WHERE "product_productpricelookup"."parentid" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE "product_productpricelookup"."parentid" = 1  ORDER BY "product_productpricelookup"."price" DESC; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_l_bl ; args=(u'dj-rocks_l_bl',)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 13  ORDER BY "product_productimage"."sort" ASC; args=(13,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_m_bl ; args=(u'dj-rocks_m_bl',)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 10  ORDER BY "product_productimage"."sort" ASC; args=(10,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_s_bl ; args=(u'dj-rocks_s_bl',)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 7  ORDER BY "product_productimage"."sort" ASC; args=(7,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_l_b ; args=(u'dj-rocks_l_b',)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_l_w ; args=(u'dj-rocks_l_w',)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_m_b ; args=(u'dj-rocks_m_b',)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 8  ORDER BY "product_productimage"."sort" ASC; args=(8,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_m_w ; args=(u'dj-rocks_m_w',)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 9  ORDER BY "product_productimage"."sort" ASC; args=(9,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_s_b ; args=(u'dj-rocks_s_b',)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 5  ORDER BY "product_productimage"."sort" ASC; args=(5,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_s_w ; args=(u'dj-rocks_s_w',)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 6  ORDER BY "product_productimage"."sort" ASC; args=(6,)
Mon, 12 Dec 2011 03:14:47 product.views DEBUG    finding product template: ['product/detail_configurableproduct.html', 'product/product.html']
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.009) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks ; args=(u'dj-rocks',)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.008) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:14:47.692502 ; args=(u'2011-12-05 03:14:47.692502',)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:14:47.692517 ; args=(u'2011-12-11 03:14:47.692517',)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:14:47.692522 ; args=(u'2011-12-12 02:14:47.692522',)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 1  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 1  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."id" = 1 ); args=(True, 1)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 1  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(1, u'pl-pl')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 1  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(1, u'pl')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 1  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(1, u'pl%')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 1  ORDER BY "product_productimage"."sort" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productattribute" WHERE ("product_productattribute"."product_id" = 1  AND "product_productattribute"."languagecode" = pl-pl ); args=(1, 'pl-pl')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE ("product_productattribute"."product_id" = 1  AND ("product_productattribute"."languagecode" IS NULL OR "product_productattribute"."languagecode" =  )) ORDER BY "product_attributeoption"."sort_order" ASC; args=(1, '')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 1  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(1, u'pl-pl')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 1  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(1, u'pl')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 1  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(1, u'pl%')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 2  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(2, u'pl-pl')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 2  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(2, u'pl')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 2  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(2, u'pl%')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 3  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(3, u'pl-pl')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 3  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(3, u'pl')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 3  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(3, u'pl%')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 4  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(4, u'pl-pl')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 4  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(4, u'pl')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 4  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(4, u'pl%')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 5  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(5, u'pl-pl')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 5  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(5, u'pl')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 5  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(5, u'pl%')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 6  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(6, u'pl-pl')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 6  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(6, u'pl')
Mon, 12 Dec 2011 03:14:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 6  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(6, u'pl%')
Mon, 12 Dec 2011 03:14:48 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:48.221833 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:48.221833')
Mon, 12 Dec 2011 03:14:48 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:48 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:48.485415 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:48.485415')
Mon, 12 Dec 2011 03:14:48 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:51 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:51.834851 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:51.834851')
Mon, 12 Dec 2011 03:14:51 django.db.backends DEBUG    (0.002) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:51 shop.views.cart DEBUG    FORM: <QueryDict: {u'addcart': [u'Dodaj do koszyka'], u'productname': [u'dj-rocks_s_b'], u'1': [u'S'], u'2': [u'B'], u'csrfmiddlewaretoken': [u'0519ea972c538f23846b83b01ec90545'], u'quantity': [u'1']}>
Mon, 12 Dec 2011 03:14:51 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE ("product_product"."slug" = dj-rocks_s_b  AND "product_product"."site_id" = 1 ); args=(u'dj-rocks_s_b', 1)
Mon, 12 Dec 2011 03:14:51 shop.views.cart DEBUG    found product: Django Rocks shirt (Small/Black)
Mon, 12 Dec 2011 03:14:51 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:14:51 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:14:51 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:14:51 shop.views.cart DEBUG    product dj-rocks_s_b is active
Mon, 12 Dec 2011 03:14:51 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:51 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:51 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE ("shop_cartitem"."cart_id" = 1  AND "shop_cartitem"."product_id" = 5 ) ORDER BY "shop_cartitem"."id" ASC; args=(1, 5)
Mon, 12 Dec 2011 03:14:51 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:51 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "shop_cartitem" WHERE "shop_cartitem"."id" = 1  LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:14:51 django.db.backends DEBUG    (0.000) UPDATE "shop_cartitem" SET "cart_id" = 1, "product_id" = 5, "quantity" = 2.000000 WHERE "shop_cartitem"."id" = 1 ; args=(1, 5, u'2.000000', 1)
Mon, 12 Dec 2011 03:14:51 shop.listeners DEBUG    caught cart changed signal - remove_order_on_cart_update
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:52.138587 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:52.138587')
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.004) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2011-12-12  AND "product_discount"."endDate" > 2011-12-12  AND ("product_discount_valid_products"."product_id" IN (5) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2011-12-12', '2011-12-12', 5, True)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = cart ; args=(u'cart',)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:14:52.187587 ; args=(u'2011-12-05 03:14:52.187587',)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:14:52.187603 ; args=(u'2011-12-11 03:14:52.187603',)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:14:52.187609 ; args=(u'2011-12-12 02:14:52.187609',)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 5  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(5, u'pl-pl')
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 5  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(5, u'pl')
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 5  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(5, u'pl%')
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = SHOP  AND "livesettings_setting"."key" = CART_QTY ); args=(1, 1, 'SHOP', 'CART_QTY')
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = SHOP  AND "livesettings_longsetting"."key" = CART_QTY ); args=(1, 1, 'SHOP', 'CART_QTY')
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 5  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 2 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(5, '2011-12-12', Decimal('2'))
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 2 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('2'))
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 5  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 2 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(5, '2011-12-12', Decimal('2'))
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 2 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('2'))
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 shop.templatetags.satchmo_cart DEBUG    sub details
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.009) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 5  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 2 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(5, '2011-12-12', Decimal('2'))
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 2 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('2'))
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:52.472579 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:52.472579')
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:52.645185 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:52.645185')
Mon, 12 Dec 2011 03:14:52 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:57 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:57.817944 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:57.817944')
Mon, 12 Dec 2011 03:14:57 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:57 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:57 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:57 django.db.backends DEBUG    (0.001) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE ("shop_cartitem"."id" = 1  AND "shop_cartitem"."cart_id" = 1 ); args=(1, 1)
Mon, 12 Dec 2011 03:14:57 django.db.backends DEBUG    (0.001) SELECT "shop_cartitemdetails"."id", "shop_cartitemdetails"."cartitem_id", "shop_cartitemdetails"."value", "shop_cartitemdetails"."name", "shop_cartitemdetails"."price_change", "shop_cartitemdetails"."sort_order" FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" IN (1) ORDER BY "shop_cartitemdetails"."sort_order" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:57 django.db.backends DEBUG    (0.000) DELETE FROM "shop_cartitem" WHERE "id" IN (1); args=(1,)
Mon, 12 Dec 2011 03:14:57 shop.listeners DEBUG    caught cart changed signal - remove_order_on_cart_update
Mon, 12 Dec 2011 03:14:57 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:57.957780 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:57.957780')
Mon, 12 Dec 2011 03:14:57 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:57 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:57 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:57 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:57 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:57 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:57 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:14:57 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = cart ; args=(u'cart',)
Mon, 12 Dec 2011 03:14:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:14:57 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:14:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:14:57.995929 ; args=(u'2011-12-05 03:14:57.995929',)
Mon, 12 Dec 2011 03:14:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:14:57.995944 ; args=(u'2011-12-11 03:14:57.995944',)
Mon, 12 Dec 2011 03:14:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:14:57.995949 ; args=(u'2011-12-12 02:14:57.995949',)
Mon, 12 Dec 2011 03:14:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:14:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:14:58 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:58 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:58.219358 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:58.219358')
Mon, 12 Dec 2011 03:14:58 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:14:58 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:14:58.400021 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:14:58.400021')
Mon, 12 Dec 2011 03:14:58 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:00 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:15:00.910961 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:15:00.910961')
Mon, 12 Dec 2011 03:15:00 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."site_id" = 1  AND "product_product"."featured" = True ); args=(True, 1, True)
Mon, 12 Dec 2011 03:15:00 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:00 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:00 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:15:00 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" =  ; args=(u'',)
Mon, 12 Dec 2011 03:15:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:15:00 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:15:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:15:00.967421 ; args=(u'2011-12-05 03:15:00.967421',)
Mon, 12 Dec 2011 03:15:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:15:00.967436 ; args=(u'2011-12-11 03:15:00.967436',)
Mon, 12 Dec 2011 03:15:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:15:00.967442 ; args=(u'2011-12-12 02:15:00.967442',)
Mon, 12 Dec 2011 03:15:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:15:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_product"."active" = True  AND "product_product"."site_id" = 1  AND "product_product"."featured" = True ) ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC LIMIT 2; args=(True, 1, True)
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 3  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(3,)
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 3  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(3,)
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(3, u'pl-pl')
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(3, u'pl')
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(3, u'pl%')
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.001) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 1  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 1  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 1  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(1, u'pl-pl')
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 1  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(1, u'pl')
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 1  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(1, u'pl%')
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.008) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.005) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:15:01.296181 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:15:01.296181')
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:15:01.720394 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:15:01.720394')
Mon, 12 Dec 2011 03:15:01 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:15:16.175127 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:15:16.175127')
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.008) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 2  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.003) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 2  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.001) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:15:16 product.views.adminviews DEBUG    Saving form
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_optiongroup"."site_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:15:16 product.forms DEBUG    Got name=Django Rocks shirt (L/B), sku=, slug=dj-rocks_l_b
Mon, 12 Dec 2011 03:15:16 product.modules.configurable DEBUG    Create variation: [<Option: Large>, <Option: Black>]
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" INNER JOIN "configurable_productvariation_options" ON ("configurable_productvariation"."product_id" = "configurable_productvariation_options"."productvariation_id") INNER JOIN "configurable_productvariation_options" T5 ON ("configurable_productvariation"."product_id" = T5."productvariation_id") WHERE ("configurable_productvariation"."parent_id" = 1  AND "configurable_productvariation_options"."option_id" = 3  AND T5."option_id" = 4 ); args=(1, 3, 4)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = TAX  AND "livesettings_setting"."key" = PRODUCTS_TAXABLE_BY_DEFAULT ); args=(1, 1, 'TAX', 'PRODUCTS_TAXABLE_BY_DEFAULT')
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = TAX  AND "livesettings_longsetting"."key" = PRODUCTS_TAXABLE_BY_DEFAULT ); args=(1, 1, 'TAX', 'PRODUCTS_TAXABLE_BY_DEFAULT')
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_product" WHERE "product_product"."slug" = dj-rocks_l_b ; args=(u'dj-rocks_l_b',)
Mon, 12 Dec 2011 03:15:16 product.modules.configurable INFO     Creating variation for [dj-rocks] dj-rocks_l_b
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.001) INSERT INTO "product_product" ("site_id", "name", "slug", "sku", "short_description", "description", "items_in_stock", "meta", "date_added", "active", "featured", "ordering", "weight", "weight_units", "length", "length_units", "width", "width_units", "height", "height_units", "total_sold", "taxable", "taxClass_id", "shipclass") VALUES (1, Django Rocks shirt (L/B), dj-rocks_l_b, dj-rocks_l_b, , , 0.000000, None, 2011-12-12, True, False, 0, None, None, None, None, None, None, None, None, 0.000000, False, None, DEFAULT); args=(1, u'Django Rocks shirt (L/B)', u'dj-rocks_l_b', u'dj-rocks_l_b', u'', u'', u'0.000000', None, '2011-12-12', True, False, 0, None, None, None, None, None, None, None, None, u'0.000000', False, None, u'DEFAULT')
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 20 ; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 20 ; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 20 ; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_l_b  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_l_b', 1)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (70); args=(70,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.010) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 20  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(20, '2011-12-12')
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE ("configurable_productvariation"."parent_id" = 1  AND NOT ("configurable_productvariation"."product_id" = 20 )); args=(1, 20)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.008) SELECT (1) AS "a" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 20  LIMIT 1; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) INSERT INTO "configurable_productvariation" ("product_id", "parent_id") VALUES (20, 1); args=(20, 1)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_l_b  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_l_b', 1)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 20  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(20, '2011-12-12')
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation_options"."option_id" FROM "configurable_productvariation_options" WHERE ("configurable_productvariation_options"."productvariation_id" = 20  AND "configurable_productvariation_options"."option_id" IN (3)); args=(20, 3)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) INSERT INTO "configurable_productvariation_options" ("productvariation_id", "option_id") VALUES (20, 3); args=(20, 3)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation_options"."option_id" FROM "configurable_productvariation_options" WHERE ("configurable_productvariation_options"."productvariation_id" = 20  AND "configurable_productvariation_options"."option_id" IN (4)); args=(20, 4)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) INSERT INTO "configurable_productvariation_options" ("productvariation_id", "option_id") VALUES (20, 4); args=(20, 4)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_product" WHERE "product_product"."id" = 20  LIMIT 1; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) UPDATE "product_product" SET "site_id" = 1, "name" = Django Rocks shirt (L/B), "slug" = dj-rocks_l_b, "sku" = dj-rocks_l_b, "short_description" = , "description" = , "items_in_stock" = 0.000000, "meta" = NULL, "date_added" = 2011-12-12, "active" = True, "featured" = False, "ordering" = 0, "weight" = NULL, "weight_units" = NULL, "length" = NULL, "length_units" = NULL, "width" = NULL, "width_units" = NULL, "height" = NULL, "height_units" = NULL, "total_sold" = 0.000000, "taxable" = False, "taxClass_id" = NULL, "shipclass" = DEFAULT WHERE "product_product"."id" = 20 ; args=(1, u'Django Rocks shirt (L/B)', u'dj-rocks_l_b', u'dj-rocks_l_b', u'', u'', u'0.000000', '2011-12-12', True, False, 0, u'0.000000', False, u'DEFAULT', 20)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_l_b  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_l_b', 1)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 20  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(20, '2011-12-12')
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_product" WHERE "product_product"."id" = 20  LIMIT 1; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.005) UPDATE "product_product" SET "site_id" = 1, "name" = Django Rocks shirt (L/B), "slug" = dj-rocks_l_b, "sku" = dj-rocks_l_b, "short_description" = , "description" = , "items_in_stock" = 0.000000, "meta" = NULL, "date_added" = 2011-12-12, "active" = True, "featured" = False, "ordering" = 0, "weight" = NULL, "weight_units" = NULL, "length" = NULL, "length_units" = NULL, "width" = NULL, "width_units" = NULL, "height" = NULL, "height_units" = NULL, "total_sold" = 0.000000, "taxable" = False, "taxClass_id" = NULL, "shipclass" = DEFAULT WHERE "product_product"."id" = 20 ; args=(1, u'Django Rocks shirt (L/B)', u'dj-rocks_l_b', u'dj-rocks_l_b', u'', u'', u'0.000000', '2011-12-12', True, False, 0, u'0.000000', False, u'DEFAULT', 20)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_l_b  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_l_b', 1)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 20  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(20, '2011-12-12')
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE ("configurable_productvariation"."parent_id" = 1  AND NOT ("configurable_productvariation"."product_id" = 20 )); args=(1, 20)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 20  LIMIT 1; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) UPDATE "configurable_productvariation" SET "parent_id" = 1 WHERE "configurable_productvariation"."product_id" = 20 ; args=(1, 20)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_l_b  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_l_b', 1)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 20  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(20, '2011-12-12')
Mon, 12 Dec 2011 03:15:16 product.forms INFO     Updated variation Django Rocks shirt (L/B)
Mon, 12 Dec 2011 03:15:16 product.forms DEBUG    Got name=Django Rocks shirt (L/W), sku=, slug=dj-rocks_l_w
Mon, 12 Dec 2011 03:15:16 product.modules.configurable DEBUG    Create variation: [<Option: Large>, <Option: White>]
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" INNER JOIN "configurable_productvariation_options" ON ("configurable_productvariation"."product_id" = "configurable_productvariation_options"."productvariation_id") INNER JOIN "configurable_productvariation_options" T5 ON ("configurable_productvariation"."product_id" = T5."productvariation_id") WHERE ("configurable_productvariation"."parent_id" = 1  AND "configurable_productvariation_options"."option_id" = 3  AND T5."option_id" = 5 ); args=(1, 3, 5)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_product" WHERE "product_product"."slug" = dj-rocks_l_w ; args=(u'dj-rocks_l_w',)
Mon, 12 Dec 2011 03:15:16 product.modules.configurable INFO     Creating variation for [dj-rocks] dj-rocks_l_w
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) INSERT INTO "product_product" ("site_id", "name", "slug", "sku", "short_description", "description", "items_in_stock", "meta", "date_added", "active", "featured", "ordering", "weight", "weight_units", "length", "length_units", "width", "width_units", "height", "height_units", "total_sold", "taxable", "taxClass_id", "shipclass") VALUES (1, Django Rocks shirt (L/W), dj-rocks_l_w, dj-rocks_l_w, , , 0.000000, None, 2011-12-12, True, False, 0, None, None, None, None, None, None, None, None, 0.000000, False, None, DEFAULT); args=(1, u'Django Rocks shirt (L/W)', u'dj-rocks_l_w', u'dj-rocks_l_w', u'', u'', u'0.000000', None, '2011-12-12', True, False, 0, None, None, None, None, None, None, None, None, u'0.000000', False, None, u'DEFAULT')
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.004) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 21 ; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 21 ; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 21 ; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_l_w  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_l_w', 1)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (71); args=(71,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 21  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(21, '2011-12-12')
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE ("configurable_productvariation"."parent_id" = 1  AND NOT ("configurable_productvariation"."product_id" = 21 )); args=(1, 21)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 21  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 21  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 21  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 21  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 21  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 21  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 21  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 21  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 21  LIMIT 1; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) INSERT INTO "configurable_productvariation" ("product_id", "parent_id") VALUES (21, 1); args=(21, 1)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_l_w  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_l_w', 1)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 21  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(21, '2011-12-12')
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation_options"."option_id" FROM "configurable_productvariation_options" WHERE ("configurable_productvariation_options"."productvariation_id" = 21  AND "configurable_productvariation_options"."option_id" IN (3)); args=(21, 3)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) INSERT INTO "configurable_productvariation_options" ("productvariation_id", "option_id") VALUES (21, 3); args=(21, 3)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation_options"."option_id" FROM "configurable_productvariation_options" WHERE ("configurable_productvariation_options"."productvariation_id" = 21  AND "configurable_productvariation_options"."option_id" IN (5)); args=(21, 5)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) INSERT INTO "configurable_productvariation_options" ("productvariation_id", "option_id") VALUES (21, 5); args=(21, 5)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_product" WHERE "product_product"."id" = 21  LIMIT 1; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) UPDATE "product_product" SET "site_id" = 1, "name" = Django Rocks shirt (L/W), "slug" = dj-rocks_l_w, "sku" = dj-rocks_l_w, "short_description" = , "description" = , "items_in_stock" = 0.000000, "meta" = NULL, "date_added" = 2011-12-12, "active" = True, "featured" = False, "ordering" = 0, "weight" = NULL, "weight_units" = NULL, "length" = NULL, "length_units" = NULL, "width" = NULL, "width_units" = NULL, "height" = NULL, "height_units" = NULL, "total_sold" = 0.000000, "taxable" = False, "taxClass_id" = NULL, "shipclass" = DEFAULT WHERE "product_product"."id" = 21 ; args=(1, u'Django Rocks shirt (L/W)', u'dj-rocks_l_w', u'dj-rocks_l_w', u'', u'', u'0.000000', '2011-12-12', True, False, 0, u'0.000000', False, u'DEFAULT', 21)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.004) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_l_w  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_l_w', 1)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 21  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(21, '2011-12-12')
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_product" WHERE "product_product"."id" = 21  LIMIT 1; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) UPDATE "product_product" SET "site_id" = 1, "name" = Django Rocks shirt (L/W), "slug" = dj-rocks_l_w, "sku" = dj-rocks_l_w, "short_description" = , "description" = , "items_in_stock" = 0.000000, "meta" = NULL, "date_added" = 2011-12-12, "active" = True, "featured" = False, "ordering" = 0, "weight" = NULL, "weight_units" = NULL, "length" = NULL, "length_units" = NULL, "width" = NULL, "width_units" = NULL, "height" = NULL, "height_units" = NULL, "total_sold" = 0.000000, "taxable" = False, "taxClass_id" = NULL, "shipclass" = DEFAULT WHERE "product_product"."id" = 21 ; args=(1, u'Django Rocks shirt (L/W)', u'dj-rocks_l_w', u'dj-rocks_l_w', u'', u'', u'0.000000', '2011-12-12', True, False, 0, u'0.000000', False, u'DEFAULT', 21)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_l_w  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_l_w', 1)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 21  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(21, '2011-12-12')
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE ("configurable_productvariation"."parent_id" = 1  AND NOT ("configurable_productvariation"."product_id" = 21 )); args=(1, 21)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.008) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 21  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 21  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 21  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 21  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 21  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 21  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 21  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 21  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 21  LIMIT 1; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) UPDATE "configurable_productvariation" SET "parent_id" = 1 WHERE "configurable_productvariation"."product_id" = 21 ; args=(1, 21)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = dj-rocks_l_w  AND "product_productpricelookup"."siteid" = 1 ); args=(u'dj-rocks_l_w', 1)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 21  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(21, '2011-12-12')
Mon, 12 Dec 2011 03:15:16 product.forms INFO     Updated variation Django Rocks shirt (L/W)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 2  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.003) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.001) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 21  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 2  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.003) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 20 ; args=(20,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 21 ; args=(21,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = variations ; args=(u'variations',)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:15:16.794840 ; args=(u'2011-12-05 03:15:16.794840',)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:15:16.794856 ; args=(u'2011-12-11 03:15:16.794856',)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:15:16.794861 ; args=(u'2011-12-12 02:15:16.794861',)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:15:16 django.db.backends DEBUG    (0.001) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:21 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:15:21.207981 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:15:21.207981')
Mon, 12 Dec 2011 03:15:21 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:21 django.db.backends DEBUG    (0.001) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:21 django.db.backends DEBUG    (0.004) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:21 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:15:21 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = admin ; args=(u'admin',)
Mon, 12 Dec 2011 03:15:21 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:15:21 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:15:21 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:15:21.351890 ; args=(u'2011-12-05 03:15:21.351890',)
Mon, 12 Dec 2011 03:15:21 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:15:21.351909 ; args=(u'2011-12-11 03:15:21.351909',)
Mon, 12 Dec 2011 03:15:21 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:15:21.351917 ; args=(u'2011-12-12 02:15:21.351917',)
Mon, 12 Dec 2011 03:15:21 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:15:21 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:15:21 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:15:21 django.db.backends DEBUG    (0.007) SELECT "django_admin_log"."id", "django_admin_log"."action_time", "django_admin_log"."user_id", "django_admin_log"."content_type_id", "django_admin_log"."object_id", "django_admin_log"."object_repr", "django_admin_log"."action_flag", "django_admin_log"."change_message", "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined", "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_admin_log" INNER JOIN "auth_user" ON ("django_admin_log"."user_id" = "auth_user"."id") LEFT OUTER JOIN "django_content_type" ON ("django_admin_log"."content_type_id" = "django_content_type"."id") WHERE "django_admin_log"."user_id" = 1  ORDER BY "django_admin_log"."action_time" DESC LIMIT 10; args=(1,)
Mon, 12 Dec 2011 03:15:21 django.db.backends DEBUG    (0.000) SELECT "shop_order"."id", "shop_order"."site_id", "shop_order"."contact_id", "shop_order"."ship_addressee", "shop_order"."ship_street1", "shop_order"."ship_street2", "shop_order"."ship_city", "shop_order"."ship_state", "shop_order"."ship_postal_code", "shop_order"."ship_country", "shop_order"."bill_addressee", "shop_order"."bill_street1", "shop_order"."bill_street2", "shop_order"."bill_city", "shop_order"."bill_state", "shop_order"."bill_postal_code", "shop_order"."bill_country", "shop_order"."notes", "shop_order"."sub_total", "shop_order"."total", "shop_order"."discount_code", "shop_order"."discount", "shop_order"."method", "shop_order"."shipping_description", "shop_order"."shipping_method", "shop_order"."shipping_model", "shop_order"."shipping_cost", "shop_order"."shipping_discount", "shop_order"."tax", "shop_order"."time_stamp", "shop_order"."status" FROM "shop_order" WHERE "shop_order"."status" = New  ORDER BY "shop_order"."time_stamp" DESC; args=(u'New',)
Mon, 12 Dec 2011 03:15:21 django.db.backends DEBUG    (0.000) SELECT "shop_order"."id", "shop_order"."site_id", "shop_order"."contact_id", "shop_order"."ship_addressee", "shop_order"."ship_street1", "shop_order"."ship_street2", "shop_order"."ship_city", "shop_order"."ship_state", "shop_order"."ship_postal_code", "shop_order"."ship_country", "shop_order"."bill_addressee", "shop_order"."bill_street1", "shop_order"."bill_street2", "shop_order"."bill_city", "shop_order"."bill_state", "shop_order"."bill_postal_code", "shop_order"."bill_country", "shop_order"."notes", "shop_order"."sub_total", "shop_order"."total", "shop_order"."discount_code", "shop_order"."discount", "shop_order"."method", "shop_order"."shipping_description", "shop_order"."shipping_method", "shop_order"."shipping_model", "shop_order"."shipping_cost", "shop_order"."shipping_discount", "shop_order"."tax", "shop_order"."time_stamp", "shop_order"."status" FROM "shop_order" WHERE "shop_order"."status" = Blocked  ORDER BY "shop_order"."time_stamp" DESC; args=(u'Blocked',)
Mon, 12 Dec 2011 03:15:21 django.db.backends DEBUG    (0.023) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:15:21.799580 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:15:21.799580')
Mon, 12 Dec 2011 03:15:21 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.013) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:30:50.232071 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:30:50.232071')
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "configurable_configurableproduct"; args=()
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" INNER JOIN "product_product" ON ("configurable_configurableproduct"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" DESC, "product_product"."ordering" DESC, "product_product"."name" DESC; args=()
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "shop_config"."site_id", "shop_config"."store_name", "shop_config"."store_description", "shop_config"."store_email", "shop_config"."street1", "shop_config"."street2", "shop_config"."city", "shop_config"."state", "shop_config"."postal_code", "shop_config"."country_id", "shop_config"."phone", "shop_config"."in_country_only", "shop_config"."sales_country_id" FROM "shop_config" WHERE "shop_config"."site_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_discount" WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."site_id" = 1  AND "product_discount"."startDate" <= 2011-12-12  AND "product_discount"."endDate" > 2011-12-12 ); args=(True, True, 1, '2011-12-12', '2011-12-12')
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = configurableproduct ; args=(u'configurableproduct',)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:30:50.308489 ; args=(u'2011-12-05 03:30:50.308489',)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:30:50.308509 ; args=(u'2011-12-11 03:30:50.308509',)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:30:50.308517 ; args=(u'2011-12-12 02:30:50.308517',)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:30:50.529843 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:30:50.529843')
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "configurable_configurableproduct"; args=()
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" INNER JOIN "product_product" ON ("configurable_configurableproduct"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" DESC, "product_product"."ordering" DESC, "product_product"."name" DESC; args=()
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = configurableproduct ; args=(u'configurableproduct',)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:30:50.591336 ; args=(u'2011-12-05 03:30:50.591336',)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:30:50.591356 ; args=(u'2011-12-11 03:30:50.591356',)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:30:50.591363 ; args=(u'2011-12-12 02:30:50.591363',)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.013) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:30:50.838368 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:30:50.838368')
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "configurable_configurableproduct"; args=()
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" INNER JOIN "product_product" ON ("configurable_configurableproduct"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" DESC, "product_product"."ordering" DESC, "product_product"."name" DESC; args=()
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = configurableproduct ; args=(u'configurableproduct',)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:30:50.904172 ; args=(u'2011-12-05 03:30:50.904172',)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:30:50.904197 ; args=(u'2011-12-11 03:30:50.904197',)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:30:50.904211 ; args=(u'2011-12-12 02:30:50.904211',)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:30:50 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:51 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:30:51 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:51 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:30:51 django.db.backends DEBUG    (0.013) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:30:51.538257 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:30:51.538257')
Mon, 12 Dec 2011 03:30:51 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:30:55.415464 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:30:55.415464')
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.003) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = 1 ; args=(u'1',)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:30:55.455817 ; args=(u'2011-12-05 03:30:55.455817',)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:30:55.455832 ; args=(u'2011-12-11 03:30:55.455832',)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:30:55.455836 ; args=(u'2011-12-12 02:30:55.455836',)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=()
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 2  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.001) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.007) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.001) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.004) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 20 ; args=(20,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 21  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(21,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 21 ; args=(21,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.005) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:30:55 django.db.backends DEBUG    (0.012) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:30:56 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:30:56.019327 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:30:56.019327')
Mon, 12 Dec 2011 03:30:56 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:31:04.673764 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:31:04.673764')
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "configurable_productvariation"; args=()
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" INNER JOIN "product_product" ON ("configurable_productvariation"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" DESC, "product_product"."ordering" DESC, "product_product"."name" DESC; args=()
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.008) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = productvariation ; args=(u'productvariation',)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:31:04.710333 ; args=(u'2011-12-05 03:31:04.710333',)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:31:04.710359 ; args=(u'2011-12-11 03:31:04.710359',)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.007) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:31:04.710375 ; args=(u'2011-12-12 02:31:04.710375',)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 21 ; args=(21,)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 20 ; args=(20,)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 15 ; args=(15,)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 16 ; args=(16,)
Mon, 12 Dec 2011 03:31:04 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 14 ; args=(14,)
Mon, 12 Dec 2011 03:31:05 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:31:05.174843 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:31:05.174843')
Mon, 12 Dec 2011 03:31:05 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:39 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:31:39.444687 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:31:39.444687')
Mon, 12 Dec 2011 03:31:39 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "custom_customproduct"; args=()
Mon, 12 Dec 2011 03:31:39 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" INNER JOIN "product_product" ON ("custom_customproduct"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" DESC, "product_product"."ordering" DESC, "product_product"."name" DESC; args=()
Mon, 12 Dec 2011 03:31:39 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:39 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:39 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:31:39 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = customproduct ; args=(u'customproduct',)
Mon, 12 Dec 2011 03:31:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:31:39 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:31:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:31:39.484897 ; args=(u'2011-12-05 03:31:39.484897',)
Mon, 12 Dec 2011 03:31:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:31:39.484961 ; args=(u'2011-12-11 03:31:39.484961',)
Mon, 12 Dec 2011 03:31:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:31:39.484988 ; args=(u'2011-12-12 02:31:39.484988',)
Mon, 12 Dec 2011 03:31:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:31:39 django.db.backends DEBUG    (0.004) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:31:39 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:39 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:31:39.738315 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:31:39.738315')
Mon, 12 Dec 2011 03:31:39 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:48 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:31:48.944158 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:31:48.944158')
Mon, 12 Dec 2011 03:31:48 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:48 django.db.backends DEBUG    (0.008) SELECT COUNT(*) FROM "product_optiongroup"; args=()
Mon, 12 Dec 2011 03:31:48 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_optiongroup" INNER JOIN "django_site" ON ("product_optiongroup"."site_id" = "django_site"."id") ORDER BY "product_optiongroup"."sort_order" ASC; args=()
Mon, 12 Dec 2011 03:31:48 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:48 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:48 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:31:48 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = optiongroup ; args=(u'optiongroup',)
Mon, 12 Dec 2011 03:31:48 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:31:48 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:31:48 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:31:48.986824 ; args=(u'2011-12-05 03:31:48.986824',)
Mon, 12 Dec 2011 03:31:48 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:31:48.986840 ; args=(u'2011-12-11 03:31:48.986840',)
Mon, 12 Dec 2011 03:31:48 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:31:48.986845 ; args=(u'2011-12-12 02:31:48.986845',)
Mon, 12 Dec 2011 03:31:48 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:31:48 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:31:49 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:49 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:31:49.303739 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:31:49.303739')
Mon, 12 Dec 2011 03:31:49 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:31:52.534527 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:31:52.534527')
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = option  AND "django_content_type"."app_label" = product ); args=('option', 'product')
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = optiongroup  AND "django_content_type"."app_label" = product ); args=('optiongroup', 'product')
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = 1 ; args=(u'1',)
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:31:52.655746 ; args=(u'2011-12-05 03:31:52.655746',)
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.005) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:31:52.655762 ; args=(u'2011-12-11 03:31:52.655762',)
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:31:52.655767 ; args=(u'2011-12-12 02:31:52.655767',)
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" ORDER BY "django_site"."domain" ASC; args=()
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:31:52 satchmo_utils.widgets DEBUG    value: <class 'decimal.Decimal'>
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:31:52.975524 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:31:52.975524')
Mon, 12 Dec 2011 03:31:52 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:35:53 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:35:53.923130 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:35:53.923130')
Mon, 12 Dec 2011 03:35:53 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:35:53 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:35:53 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:35:53 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "django_site" WHERE "django_site"."id" = 1  LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" WHERE "product_option"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_option" WHERE ("product_option"."option_group_id" = 1  AND "product_option"."value" = S  AND NOT ("product_option"."id" = 1 )) LIMIT 1; args=(1, u'S', 1)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" WHERE "product_option"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_option" WHERE ("product_option"."option_group_id" = 1  AND "product_option"."value" = M  AND NOT ("product_option"."id" = 2 )) LIMIT 1; args=(1, u'M', 2)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" WHERE "product_option"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_option" WHERE ("product_option"."option_group_id" = 1  AND "product_option"."value" = L  AND NOT ("product_option"."id" = 3 )) LIMIT 1; args=(1, u'L', 3)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1  LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.004) UPDATE "product_optiongroup" SET "site_id" = 1, "name" = sizes, "description" = , "sort_order" = 1 WHERE "product_optiongroup"."id" = 1 ; args=(1, u'sizes', u'', 1, 1)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" WHERE "product_option"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.004) SELECT (1) AS "a" FROM "product_option" WHERE "product_option"."id" = 1  LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) UPDATE "product_option" SET "option_group_id" = 1, "name" = Mały, "value" = S, "price_change" = NULL, "sort_order" = 1 WHERE "product_option"."id" = 1 ; args=(1, u'Ma\u0142y', u'S', 1, 1)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" WHERE "product_option"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.005) SELECT (1) AS "a" FROM "product_option" WHERE "product_option"."id" = 2  LIMIT 1; args=(2,)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) UPDATE "product_option" SET "option_group_id" = 1, "name" = Średni, "value" = M, "price_change" = NULL, "sort_order" = 2 WHERE "product_option"."id" = 2 ; args=(1, u'\u015aredni', u'M', 2, 2)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" WHERE "product_option"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_option" WHERE "product_option"."id" = 3  LIMIT 1; args=(3,)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) UPDATE "product_option" SET "option_group_id" = 1, "name" = Duży, "value" = L, "price_change" = 1.000000, "sort_order" = 3 WHERE "product_option"."id" = 3 ; args=(1, u'Du\u017cy', u'L', u'1.000000', 3, 3)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) INSERT INTO "django_admin_log" ("action_time", "user_id", "content_type_id", "object_id", "object_repr", "action_flag", "change_message") VALUES (2011-12-12 03:35:54.112898, 1, 45, 1, sizes, 2, Zmieniono name w Opcja "sizes: Mały". Zmieniono name w Opcja "sizes: Średni". Zmieniono name i price_change w Opcja "sizes: Duży".); args=(u'2011-12-12 03:35:54.112898', 1, 45, u'1', u'sizes', 2, u'Zmieniono name w Opcja "sizes: Ma\u0142y". Zmieniono name w Opcja "sizes: \u015aredni". Zmieniono name i price_change w Opcja "sizes: Du\u017cy".')
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:35:54.155886 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:35:54.155886')
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongroup"; args=()
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_optiongroup" INNER JOIN "django_site" ON ("product_optiongroup"."site_id" = "django_site"."id") ORDER BY "product_optiongroup"."sort_order" ASC; args=()
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT "shop_config"."site_id", "shop_config"."store_name", "shop_config"."store_description", "shop_config"."store_email", "shop_config"."street1", "shop_config"."street2", "shop_config"."city", "shop_config"."state", "shop_config"."postal_code", "shop_config"."country_id", "shop_config"."phone", "shop_config"."in_country_only", "shop_config"."sales_country_id" FROM "shop_config" WHERE "shop_config"."site_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.001) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.007) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.012) SELECT COUNT(*) FROM "product_discount" WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."site_id" = 1  AND "product_discount"."startDate" <= 2011-12-12  AND "product_discount"."endDate" > 2011-12-12 ); args=(True, True, 1, '2011-12-12', '2011-12-12')
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = optiongroup ; args=(u'optiongroup',)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:35:54.247185 ; args=(u'2011-12-05 03:35:54.247185',)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:35:54.247214 ; args=(u'2011-12-11 03:35:54.247214',)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:35:54.247228 ; args=(u'2011-12-12 02:35:54.247228',)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:35:54.818267 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:35:54.818267')
Mon, 12 Dec 2011 03:35:54 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:35:59 django.db.backends DEBUG    (0.016) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:35:59.879170 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:35:59.879170')
Mon, 12 Dec 2011 03:35:59 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:35:59 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PRODUCT  AND "livesettings_setting"."key" = NUM_DISPLAY ); args=(1, 1, 'PRODUCT', 'NUM_DISPLAY')
Mon, 12 Dec 2011 03:35:59 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PRODUCT  AND "livesettings_longsetting"."key" = NUM_DISPLAY ); args=(1, 1, 'PRODUCT', 'NUM_DISPLAY')
Mon, 12 Dec 2011 03:35:59 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PRODUCT  AND "livesettings_setting"."key" = RANDOM_FEATURED ); args=(1, 1, 'PRODUCT', 'RANDOM_FEATURED')
Mon, 12 Dec 2011 03:35:59 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PRODUCT  AND "livesettings_longsetting"."key" = RANDOM_FEATURED ); args=(1, 1, 'PRODUCT', 'RANDOM_FEATURED')
Mon, 12 Dec 2011 03:35:59 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PRODUCT  AND "livesettings_setting"."key" = NUM_PAGINATED ); args=(1, 1, 'PRODUCT', 'NUM_PAGINATED')
Mon, 12 Dec 2011 03:35:59 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PRODUCT  AND "livesettings_longsetting"."key" = NUM_PAGINATED ); args=(1, 1, 'PRODUCT', 'NUM_PAGINATED')
Mon, 12 Dec 2011 03:35:59 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."site_id" = 1  AND "product_product"."featured" = True ); args=(True, 1, True)
Mon, 12 Dec 2011 03:35:59 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:35:59 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:35:59 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:35:59 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" =  ; args=(u'',)
Mon, 12 Dec 2011 03:35:59 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:35:59 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:35:59 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:35:59.970753 ; args=(u'2011-12-05 03:35:59.970753',)
Mon, 12 Dec 2011 03:35:59 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:35:59.970788 ; args=(u'2011-12-11 03:35:59.970788',)
Mon, 12 Dec 2011 03:35:59 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:35:59.970813 ; args=(u'2011-12-12 02:35:59.970813',)
Mon, 12 Dec 2011 03:35:59 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:35:59 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:35:59 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = page_head ; args=(u'page_head',)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "app_plugins_plugin"."id", "app_plugins_plugin"."point_id", "app_plugins_plugin"."label", "app_plugins_plugin"."index", "app_plugins_plugin"."registered", "app_plugins_plugin"."status", "app_plugins_plugin"."required", "app_plugins_plugin"."template", "app_plugins_plugin"."_order" FROM "app_plugins_plugin" WHERE "app_plugins_plugin"."label" = satchmo_toolbar.page_head ; args=(u'satchmo_toolbar.page_head',)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = page_top ; args=(u'page_top',)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.001) SELECT "app_plugins_plugin"."id", "app_plugins_plugin"."point_id", "app_plugins_plugin"."label", "app_plugins_plugin"."index", "app_plugins_plugin"."registered", "app_plugins_plugin"."status", "app_plugins_plugin"."required", "app_plugins_plugin"."template", "app_plugins_plugin"."_order" FROM "app_plugins_plugin" WHERE "app_plugins_plugin"."label" = satchmo_toolbar.page_top ; args=(u'satchmo_toolbar.page_top',)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = satchmo_toolbar ; args=(u'satchmo_toolbar',)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") WHERE ("product_category"."is_active" = True  AND "product_category"."site_id" = 1  AND T3."id" IS NULL) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(True, 1)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 3  AND "product_category"."is_active" = True ); args=(3, True)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 3  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(3, u'pl-pl')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 3  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(3, u'pl')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 3  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(3, u'pl%')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 3  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(3, True)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 4  AND "product_category"."is_active" = True ); args=(4, True)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 4  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(4, u'pl-pl')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 4  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(4, u'pl')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 4  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(4, u'pl%')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 4  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(4, True)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 5  AND "product_category"."is_active" = True ); args=(5, True)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.001) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 5  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(5, u'pl-pl')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 5  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(5, u'pl')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 5  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(5, u'pl%')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 6  AND "product_category"."is_active" = True ); args=(6, True)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.001) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 6  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(6, u'pl-pl')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 6  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(6, u'pl')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 6  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(6, u'pl%')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 1  AND "product_category"."is_active" = True ); args=(1, True)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 1  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(1, u'pl-pl')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 1  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(1, u'pl')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 1  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(1, u'pl%')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 1  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(1, True)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 2  AND "product_category"."is_active" = True ); args=(2, True)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 2  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(2, u'pl-pl')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 2  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(2, u'pl')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 2  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(2, u'pl%')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 7  AND "product_category"."is_active" = True ); args=(7, True)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 7  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(7, u'pl-pl')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 7  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(7, u'pl')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 7  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(7, u'pl%')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = sidebar_secondary_bottom ; args=(u'sidebar_secondary_bottom',)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_product"."active" = True  AND "product_product"."site_id" = 1  AND "product_product"."featured" = True ) ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC LIMIT 2; args=(True, 1, True)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 3  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(3,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.006) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 3  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(3,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(3, u'pl-pl')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(3, u'pl')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(3, u'pl%')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 1  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.005) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 1  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 1  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(1, u'pl-pl')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 1  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(1, u'pl')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 1  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(1, u'pl%')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = GOOGLE  AND "livesettings_setting"."key" = ANALYTICS ); args=(1, 1, 'GOOGLE', 'ANALYTICS')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = GOOGLE  AND "livesettings_longsetting"."key" = ANALYTICS ); args=(1, 1, 'GOOGLE', 'ANALYTICS')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:00.317924 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:00.317924')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:00.331117 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:00.331117')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.013) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:00.347826 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:00.347826')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:00.370173 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:00.370173')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:00.394090 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:00.394090')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:00.417915 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:00.417915')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:00.699934 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:00.699934')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:00.810412 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:00.810412')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:00.898133 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:00.898133')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:00.918581 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:00.918581')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:00.930389 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:00.930389')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:00.951480 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:00.951480')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.009) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:00.968017 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:00.968017')
Mon, 12 Dec 2011 03:36:00 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:01 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:00.997618 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:00.997618')
Mon, 12 Dec 2011 03:36:01 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:01 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:01.017841 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:01.017841')
Mon, 12 Dec 2011 03:36:01 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:01 django.db.backends DEBUG    (0.015) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:01.037223 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:01.037223')
Mon, 12 Dec 2011 03:36:01 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:01 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:01.062558 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:01.062558')
Mon, 12 Dec 2011 03:36:01 django.db.backends DEBUG    (0.003) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:01 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:01.083751 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:01.083751')
Mon, 12 Dec 2011 03:36:01 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:01 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:01.097442 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:01.097442')
Mon, 12 Dec 2011 03:36:01 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:01 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:01.114485 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:01.114485')
Mon, 12 Dec 2011 03:36:01 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:01 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:01.133289 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:01.133289')
Mon, 12 Dec 2011 03:36:01 django.db.backends DEBUG    (0.001) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:01 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:01.155053 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:01.155053')
Mon, 12 Dec 2011 03:36:01 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:01 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:01.167918 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:01.167918')
Mon, 12 Dec 2011 03:36:01 django.db.backends DEBUG    (0.002) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:02.015570 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:02.015570')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."slug" = dj-rocks  AND "product_product"."site_id" = 1 ); args=(True, u'dj-rocks', 1)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = TAX  AND "livesettings_setting"."key" = DEFAULT_VIEW_TAX ); args=(1, 1, 'TAX', 'DEFAULT_VIEW_TAX')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = TAX  AND "livesettings_longsetting"."key" = DEFAULT_VIEW_TAX ); args=(1, 1, 'TAX', 'DEFAULT_VIEW_TAX')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.004) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2011-12-12  AND "product_discount"."endDate" > 2011-12-12  AND ("product_discount_valid_products"."product_id" IN (1) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2011-12-12', '2011-12-12', 1, True)
Mon, 12 Dec 2011 03:36:02 root         DEBUG    subtypes = ('ConfigurableProduct',)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" INNER JOIN "product_product" T4 ON ("configurable_productvariation"."product_id" = T4."id") WHERE ("configurable_productvariation"."parent_id" = 1  AND T4."active" = True ); args=(1, True)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.004) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.002) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 21  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(21,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") INNER JOIN "django_site" ON ("product_optiongroup"."site_id" = "django_site"."id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 2  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."sort_order" FROM "product_optiongroup" ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=()
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE ("product_option"."option_group_id" IN (1, 2) AND "product_option"."value" IN (B, BL, M, L, S, W)) ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1, 2, 'B', 'BL', 'M', 'L', 'S', 'W')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 2  AND "product_optiongrouptranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(2, u'pl-pl')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 2  AND "product_optiongrouptranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(2, u'pl')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 2  AND "product_optiongrouptranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(2, u'pl%')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 1  AND "product_optiongrouptranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(1, u'pl-pl')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 1  AND "product_optiongrouptranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(1, u'pl')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongrouptranslation" WHERE ("product_optiongrouptranslation"."optiongroup_id" = 1  AND "product_optiongrouptranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(1, u'pl%')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PRODUCT  AND "livesettings_setting"."key" = NO_STOCK_CHECKOUT ); args=(1, 1, 'PRODUCT', 'NO_STOCK_CHECKOUT')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PRODUCT  AND "livesettings_longsetting"."key" = NO_STOCK_CHECKOUT ); args=(1, 1, 'PRODUCT', 'NO_STOCK_CHECKOUT')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2011-12-12  AND "product_discount"."endDate" > 2011-12-12  AND ("product_discount_valid_products"."product_id" IN (1) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2011-12-12', '2011-12-12', 1, True)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productpricelookup" WHERE "product_productpricelookup"."parentid" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE "product_productpricelookup"."parentid" = 1  ORDER BY "product_productpricelookup"."price" DESC; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_l_bl ; args=(u'dj-rocks_l_bl',)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 13  ORDER BY "product_productimage"."sort" ASC; args=(13,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_m_bl ; args=(u'dj-rocks_m_bl',)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 10  ORDER BY "product_productimage"."sort" ASC; args=(10,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_s_bl ; args=(u'dj-rocks_s_bl',)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 7  ORDER BY "product_productimage"."sort" ASC; args=(7,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_m_b ; args=(u'dj-rocks_m_b',)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.001) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 8  ORDER BY "product_productimage"."sort" ASC; args=(8,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_m_w ; args=(u'dj-rocks_m_w',)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 9  ORDER BY "product_productimage"."sort" ASC; args=(9,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_s_b ; args=(u'dj-rocks_s_b',)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 5  ORDER BY "product_productimage"."sort" ASC; args=(5,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks_s_w ; args=(u'dj-rocks_s_w',)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 6  ORDER BY "product_productimage"."sort" ASC; args=(6,)
Mon, 12 Dec 2011 03:36:02 product.views DEBUG    finding product template: ['product/detail_configurableproduct.html', 'product/product.html']
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = dj-rocks ; args=(u'dj-rocks',)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 20 ; args=(20,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 21 ; args=(21,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:36:02.234447 ; args=(u'2011-12-05 03:36:02.234447',)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:36:02.234472 ; args=(u'2011-12-11 03:36:02.234472',)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:36:02.234477 ; args=(u'2011-12-12 02:36:02.234477',)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 1  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 1  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."id" = 1 ); args=(True, 1)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 1  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(1, u'pl-pl')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 1  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(1, u'pl')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 1  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(1, u'pl%')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 1  ORDER BY "product_productimage"."sort" ASC; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productattribute" WHERE ("product_productattribute"."product_id" = 1  AND "product_productattribute"."languagecode" = pl-pl ); args=(1, 'pl-pl')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE ("product_productattribute"."product_id" = 1  AND ("product_productattribute"."languagecode" IS NULL OR "product_productattribute"."languagecode" =  )) ORDER BY "product_attributeoption"."sort_order" ASC; args=(1, '')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 1  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(1, u'pl-pl')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 1  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(1, u'pl')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 1  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(1, u'pl%')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 2  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(2, u'pl-pl')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 2  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(2, u'pl')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 2  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(2, u'pl%')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 3  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(3, u'pl-pl')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 3  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(3, u'pl')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 3  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(3, u'pl%')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 4  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(4, u'pl-pl')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 4  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(4, u'pl')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 4  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(4, u'pl%')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 5  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(5, u'pl-pl')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 5  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(5, u'pl')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 5  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(5, u'pl%')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 6  AND "product_optiontranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(6, u'pl-pl')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 6  AND "product_optiontranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(6, u'pl')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiontranslation" WHERE ("product_optiontranslation"."option_id" = 6  AND "product_optiontranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(6, u'pl%')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = product_add_buttons ; args=(u'product_add_buttons',)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = product_form ; args=(u'product_form',)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.001) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = product_footer ; args=(u'product_footer',)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:02.530625 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:02.530625')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:02.952438 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:02.952438')
Mon, 12 Dec 2011 03:36:02 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:15 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:15.731862 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:15.731862')
Mon, 12 Dec 2011 03:36:15 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:15 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:36:15 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 3  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(3,)
Mon, 12 Dec 2011 03:36:15 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:15 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:15 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:36:15 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = 3 ; args=(u'3',)
Mon, 12 Dec 2011 03:36:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:36:15 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:36:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:36:15.815661 ; args=(u'2011-12-05 03:36:15.815661',)
Mon, 12 Dec 2011 03:36:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:36:15.815678 ; args=(u'2011-12-11 03:36:15.815678',)
Mon, 12 Dec 2011 03:36:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:36:15.815683 ; args=(u'2011-12-12 02:36:15.815683',)
Mon, 12 Dec 2011 03:36:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:36:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:36:15 django.db.backends DEBUG    (0.002) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:15 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" ORDER BY "django_site"."domain" ASC; args=()
Mon, 12 Dec 2011 03:36:15 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:36:15 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:36:15 satchmo_utils.widgets DEBUG    value: <class 'decimal.Decimal'>
Mon, 12 Dec 2011 03:36:15 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:36:16 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:16.111253 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:16.111253')
Mon, 12 Dec 2011 03:36:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:19 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:36:19.686480 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:36:19.686480')
Mon, 12 Dec 2011 03:36:19 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongroup"; args=()
Mon, 12 Dec 2011 03:36:19 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_optiongroup" INNER JOIN "django_site" ON ("product_optiongroup"."site_id" = "django_site"."id") ORDER BY "product_optiongroup"."sort_order" ASC; args=()
Mon, 12 Dec 2011 03:36:19 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:19 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:36:19 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:36:19 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = optiongroup ; args=(u'optiongroup',)
Mon, 12 Dec 2011 03:36:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:36:19 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:36:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:36:19.736189 ; args=(u'2011-12-05 03:36:19.736189',)
Mon, 12 Dec 2011 03:36:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:36:19.736211 ; args=(u'2011-12-11 03:36:19.736211',)
Mon, 12 Dec 2011 03:36:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:36:19.736220 ; args=(u'2011-12-12 02:36:19.736220',)
Mon, 12 Dec 2011 03:36:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:36:19 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:36:19 django.db.backends DEBUG    (0.004) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.013) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:37:09.142973 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:37:09.142973')
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.005) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.003) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 1  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.002) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = 1 ; args=(u'1',)
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:37:09.263295 ; args=(u'2011-12-05 03:37:09.263295',)
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:37:09.263315 ; args=(u'2011-12-11 03:37:09.263315',)
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:37:09.263322 ; args=(u'2011-12-12 02:37:09.263322',)
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.001) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" ORDER BY "django_site"."domain" ASC; args=()
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" WHERE "product_optiongroup"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:37:09 satchmo_utils.widgets DEBUG    value: <class 'decimal.Decimal'>
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:37:09.731008 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:37:09.731008')
Mon, 12 Dec 2011 03:37:09 django.db.backends DEBUG    (0.009) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:37:40 django.db.backends DEBUG    (0.037) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:37:40.315466 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:37:40.315466')
Mon, 12 Dec 2011 03:37:40 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:37:40 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = None  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(None,)
Mon, 12 Dec 2011 03:37:40 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:37:40 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:37:40 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:37:40 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = add ; args=(u'add',)
Mon, 12 Dec 2011 03:37:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:37:40 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:37:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:37:40.488028 ; args=(u'2011-12-05 03:37:40.488028',)
Mon, 12 Dec 2011 03:37:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:37:40.488359 ; args=(u'2011-12-11 03:37:40.488359',)
Mon, 12 Dec 2011 03:37:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:37:40.488402 ; args=(u'2011-12-12 02:37:40.488402',)
Mon, 12 Dec 2011 03:37:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:37:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:37:40 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:37:40 django.db.backends DEBUG    (0.005) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" ORDER BY "django_site"."domain" ASC; args=()
Mon, 12 Dec 2011 03:37:40 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:37:40.973887 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:37:40.973887')
Mon, 12 Dec 2011 03:37:40 django.db.backends DEBUG    (0.010) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:40:52.616565 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:40:52.616565')
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "django_site" WHERE "django_site"."id" = 1  LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.008) INSERT INTO "product_optiongroup" ("site_id", "name", "description", "sort_order") VALUES (1, sizeOpener, Otwieracze, 0); args=(1, u'sizeOpener', u'Otwieracze', 0)
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = None  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(None,)
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) INSERT INTO "product_option" ("option_group_id", "name", "value", "price_change", "sort_order") VALUES (5, 56mm, S, None, 0); args=(5, u'56mm', u'S', None, 0)
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) INSERT INTO "product_option" ("option_group_id", "name", "value", "price_change", "sort_order") VALUES (5, 58mm, M, None, 1); args=(5, u'58mm', u'M', None, 1)
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) INSERT INTO "django_admin_log" ("action_time", "user_id", "content_type_id", "object_id", "object_repr", "action_flag", "change_message") VALUES (2011-12-12 03:40:52.727661, 1, 45, 5, sizeOpener - Otwieracze, 1, ); args=(u'2011-12-12 03:40:52.727661', 1, 45, u'5', u'sizeOpener - Otwieracze', 1, '')
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:40:52.825855 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:40:52.825855')
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.007) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_optiongroup"; args=()
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_optiongroup" INNER JOIN "django_site" ON ("product_optiongroup"."site_id" = "django_site"."id") ORDER BY "product_optiongroup"."sort_order" ASC; args=()
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = optiongroup ; args=(u'optiongroup',)
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:40:52.889341 ; args=(u'2011-12-05 03:40:52.889341',)
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:40:52.889366 ; args=(u'2011-12-11 03:40:52.889366',)
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:40:52.889380 ; args=(u'2011-12-12 02:40:52.889380',)
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:40:52 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:40:53 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:40:53.429431 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:40:53.429431')
Mon, 12 Dec 2011 03:40:53 django.db.backends DEBUG    (0.005) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:00 django.db.backends DEBUG    (0.017) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:41:00.465041 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:41:00.465041')
Mon, 12 Dec 2011 03:41:00 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:00 django.db.backends DEBUG    (0.000) SELECT "shop_config"."site_id", "shop_config"."store_name", "shop_config"."store_description", "shop_config"."store_email", "shop_config"."street1", "shop_config"."street2", "shop_config"."city", "shop_config"."state", "shop_config"."postal_code", "shop_config"."country_id", "shop_config"."phone", "shop_config"."in_country_only", "shop_config"."sales_country_id" FROM "shop_config" WHERE "shop_config"."site_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:00 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:00 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_discount" WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."site_id" = 1  AND "product_discount"."startDate" <= 2011-12-12  AND "product_discount"."endDate" > 2011-12-12 ); args=(True, True, 1, '2011-12-12', '2011-12-12')
Mon, 12 Dec 2011 03:41:00 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:41:00 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = product ; args=(u'product',)
Mon, 12 Dec 2011 03:41:00 django.db.backends DEBUG    (0.003) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:41:00 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:41:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:41:00.590920 ; args=(u'2011-12-05 03:41:00.590920',)
Mon, 12 Dec 2011 03:41:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:41:00.590954 ; args=(u'2011-12-11 03:41:00.590954',)
Mon, 12 Dec 2011 03:41:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:41:00.590976 ; args=(u'2011-12-12 02:41:00.590976',)
Mon, 12 Dec 2011 03:41:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:41:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:41:00 django.db.backends DEBUG    (0.001) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:00 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:41:00.862266 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:41:00.862266')
Mon, 12 Dec 2011 03:41:00 django.db.backends DEBUG    (0.005) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:41:07.183370 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:41:07.183370')
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_product"; args=()
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=()
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" ASC; args=()
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = product ; args=(u'product',)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:41:07.252746 ; args=(u'2011-12-05 03:41:07.252746',)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:41:07.252764 ; args=(u'2011-12-11 03:41:07.252764',)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:41:07.252770 ; args=(u'2011-12-12 02:41:07.252770',)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.003) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 2  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(2, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 5  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(5, '2011-12-12')
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.004) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 5  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(5, '2011-12-12')
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 5  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(5,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.004) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 6  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(6, '2011-12-12')
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.006) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 6  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(6, '2011-12-12')
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 6  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(6,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 7  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(7, '2011-12-12')
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.008) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 7  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(7, '2011-12-12')
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 7  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(7,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 8  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(8, '2011-12-12')
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 8  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(8, '2011-12-12')
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 8  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(8,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 9  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(9, '2011-12-12')
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.002) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 9  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(9, '2011-12-12')
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.008) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 9  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(9,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 10  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(10, '2011-12-12')
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 10  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(10, '2011-12-12')
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 10  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(10,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 13  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(13, '2011-12-12')
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.003) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.004) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 13  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(13, '2011-12-12')
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 13  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(13,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 14 ; args=(14,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 14 ; args=(14,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 14 ; args=(14,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 14 ; args=(14,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 14  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(14, '2011-12-12')
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.003) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 14  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(14,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 14  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(14, '2011-12-12')
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 14  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(14,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 15 ; args=(15,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 15 ; args=(15,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.004) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 15 ; args=(15,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 15 ; args=(15,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 15  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(15, '2011-12-12')
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.006) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 15  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(15,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 15  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(15, '2011-12-12')
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 15  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(15,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 16 ; args=(16,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 16 ; args=(16,)
Mon, 12 Dec 2011 03:41:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 16 ; args=(16,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 16 ; args=(16,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 16  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(16, '2011-12-12')
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 16  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(16,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 16  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(16, '2011-12-12')
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 16  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(16,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 17  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(17, '2011-12-12')
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.008) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(17,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 17  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(17, '2011-12-12')
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(17,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 18  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(18, '2011-12-12')
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(18,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 18  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(18, '2011-12-12')
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(18,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 19  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(19, '2011-12-12')
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 19  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(19,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 19  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(19, '2011-12-12')
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 19  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(19,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 20 ; args=(20,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 20 ; args=(20,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 20 ; args=(20,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 20 ; args=(20,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 20  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(20, '2011-12-12')
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 20  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(20, '2011-12-12')
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 20  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(20,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 21 ; args=(21,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 21 ; args=(21,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.005) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 21 ; args=(21,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 21 ; args=(21,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.004) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 21  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(21, '2011-12-12')
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 21  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(21,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 21  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL))); args=(21, '2011-12-12')
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 1  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2011-12-12  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(1, '2011-12-12', Decimal('1'))
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 21  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(21,)
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:41:08.548260 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:41:08.548260')
Mon, 12 Dec 2011 03:41:08 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:12 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:41:12.170327 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:41:12.170327')
Mon, 12 Dec 2011 03:41:12 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:12 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:12 django.db.backends DEBUG    (0.001) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:12 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:41:12 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = admin ; args=(u'admin',)
Mon, 12 Dec 2011 03:41:12 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:41:12 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:41:12 django.db.backends DEBUG    (0.006) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:41:12.315393 ; args=(u'2011-12-05 03:41:12.315393',)
Mon, 12 Dec 2011 03:41:12 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:41:12.315393 ; args=(u'2011-12-11 03:41:12.315393',)
Mon, 12 Dec 2011 03:41:12 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:41:12.315393 ; args=(u'2011-12-12 02:41:12.315393',)
Mon, 12 Dec 2011 03:41:12 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:41:12 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:41:12 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:41:12 django.db.backends DEBUG    (0.001) SELECT "django_admin_log"."id", "django_admin_log"."action_time", "django_admin_log"."user_id", "django_admin_log"."content_type_id", "django_admin_log"."object_id", "django_admin_log"."object_repr", "django_admin_log"."action_flag", "django_admin_log"."change_message", "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined", "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_admin_log" INNER JOIN "auth_user" ON ("django_admin_log"."user_id" = "auth_user"."id") LEFT OUTER JOIN "django_content_type" ON ("django_admin_log"."content_type_id" = "django_content_type"."id") WHERE "django_admin_log"."user_id" = 1  ORDER BY "django_admin_log"."action_time" DESC LIMIT 10; args=(1,)
Mon, 12 Dec 2011 03:41:12 django.db.backends DEBUG    (0.000) SELECT "shop_order"."id", "shop_order"."site_id", "shop_order"."contact_id", "shop_order"."ship_addressee", "shop_order"."ship_street1", "shop_order"."ship_street2", "shop_order"."ship_city", "shop_order"."ship_state", "shop_order"."ship_postal_code", "shop_order"."ship_country", "shop_order"."bill_addressee", "shop_order"."bill_street1", "shop_order"."bill_street2", "shop_order"."bill_city", "shop_order"."bill_state", "shop_order"."bill_postal_code", "shop_order"."bill_country", "shop_order"."notes", "shop_order"."sub_total", "shop_order"."total", "shop_order"."discount_code", "shop_order"."discount", "shop_order"."method", "shop_order"."shipping_description", "shop_order"."shipping_method", "shop_order"."shipping_model", "shop_order"."shipping_cost", "shop_order"."shipping_discount", "shop_order"."tax", "shop_order"."time_stamp", "shop_order"."status" FROM "shop_order" WHERE "shop_order"."status" = New  ORDER BY "shop_order"."time_stamp" DESC; args=(u'New',)
Mon, 12 Dec 2011 03:41:12 django.db.backends DEBUG    (0.000) SELECT "shop_order"."id", "shop_order"."site_id", "shop_order"."contact_id", "shop_order"."ship_addressee", "shop_order"."ship_street1", "shop_order"."ship_street2", "shop_order"."ship_city", "shop_order"."ship_state", "shop_order"."ship_postal_code", "shop_order"."ship_country", "shop_order"."bill_addressee", "shop_order"."bill_street1", "shop_order"."bill_street2", "shop_order"."bill_city", "shop_order"."bill_state", "shop_order"."bill_postal_code", "shop_order"."bill_country", "shop_order"."notes", "shop_order"."sub_total", "shop_order"."total", "shop_order"."discount_code", "shop_order"."discount", "shop_order"."method", "shop_order"."shipping_description", "shop_order"."shipping_method", "shop_order"."shipping_model", "shop_order"."shipping_cost", "shop_order"."shipping_discount", "shop_order"."tax", "shop_order"."time_stamp", "shop_order"."status" FROM "shop_order" WHERE "shop_order"."status" = Blocked  ORDER BY "shop_order"."time_stamp" DESC; args=(u'Blocked',)
Mon, 12 Dec 2011 03:41:12 django.db.backends DEBUG    (0.001) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = admin_tools ; args=(u'admin_tools',)
Mon, 12 Dec 2011 03:41:12 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:41:12.528624 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:41:12.528624')
Mon, 12 Dec 2011 03:41:12 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:43:44.215093 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:43:44.215093')
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "configurable_productvariation"; args=()
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" INNER JOIN "product_product" ON ("configurable_productvariation"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" DESC, "product_product"."ordering" DESC, "product_product"."name" DESC; args=()
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.002) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = productvariation ; args=(u'productvariation',)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.005) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:43:44.265826 ; args=(u'2011-12-05 03:43:44.265826',)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:43:44.265841 ; args=(u'2011-12-11 03:43:44.265841',)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:43:44.265866 ; args=(u'2011-12-12 02:43:44.265866',)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 6 ; args=(6,)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 7 ; args=(7,)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 5 ; args=(5,)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 9 ; args=(9,)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 10 ; args=(10,)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 8 ; args=(8,)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.011) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 13 ; args=(13,)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 21 ; args=(21,)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 20 ; args=(20,)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 15 ; args=(15,)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 16 ; args=(16,)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 14 ; args=(14,)
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:43:44.579819 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:43:44.579819')
Mon, 12 Dec 2011 03:43:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:43:50 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:43:50.765543 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:43:50.765543')
Mon, 12 Dec 2011 03:43:50 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:43:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "configurable_configurableproduct"; args=()
Mon, 12 Dec 2011 03:43:50 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" INNER JOIN "product_product" ON ("configurable_configurableproduct"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" DESC, "product_product"."ordering" DESC, "product_product"."name" DESC; args=()
Mon, 12 Dec 2011 03:43:50 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:43:50 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:43:50 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:43:50 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = configurableproduct ; args=(u'configurableproduct',)
Mon, 12 Dec 2011 03:43:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:43:50 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:43:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:43:50.804067 ; args=(u'2011-12-05 03:43:50.804067',)
Mon, 12 Dec 2011 03:43:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:43:50.804082 ; args=(u'2011-12-11 03:43:50.804082',)
Mon, 12 Dec 2011 03:43:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:43:50.804088 ; args=(u'2011-12-12 02:43:50.804088',)
Mon, 12 Dec 2011 03:43:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:43:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:43:50 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:43:50 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:43:50 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:43:50 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:43:51 django.db.backends DEBUG    (0.015) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:43:51.019722 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:43:51.019722')
Mon, 12 Dec 2011 03:43:51 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:43:54.684478 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:43:54.684478')
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 4  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(4,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.003) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = 4 ; args=(u'4',)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:43:54.733554 ; args=(u'2011-12-05 03:43:54.733554',)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:43:54.733569 ; args=(u'2011-12-11 03:43:54.733569',)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:43:54.733574 ; args=(u'2011-12-12 02:43:54.733574',)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=()
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "product_optiongroup"."id", "product_optiongroup"."site_id", "product_optiongroup"."name", "product_optiongroup"."description", "product_optiongroup"."sort_order" FROM "product_optiongroup" INNER JOIN "configurable_configurableproduct_option_group" ON ("product_optiongroup"."id" = "configurable_configurableproduct_option_group"."optiongroup_id") WHERE "configurable_configurableproduct_option_group"."configurableproduct_id" = 4  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(4,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "product_option"."option_group_id" = 3  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(3,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(17,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 17 ; args=(17,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(17,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(18,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 18 ; args=(18,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."parent_id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(17,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(18,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "product_option"."option_group_id", "product_option"."value" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 19  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC; args=(19,)
Mon, 12 Dec 2011 03:43:54 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 19 ; args=(19,)
Mon, 12 Dec 2011 03:43:55 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:43:55.053426 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:43:55.053426')
Mon, 12 Dec 2011 03:43:55 django.db.backends DEBUG    (0.011) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.013) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:44:29.527616 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:44:29.527616')
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category"; args=()
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.001) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" ASC; args=()
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = category ; args=(u'category',)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:44:29.613358 ; args=(u'2011-12-05 03:44:29.613358',)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:44:29.613378 ; args=(u'2011-12-11 03:44:29.613378',)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:44:29.613386 ; args=(u'2011-12-12 02:44:29.613386',)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.008) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.007) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:44:29.782781 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:44:29.782781')
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.003) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category"; args=()
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" ASC; args=()
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.013) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = category ; args=(u'category',)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:44:29.862674 ; args=(u'2011-12-05 03:44:29.862674',)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:44:29.862699 ; args=(u'2011-12-11 03:44:29.862699',)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:44:29.862713 ; args=(u'2011-12-12 02:44:29.862713',)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:44:29 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:44:30 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:44:30.242835 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:44:30.242835')
Mon, 12 Dec 2011 03:44:30 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:44:38 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:44:38.954517 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:44:38.954517')
Mon, 12 Dec 2011 03:44:38 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:44:38 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_category_related_categories" ON ("product_category"."id" = "product_category_related_categories"."to_category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_category_related_categories"."from_category_id" = 1  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "product_categoryattribute"."id", "product_categoryattribute"."category_id", "product_categoryattribute"."languagecode", "product_categoryattribute"."option_id", "product_categoryattribute"."value" FROM "product_categoryattribute" INNER JOIN "product_attributeoption" ON ("product_categoryattribute"."option_id" = "product_attributeoption"."id") WHERE "product_categoryattribute"."category_id" = 1  ORDER BY "product_attributeoption"."sort_order" ASC; args=(1,)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "product_categoryimage"."id", "product_categoryimage"."category_id", "product_categoryimage"."picture", "product_categoryimage"."caption", "product_categoryimage"."sort" FROM "product_categoryimage" WHERE "product_categoryimage"."category_id" = 1  ORDER BY "product_categoryimage"."sort" ASC; args=(1,)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = 1 ; args=(u'1',)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:44:39.092281 ; args=(u'2011-12-05 03:44:39.092281',)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:44:39.092300 ; args=(u'2011-12-11 03:44:39.092300',)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:44:39.092308 ; args=(u'2011-12-12 02:44:39.092308',)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" ORDER BY "django_site"."domain" ASC; args=()
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=()
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=()
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.003) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:44:39.797460 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:44:39.797460')
Mon, 12 Dec 2011 03:44:39 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:49:50 django.db.backends DEBUG    (0.014) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:49:50.739112 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:49:50.739112')
Mon, 12 Dec 2011 03:49:50 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:49:50 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:49:50 django.db.backends DEBUG    (0.007) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_category_related_categories" ON ("product_category"."id" = "product_category_related_categories"."to_category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_category_related_categories"."from_category_id" = 1  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(1,)
Mon, 12 Dec 2011 03:49:50 django.db.backends DEBUG    (0.006) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:49:50 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "django_site" WHERE "django_site"."id" = 1  LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:49:50 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_category" WHERE ("product_category"."site_id" = 1  AND "product_category"."slug" = openers  AND NOT ("product_category"."id" = 1 )) LIMIT 1; args=(1, u'openers', 1)
Mon, 12 Dec 2011 03:49:50 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_category" WHERE "product_category"."id" = 1  LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:49:50 django.db.backends DEBUG    (0.007) UPDATE "product_category" SET "site_id" = 1, "name" = Otwieracze, "slug" = openers, "parent_id" = NULL, "meta" = , "description" = Otwieracze, "ordering" = 0, "is_active" = True WHERE "product_category"."id" = 1 ; args=(1, u'Otwieracze', u'openers', u'', u'Otwieracze', 0, True, 1)
Mon, 12 Dec 2011 03:49:50 django.db.backends DEBUG    (0.000) SELECT "product_category_related_categories"."id", "product_category_related_categories"."from_category_id", "product_category_related_categories"."to_category_id" FROM "product_category_related_categories" WHERE "product_category_related_categories"."from_category_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:49:50 django.db.backends DEBUG    (0.000) SELECT "product_category_related_categories"."id", "product_category_related_categories"."from_category_id", "product_category_related_categories"."to_category_id" FROM "product_category_related_categories" WHERE "product_category_related_categories"."to_category_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:49:50 django.db.backends DEBUG    (0.000) SELECT "product_categoryattribute"."id", "product_categoryattribute"."category_id", "product_categoryattribute"."languagecode", "product_categoryattribute"."option_id", "product_categoryattribute"."value" FROM "product_categoryattribute" INNER JOIN "product_attributeoption" ON ("product_categoryattribute"."option_id" = "product_attributeoption"."id") WHERE "product_categoryattribute"."category_id" = 1  ORDER BY "product_attributeoption"."sort_order" ASC; args=(1,)
Mon, 12 Dec 2011 03:49:50 django.db.backends DEBUG    (0.000) SELECT "product_categoryimage"."id", "product_categoryimage"."category_id", "product_categoryimage"."picture", "product_categoryimage"."caption", "product_categoryimage"."sort" FROM "product_categoryimage" WHERE "product_categoryimage"."category_id" = 1  ORDER BY "product_categoryimage"."sort" ASC; args=(1,)
Mon, 12 Dec 2011 03:49:50 django.db.backends DEBUG    (0.000) INSERT INTO "django_admin_log" ("action_time", "user_id", "content_type_id", "object_id", "object_repr", "action_flag", "change_message") VALUES (2011-12-12 03:49:50.892160, 1, 40, 1, Otwieracze, 2, Zmieniono name, slug i description); args=(u'2011-12-12 03:49:50.892160', 1, 40, u'1', u'Otwieracze', 2, u'Zmieniono name, slug i description')
Mon, 12 Dec 2011 03:49:50 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:49:50 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:49:50 django.db.backends DEBUG    (0.019) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:49:50.945001 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:49:50.945001')
Mon, 12 Dec 2011 03:49:50 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:49:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category"; args=()
Mon, 12 Dec 2011 03:49:50 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" ASC; args=()
Mon, 12 Dec 2011 03:49:50 django.db.backends DEBUG    (0.000) SELECT "shop_config"."site_id", "shop_config"."store_name", "shop_config"."store_description", "shop_config"."store_email", "shop_config"."street1", "shop_config"."street2", "shop_config"."city", "shop_config"."state", "shop_config"."postal_code", "shop_config"."country_id", "shop_config"."phone", "shop_config"."in_country_only", "shop_config"."sales_country_id" FROM "shop_config" WHERE "shop_config"."site_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:49:51 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:49:51 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:49:51 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_discount" WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."site_id" = 1  AND "product_discount"."startDate" <= 2011-12-12  AND "product_discount"."endDate" > 2011-12-12 ); args=(True, True, 1, '2011-12-12', '2011-12-12')
Mon, 12 Dec 2011 03:49:51 django.db.backends DEBUG    (0.004) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:49:51 django.db.backends DEBUG    (0.006) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = category ; args=(u'category',)
Mon, 12 Dec 2011 03:49:51 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:49:51 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:49:51 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:49:51.038976 ; args=(u'2011-12-05 03:49:51.038976',)
Mon, 12 Dec 2011 03:49:51 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:49:51.039001 ; args=(u'2011-12-11 03:49:51.039001',)
Mon, 12 Dec 2011 03:49:51 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:49:51.039015 ; args=(u'2011-12-12 02:49:51.039015',)
Mon, 12 Dec 2011 03:49:51 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:49:51 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:49:51 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:49:51 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:49:51 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:49:51 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:49:51 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:49:51 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:49:51 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:49:51.594522 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:49:51.594522')
Mon, 12 Dec 2011 03:49:51 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.024) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:50:03.614321 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:50:03.614321')
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.003) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_category_related_categories" ON ("product_category"."id" = "product_category_related_categories"."to_category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_category_related_categories"."from_category_id" = 2  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "product_categoryattribute"."id", "product_categoryattribute"."category_id", "product_categoryattribute"."languagecode", "product_categoryattribute"."option_id", "product_categoryattribute"."value" FROM "product_categoryattribute" INNER JOIN "product_attributeoption" ON ("product_categoryattribute"."option_id" = "product_attributeoption"."id") WHERE "product_categoryattribute"."category_id" = 2  ORDER BY "product_attributeoption"."sort_order" ASC; args=(2,)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "product_categoryimage"."id", "product_categoryimage"."category_id", "product_categoryimage"."picture", "product_categoryimage"."caption", "product_categoryimage"."sort" FROM "product_categoryimage" WHERE "product_categoryimage"."category_id" = 2  ORDER BY "product_categoryimage"."sort" ASC; args=(2,)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.002) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.004) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = 2 ; args=(u'2',)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:50:03.753124 ; args=(u'2011-12-05 03:50:03.753124',)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:50:03.753143 ; args=(u'2011-12-11 03:50:03.753143',)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:50:03.753151 ; args=(u'2011-12-12 02:50:03.753151',)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" ORDER BY "django_site"."domain" ASC; args=()
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=()
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=()
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Mon, 12 Dec 2011 03:50:03 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Mon, 12 Dec 2011 03:50:04 django.db.backends DEBUG    (0.013) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:50:04.221875 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:50:04.221875')
Mon, 12 Dec 2011 03:50:04 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.016) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:53:41.678165 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:53:41.678165')
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_category_related_categories" ON ("product_category"."id" = "product_category_related_categories"."to_category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_category_related_categories"."from_category_id" = 2  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(2,)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "django_site" WHERE "django_site"."id" = 1  LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_category" WHERE "product_category"."id" = 1  LIMIT 1; args=(1,)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_category" WHERE ("product_category"."site_id" = 1  AND "product_category"."slug" = circle  AND NOT ("product_category"."id" = 2 )) LIMIT 1; args=(1, u'circle', 2)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_category" WHERE "product_category"."id" = 2  LIMIT 1; args=(2,)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) UPDATE "product_category" SET "site_id" = 1, "name" = Okrągłe, "slug" = circle, "parent_id" = 1, "meta" = , "description" = Otwieracze okrągłe, "ordering" = 0, "is_active" = True WHERE "product_category"."id" = 2 ; args=(1, u'Okr\u0105g\u0142e', u'circle', 1, u'', u'Otwieracze okr\u0105g\u0142e', 0, True, 2)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT "product_category_related_categories"."id", "product_category_related_categories"."from_category_id", "product_category_related_categories"."to_category_id" FROM "product_category_related_categories" WHERE "product_category_related_categories"."from_category_id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT "product_category_related_categories"."id", "product_category_related_categories"."from_category_id", "product_category_related_categories"."to_category_id" FROM "product_category_related_categories" WHERE "product_category_related_categories"."to_category_id" = 2 ; args=(2,)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT "product_categoryattribute"."id", "product_categoryattribute"."category_id", "product_categoryattribute"."languagecode", "product_categoryattribute"."option_id", "product_categoryattribute"."value" FROM "product_categoryattribute" INNER JOIN "product_attributeoption" ON ("product_categoryattribute"."option_id" = "product_attributeoption"."id") WHERE "product_categoryattribute"."category_id" = 2  ORDER BY "product_attributeoption"."sort_order" ASC; args=(2,)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT "product_categoryimage"."id", "product_categoryimage"."category_id", "product_categoryimage"."picture", "product_categoryimage"."caption", "product_categoryimage"."sort" FROM "product_categoryimage" WHERE "product_categoryimage"."category_id" = 2  ORDER BY "product_categoryimage"."sort" ASC; args=(2,)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) INSERT INTO "django_admin_log" ("action_time", "user_id", "content_type_id", "object_id", "object_repr", "action_flag", "change_message") VALUES (2011-12-12 03:53:41.775097, 1, 40, 2, Otwieracze :: Okrągłe, 2, Zmieniono name, slug i description); args=(u'2011-12-12 03:53:41.775097', 1, 40, u'2', u'Otwieracze :: Okr\u0105g\u0142e', 2, u'Zmieniono name, slug i description')
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:53:41.891938 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:53:41.891938')
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category"; args=()
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.004) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" ASC; args=()
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.011) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = category ; args=(u'category',)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:53:41.956042 ; args=(u'2011-12-05 03:53:41.956042',)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:53:41.956070 ; args=(u'2011-12-11 03:53:41.956070',)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:53:41.956081 ; args=(u'2011-12-12 02:53:41.956081',)
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:53:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:53:42 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:53:42 django.db.backends DEBUG    (0.003) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:53:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:53:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:53:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:53:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:53:42 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:53:42.230097 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:53:42.230097')
Mon, 12 Dec 2011 03:53:42 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:53:51 django.db.backends DEBUG    (0.014) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:53:51.979589 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:53:51.979589')
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_category_related_categories" ON ("product_category"."id" = "product_category_related_categories"."to_category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_category_related_categories"."from_category_id" = 3  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(3,)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.004) SELECT "product_categoryattribute"."id", "product_categoryattribute"."category_id", "product_categoryattribute"."languagecode", "product_categoryattribute"."option_id", "product_categoryattribute"."value" FROM "product_categoryattribute" INNER JOIN "product_attributeoption" ON ("product_categoryattribute"."option_id" = "product_attributeoption"."id") WHERE "product_categoryattribute"."category_id" = 3  ORDER BY "product_attributeoption"."sort_order" ASC; args=(3,)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "product_categoryimage"."id", "product_categoryimage"."category_id", "product_categoryimage"."picture", "product_categoryimage"."caption", "product_categoryimage"."sort" FROM "product_categoryimage" WHERE "product_categoryimage"."category_id" = 3  ORDER BY "product_categoryimage"."sort" ASC; args=(3,)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 1  ORDER BY "shop_cartitem"."id" ASC; args=(1,)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = 3 ; args=(u'3',)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-05 03:53:52.129234 ; args=(u'2011-12-05 03:53:52.129234',)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-11 03:53:52.129253 ; args=(u'2011-12-11 03:53:52.129253',)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2011-12-12 02:53:52.129261 ; args=(u'2011-12-12 02:53:52.129261',)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2011-12-05 ; args=('2011-12-05',)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" ORDER BY "django_site"."domain" ASC; args=()
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=()
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.004) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=()
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.016) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = 18a01e827c7f05c79b973de65f5455b0  AND "django_session"."expire_date" > 2011-12-12 03:53:52.782072 ); args=('18a01e827c7f05c79b973de65f5455b0', u'2011-12-12 03:53:52.782072')
Mon, 12 Dec 2011 03:53:52 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
