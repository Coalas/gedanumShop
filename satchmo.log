Tue, 10 Jan 2012 15:32:47 root         INFO     Satchmo Started
Tue, 10 Jan 2012 06:32:47 shop.listeners DEBUG    Added default shop listeners
Tue, 10 Jan 2012 06:32:48 satchmo_toolbar DEBUG    Satchmo toolbar ready
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.012) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."name" = Ślub ; args=(u'\u015alub',)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."name" = Chrzest ; args=(u'Chrzest',)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."name" = Imieniny ; args=(u'Imieniny',)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."name" = Urodziny ; args=(u'Urodziny',)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = TAX  AND "livesettings_setting"."key" = PRODUCTS_TAXABLE_BY_DEFAULT ); args=(1, 1, 'TAX', 'PRODUCTS_TAXABLE_BY_DEFAULT')
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.002) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.003) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product"."slug" = kartka-slubna  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=('kartka-slubna',)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product"."slug" = kartka-slubna-1  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=('kartka-slubna-1',)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.003) INSERT INTO "product_product" ("site_id", "name", "slug", "sku", "short_description", "description", "items_in_stock", "meta", "date_added", "active", "featured", "ordering", "weight", "weight_units", "length", "length_units", "width", "width_units", "height", "height_units", "total_sold", "taxable", "taxClass_id", "shipclass") VALUES (1, Kartka Ślubna, kartka-slubna-1, KDL-R-SL-03, Kartka Ślubna, Kartka Ślubna, 0.000000, None, 2012-01-10, True, False, 0, None, None, None, None, None, None, None, None, 0.000000, True, None, DEFAULT); args=(1, u'Kartka \u015alubna', 'kartka-slubna-1', u'KDL-R-SL-03', u'Kartka \u015alubna', u'Kartka \u015alubna', u'0.000000', None, '2012-01-10', True, False, 0, None, None, None, None, None, None, None, None, u'0.000000', True, None, u'DEFAULT')
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-slubna-1  AND "product_productpricelookup"."siteid" = 1 ); args=('kartka-slubna-1', 1)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 32  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(32, '2012-01-10')
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."name" = Ślub ; args=(u'\u015alub',)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_product_category"."category_id" FROM "product_product_category" WHERE ("product_product_category"."product_id" = 32  AND "product_product_category"."category_id" IN (11)); args=(32, 11)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) INSERT INTO "product_product_category" ("product_id", "category_id") VALUES (32, 11); args=(32, 11)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" = Default ; args=('Default',)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_product" WHERE "product_product"."id" = 32  LIMIT 1; args=(32,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) UPDATE "product_product" SET "site_id" = 1, "name" = Kartka Ślubna, "slug" = kartka-slubna-1, "sku" = KDL-R-SL-03, "short_description" = Kartka Ślubna, "description" = Kartka Ślubna, "items_in_stock" = 50.000000, "meta" = NULL, "date_added" = 2012-01-10, "active" = True, "featured" = False, "ordering" = 0, "weight" = NULL, "weight_units" = , "length" = NULL, "length_units" = , "width" = NULL, "width_units" = , "height" = NULL, "height_units" = , "total_sold" = 0.000000, "taxable" = True, "taxClass_id" = 1, "shipclass" = DEFAULT WHERE "product_product"."id" = 32 ; args=(1, u'Kartka \u015alubna', 'kartka-slubna-1', u'KDL-R-SL-03', u'Kartka \u015alubna', u'Kartka \u015alubna', u'50.000000', '2012-01-10', True, False, 0, '', '', '', '', u'0.000000', True, 1, u'DEFAULT', 32)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-slubna-1  AND "product_productpricelookup"."siteid" = 1 ); args=('kartka-slubna-1', 1)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 32  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(32, '2012-01-10')
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 32  AND "product_price"."quantity" = 1.0  AND "product_price"."expires" IS NULL); args=(32, Decimal('1.0'))
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) INSERT INTO "product_price" ("product_id", "price", "quantity", "expires") VALUES (32, 3.500000, 1.000000, None); args=(32, u'3.500000', u'1.000000', None)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.001) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-slubna-1  AND "product_productpricelookup"."siteid" = 1 ); args=('kartka-slubna-1', 1)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 32  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(32, '2012-01-10')
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, None, None, kartka-slubna-1, 3.500000, 1.000000, True, True, 50.000000); args=(1, None, None, 'kartka-slubna-1', u'3.500000', u'1.000000', True, True, u'50.000000')
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) INSERT INTO "product_productimage" ("product_id", "picture", "caption", "sort") VALUES (32, images/foto_315.jpg, None, 0); args=(32, u'images/foto_315.jpg', None, 0)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = THUMBNAIL  AND "livesettings_setting"."key" = RENAME_IMAGES ); args=(1, 1, 'THUMBNAIL', 'RENAME_IMAGES')
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = THUMBNAIL  AND "livesettings_longsetting"."key" = RENAME_IMAGES ); args=(1, 1, 'THUMBNAIL', 'RENAME_IMAGES')
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_productimage" WHERE "product_productimage"."id" = 24  LIMIT 1; args=(24,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) UPDATE "product_productimage" SET "product_id" = 32, "picture" = images/productimage-picture-kartka-slubna-1-24.jpg, "caption" = NULL, "sort" = 0 WHERE "product_productimage"."id" = 24 ; args=(32, u'images/productimage-picture-kartka-slubna-1-24.jpg', 0, 24)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product"."slug" = kartka-slubna  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=('kartka-slubna',)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product"."slug" = kartka-slubna-1  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=('kartka-slubna-1',)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product"."slug" = kartka-slubna-2  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=('kartka-slubna-2',)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) INSERT INTO "product_product" ("site_id", "name", "slug", "sku", "short_description", "description", "items_in_stock", "meta", "date_added", "active", "featured", "ordering", "weight", "weight_units", "length", "length_units", "width", "width_units", "height", "height_units", "total_sold", "taxable", "taxClass_id", "shipclass") VALUES (1, Kartka Ślubna, kartka-slubna-2, KDL-R-SL-04, Kartka Ślubna, Kartka Ślubna, 0.000000, None, 2012-01-10, True, False, 0, None, None, None, None, None, None, None, None, 0.000000, True, None, DEFAULT); args=(1, u'Kartka \u015alubna', 'kartka-slubna-2', u'KDL-R-SL-04', u'Kartka \u015alubna', u'Kartka \u015alubna', u'0.000000', None, '2012-01-10', True, False, 0, None, None, None, None, None, None, None, None, u'0.000000', True, None, u'DEFAULT')
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-slubna-2  AND "product_productpricelookup"."siteid" = 1 ); args=('kartka-slubna-2', 1)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 33  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(33, '2012-01-10')
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."name" = Ślub ; args=(u'\u015alub',)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_product_category"."category_id" FROM "product_product_category" WHERE ("product_product_category"."product_id" = 33  AND "product_product_category"."category_id" IN (11)); args=(33, 11)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) INSERT INTO "product_product_category" ("product_id", "category_id") VALUES (33, 11); args=(33, 11)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" = Default ; args=('Default',)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_product" WHERE "product_product"."id" = 33  LIMIT 1; args=(33,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) UPDATE "product_product" SET "site_id" = 1, "name" = Kartka Ślubna, "slug" = kartka-slubna-2, "sku" = KDL-R-SL-04, "short_description" = Kartka Ślubna, "description" = Kartka Ślubna, "items_in_stock" = 50.000000, "meta" = NULL, "date_added" = 2012-01-10, "active" = True, "featured" = False, "ordering" = 0, "weight" = NULL, "weight_units" = , "length" = NULL, "length_units" = , "width" = NULL, "width_units" = , "height" = NULL, "height_units" = , "total_sold" = 0.000000, "taxable" = True, "taxClass_id" = 1, "shipclass" = DEFAULT WHERE "product_product"."id" = 33 ; args=(1, u'Kartka \u015alubna', 'kartka-slubna-2', u'KDL-R-SL-04', u'Kartka \u015alubna', u'Kartka \u015alubna', u'50.000000', '2012-01-10', True, False, 0, '', '', '', '', u'0.000000', True, 1, u'DEFAULT', 33)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-slubna-2  AND "product_productpricelookup"."siteid" = 1 ); args=('kartka-slubna-2', 1)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 33  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(33, '2012-01-10')
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 33  AND "product_price"."quantity" = 1.0  AND "product_price"."expires" IS NULL); args=(33, Decimal('1.0'))
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) INSERT INTO "product_price" ("product_id", "price", "quantity", "expires") VALUES (33, 3.500000, 1.000000, None); args=(33, u'3.500000', u'1.000000', None)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-slubna-2  AND "product_productpricelookup"."siteid" = 1 ); args=('kartka-slubna-2', 1)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 33  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(33, '2012-01-10')
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, None, None, kartka-slubna-2, 3.500000, 1.000000, True, True, 50.000000); args=(1, None, None, 'kartka-slubna-2', u'3.500000', u'1.000000', True, True, u'50.000000')
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) INSERT INTO "product_productimage" ("product_id", "picture", "caption", "sort") VALUES (33, images/foto_316.jpg, None, 0); args=(33, u'images/foto_316.jpg', None, 0)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_productimage" WHERE "product_productimage"."id" = 25  LIMIT 1; args=(25,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) UPDATE "product_productimage" SET "product_id" = 33, "picture" = images/productimage-picture-kartka-slubna-2-25.jpg, "caption" = NULL, "sort" = 0 WHERE "product_productimage"."id" = 25 ; args=(33, u'images/productimage-picture-kartka-slubna-2-25.jpg', 0, 25)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product"."slug" = kartka-slubna  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=('kartka-slubna',)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product"."slug" = kartka-slubna-1  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=('kartka-slubna-1',)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product"."slug" = kartka-slubna-2  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=('kartka-slubna-2',)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product"."slug" = kartka-slubna-3  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=('kartka-slubna-3',)
Tue, 10 Jan 2012 06:32:48 django.db.backends DEBUG    (0.000) INSERT INTO "product_product" ("site_id", "name", "slug", "sku", "short_description", "description", "items_in_stock", "meta", "date_added", "active", "featured", "ordering", "weight", "weight_units", "length", "length_units", "width", "width_units", "height", "height_units", "total_sold", "taxable", "taxClass_id", "shipclass") VALUES (1, Kartka Ślubna, kartka-slubna-3, KDL-R-SL-05, Kartka Ślubna, Kartka Ślubna, 0.000000, None, 2012-01-10, True, False, 0, None, None, None, None, None, None, None, None, 0.000000, True, None, DEFAULT); args=(1, u'Kartka \u015alubna', 'kartka-slubna-3', u'KDL-R-SL-05', u'Kartka \u015alubna', u'Kartka \u015alubna', u'0.000000', None, '2012-01-10', True, False, 0, None, None, None, None, None, None, None, None, u'0.000000', True, None, u'DEFAULT')
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.004) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-slubna-3  AND "product_productpricelookup"."siteid" = 1 ); args=('kartka-slubna-3', 1)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 34  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(34, '2012-01-10')
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."name" = Ślub ; args=(u'\u015alub',)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_product_category"."category_id" FROM "product_product_category" WHERE ("product_product_category"."product_id" = 34  AND "product_product_category"."category_id" IN (11)); args=(34, 11)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) INSERT INTO "product_product_category" ("product_id", "category_id") VALUES (34, 11); args=(34, 11)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" = Default ; args=('Default',)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_product" WHERE "product_product"."id" = 34  LIMIT 1; args=(34,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) UPDATE "product_product" SET "site_id" = 1, "name" = Kartka Ślubna, "slug" = kartka-slubna-3, "sku" = KDL-R-SL-05, "short_description" = Kartka Ślubna, "description" = Kartka Ślubna, "items_in_stock" = 50.000000, "meta" = NULL, "date_added" = 2012-01-10, "active" = True, "featured" = False, "ordering" = 0, "weight" = NULL, "weight_units" = , "length" = NULL, "length_units" = , "width" = NULL, "width_units" = , "height" = NULL, "height_units" = , "total_sold" = 0.000000, "taxable" = True, "taxClass_id" = 1, "shipclass" = DEFAULT WHERE "product_product"."id" = 34 ; args=(1, u'Kartka \u015alubna', 'kartka-slubna-3', u'KDL-R-SL-05', u'Kartka \u015alubna', u'Kartka \u015alubna', u'50.000000', '2012-01-10', True, False, 0, '', '', '', '', u'0.000000', True, 1, u'DEFAULT', 34)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-slubna-3  AND "product_productpricelookup"."siteid" = 1 ); args=('kartka-slubna-3', 1)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 34  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(34, '2012-01-10')
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 34  AND "product_price"."quantity" = 1.0  AND "product_price"."expires" IS NULL); args=(34, Decimal('1.0'))
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) INSERT INTO "product_price" ("product_id", "price", "quantity", "expires") VALUES (34, 3.500000, 1.000000, None); args=(34, u'3.500000', u'1.000000', None)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-slubna-3  AND "product_productpricelookup"."siteid" = 1 ); args=('kartka-slubna-3', 1)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 34  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(34, '2012-01-10')
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, None, None, kartka-slubna-3, 3.500000, 1.000000, True, True, 50.000000); args=(1, None, None, 'kartka-slubna-3', u'3.500000', u'1.000000', True, True, u'50.000000')
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) INSERT INTO "product_productimage" ("product_id", "picture", "caption", "sort") VALUES (34, images/foto_317.jpg, None, 0); args=(34, u'images/foto_317.jpg', None, 0)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_productimage" WHERE "product_productimage"."id" = 26  LIMIT 1; args=(26,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) UPDATE "product_productimage" SET "product_id" = 34, "picture" = images/productimage-picture-kartka-slubna-3-26.jpg, "caption" = NULL, "sort" = 0 WHERE "product_productimage"."id" = 26 ; args=(34, u'images/productimage-picture-kartka-slubna-3-26.jpg', 0, 26)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product"."slug" = kartka-slubna  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=('kartka-slubna',)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product"."slug" = kartka-slubna-1  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=('kartka-slubna-1',)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product"."slug" = kartka-slubna-2  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=('kartka-slubna-2',)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product"."slug" = kartka-slubna-3  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=('kartka-slubna-3',)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product"."slug" = kartka-slubna-4  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=('kartka-slubna-4',)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.006) INSERT INTO "product_product" ("site_id", "name", "slug", "sku", "short_description", "description", "items_in_stock", "meta", "date_added", "active", "featured", "ordering", "weight", "weight_units", "length", "length_units", "width", "width_units", "height", "height_units", "total_sold", "taxable", "taxClass_id", "shipclass") VALUES (1, Kartka Ślubna, kartka-slubna-4, KDL-R-SL-06, Kartka Ślubna, Kartka Ślubna, 0.000000, None, 2012-01-10, True, False, 0, None, None, None, None, None, None, None, None, 0.000000, True, None, DEFAULT); args=(1, u'Kartka \u015alubna', 'kartka-slubna-4', u'KDL-R-SL-06', u'Kartka \u015alubna', u'Kartka \u015alubna', u'0.000000', None, '2012-01-10', True, False, 0, None, None, None, None, None, None, None, None, u'0.000000', True, None, u'DEFAULT')
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-slubna-4  AND "product_productpricelookup"."siteid" = 1 ); args=('kartka-slubna-4', 1)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 35  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(35, '2012-01-10')
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."name" = Ślub ; args=(u'\u015alub',)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_product_category"."category_id" FROM "product_product_category" WHERE ("product_product_category"."product_id" = 35  AND "product_product_category"."category_id" IN (11)); args=(35, 11)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) INSERT INTO "product_product_category" ("product_id", "category_id") VALUES (35, 11); args=(35, 11)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" = Default ; args=('Default',)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_product" WHERE "product_product"."id" = 35  LIMIT 1; args=(35,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) UPDATE "product_product" SET "site_id" = 1, "name" = Kartka Ślubna, "slug" = kartka-slubna-4, "sku" = KDL-R-SL-06, "short_description" = Kartka Ślubna, "description" = Kartka Ślubna, "items_in_stock" = 50.000000, "meta" = NULL, "date_added" = 2012-01-10, "active" = True, "featured" = False, "ordering" = 0, "weight" = NULL, "weight_units" = , "length" = NULL, "length_units" = , "width" = NULL, "width_units" = , "height" = NULL, "height_units" = , "total_sold" = 0.000000, "taxable" = True, "taxClass_id" = 1, "shipclass" = DEFAULT WHERE "product_product"."id" = 35 ; args=(1, u'Kartka \u015alubna', 'kartka-slubna-4', u'KDL-R-SL-06', u'Kartka \u015alubna', u'Kartka \u015alubna', u'50.000000', '2012-01-10', True, False, 0, '', '', '', '', u'0.000000', True, 1, u'DEFAULT', 35)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-slubna-4  AND "product_productpricelookup"."siteid" = 1 ); args=('kartka-slubna-4', 1)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 35  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(35, '2012-01-10')
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 35  AND "product_price"."quantity" = 1.0  AND "product_price"."expires" IS NULL); args=(35, Decimal('1.0'))
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) INSERT INTO "product_price" ("product_id", "price", "quantity", "expires") VALUES (35, 3.500000, 1.000000, None); args=(35, u'3.500000', u'1.000000', None)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-slubna-4  AND "product_productpricelookup"."siteid" = 1 ); args=('kartka-slubna-4', 1)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 35  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(35, '2012-01-10')
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.001) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, None, None, kartka-slubna-4, 3.500000, 1.000000, True, True, 50.000000); args=(1, None, None, 'kartka-slubna-4', u'3.500000', u'1.000000', True, True, u'50.000000')
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) INSERT INTO "product_productimage" ("product_id", "picture", "caption", "sort") VALUES (35, images/foto_318.jpg, None, 0); args=(35, u'images/foto_318.jpg', None, 0)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_productimage" WHERE "product_productimage"."id" = 27  LIMIT 1; args=(27,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) UPDATE "product_productimage" SET "product_id" = 35, "picture" = images/productimage-picture-kartka-slubna-4-27.jpg, "caption" = NULL, "sort" = 0 WHERE "product_productimage"."id" = 27 ; args=(35, u'images/productimage-picture-kartka-slubna-4-27.jpg', 0, 27)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product"."slug" = kartka-pamiatka-chrztu-sw  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=('kartka-pamiatka-chrztu-sw',)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) INSERT INTO "product_product" ("site_id", "name", "slug", "sku", "short_description", "description", "items_in_stock", "meta", "date_added", "active", "featured", "ordering", "weight", "weight_units", "length", "length_units", "width", "width_units", "height", "height_units", "total_sold", "taxable", "taxClass_id", "shipclass") VALUES (1, Kartka Pamiątka Chrztu Św., kartka-pamiatka-chrztu-sw, KDL-R-CH-01, Kartka z Okazji Chrztu Św., Kartka z Okazji Chrztu Św., 0.000000, None, 2012-01-10, True, False, 0, None, None, None, None, None, None, None, None, 0.000000, True, None, DEFAULT); args=(1, u'Kartka Pami\u0105tka Chrztu \u015aw.', 'kartka-pamiatka-chrztu-sw', u'KDL-R-CH-01', u'Kartka z Okazji Chrztu \u015aw.', u'Kartka z Okazji Chrztu \u015aw.', u'0.000000', None, '2012-01-10', True, False, 0, None, None, None, None, None, None, None, None, u'0.000000', True, None, u'DEFAULT')
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 36 ; args=(36,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 36 ; args=(36,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 36 ; args=(36,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-pamiatka-chrztu-sw  AND "product_productpricelookup"."siteid" = 1 ); args=('kartka-pamiatka-chrztu-sw', 1)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 36  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(36, '2012-01-10')
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."name" = Chrzest ; args=(u'Chrzest',)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_product_category"."category_id" FROM "product_product_category" WHERE ("product_product_category"."product_id" = 36  AND "product_product_category"."category_id" IN (10)); args=(36, 10)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) INSERT INTO "product_product_category" ("product_id", "category_id") VALUES (36, 10); args=(36, 10)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" = Default ; args=('Default',)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_product" WHERE "product_product"."id" = 36  LIMIT 1; args=(36,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) UPDATE "product_product" SET "site_id" = 1, "name" = Kartka Pamiątka Chrztu Św., "slug" = kartka-pamiatka-chrztu-sw, "sku" = KDL-R-CH-01, "short_description" = Kartka z Okazji Chrztu Św., "description" = Kartka z Okazji Chrztu Św., "items_in_stock" = 50.000000, "meta" = NULL, "date_added" = 2012-01-10, "active" = True, "featured" = False, "ordering" = 0, "weight" = NULL, "weight_units" = , "length" = NULL, "length_units" = , "width" = NULL, "width_units" = , "height" = NULL, "height_units" = , "total_sold" = 0.000000, "taxable" = True, "taxClass_id" = 1, "shipclass" = DEFAULT WHERE "product_product"."id" = 36 ; args=(1, u'Kartka Pami\u0105tka Chrztu \u015aw.', 'kartka-pamiatka-chrztu-sw', u'KDL-R-CH-01', u'Kartka z Okazji Chrztu \u015aw.', u'Kartka z Okazji Chrztu \u015aw.', u'50.000000', '2012-01-10', True, False, 0, '', '', '', '', u'0.000000', True, 1, u'DEFAULT', 36)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-pamiatka-chrztu-sw  AND "product_productpricelookup"."siteid" = 1 ); args=('kartka-pamiatka-chrztu-sw', 1)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 36  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(36, '2012-01-10')
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 36  AND "product_price"."quantity" = 1.0  AND "product_price"."expires" IS NULL); args=(36, Decimal('1.0'))
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) INSERT INTO "product_price" ("product_id", "price", "quantity", "expires") VALUES (36, 3.500000, 1.000000, None); args=(36, u'3.500000', u'1.000000', None)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-pamiatka-chrztu-sw  AND "product_productpricelookup"."siteid" = 1 ); args=('kartka-pamiatka-chrztu-sw', 1)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 36  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(36, '2012-01-10')
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 36 ; args=(36,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 36 ; args=(36,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 36 ; args=(36,)
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, None, None, kartka-pamiatka-chrztu-sw, 3.500000, 1.000000, True, True, 50.000000); args=(1, None, None, 'kartka-pamiatka-chrztu-sw', u'3.500000', u'1.000000', True, True, u'50.000000')
Tue, 10 Jan 2012 06:32:49 django.db.backends DEBUG    (0.000) INSERT INTO "product_productimage" ("product_id", "picture", "caption", "sort") VALUES (36, images/foto_309.jpg, None, 0); args=(36, u'images/foto_309.jpg', None, 0)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_productimage" WHERE "product_productimage"."id" = 28  LIMIT 1; args=(28,)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) UPDATE "product_productimage" SET "product_id" = 36, "picture" = images/productimage-picture-kartka-pamiatka-chrztu-sw-28.jpg, "caption" = NULL, "sort" = 0 WHERE "product_productimage"."id" = 28 ; args=(36, u'images/productimage-picture-kartka-pamiatka-chrztu-sw-28.jpg', 0, 28)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product"."slug" = kartka-pamiatka-chrztu-sw  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=('kartka-pamiatka-chrztu-sw',)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product"."slug" = kartka-pamiatka-chrztu-sw-1  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=('kartka-pamiatka-chrztu-sw-1',)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) INSERT INTO "product_product" ("site_id", "name", "slug", "sku", "short_description", "description", "items_in_stock", "meta", "date_added", "active", "featured", "ordering", "weight", "weight_units", "length", "length_units", "width", "width_units", "height", "height_units", "total_sold", "taxable", "taxClass_id", "shipclass") VALUES (1, Kartka Pamiątka Chrztu Św., kartka-pamiatka-chrztu-sw-1, KDL-R-CH-02, Kartka z Okazji Chrztu Św., Kartka z Okazji Chrztu Św., 0.000000, None, 2012-01-10, True, False, 0, None, None, None, None, None, None, None, None, 0.000000, True, None, DEFAULT); args=(1, u'Kartka Pami\u0105tka Chrztu \u015aw.', 'kartka-pamiatka-chrztu-sw-1', u'KDL-R-CH-02', u'Kartka z Okazji Chrztu \u015aw.', u'Kartka z Okazji Chrztu \u015aw.', u'0.000000', None, '2012-01-10', True, False, 0, None, None, None, None, None, None, None, None, u'0.000000', True, None, u'DEFAULT')
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 37 ; args=(37,)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 37 ; args=(37,)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 37 ; args=(37,)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-pamiatka-chrztu-sw-1  AND "product_productpricelookup"."siteid" = 1 ); args=('kartka-pamiatka-chrztu-sw-1', 1)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 37  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(37, '2012-01-10')
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.001) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."name" = Chrzest ; args=(u'Chrzest',)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "product_product_category"."category_id" FROM "product_product_category" WHERE ("product_product_category"."product_id" = 37  AND "product_product_category"."category_id" IN (10)); args=(37, 10)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) INSERT INTO "product_product_category" ("product_id", "category_id") VALUES (37, 10); args=(37, 10)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" = Default ; args=('Default',)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_product" WHERE "product_product"."id" = 37  LIMIT 1; args=(37,)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) UPDATE "product_product" SET "site_id" = 1, "name" = Kartka Pamiątka Chrztu Św., "slug" = kartka-pamiatka-chrztu-sw-1, "sku" = KDL-R-CH-02, "short_description" = Kartka z Okazji Chrztu Św., "description" = Kartka z Okazji Chrztu Św., "items_in_stock" = 50.000000, "meta" = NULL, "date_added" = 2012-01-10, "active" = True, "featured" = False, "ordering" = 0, "weight" = NULL, "weight_units" = , "length" = NULL, "length_units" = , "width" = NULL, "width_units" = , "height" = NULL, "height_units" = , "total_sold" = 0.000000, "taxable" = True, "taxClass_id" = 1, "shipclass" = DEFAULT WHERE "product_product"."id" = 37 ; args=(1, u'Kartka Pami\u0105tka Chrztu \u015aw.', 'kartka-pamiatka-chrztu-sw-1', u'KDL-R-CH-02', u'Kartka z Okazji Chrztu \u015aw.', u'Kartka z Okazji Chrztu \u015aw.', u'50.000000', '2012-01-10', True, False, 0, '', '', '', '', u'0.000000', True, 1, u'DEFAULT', 37)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.001) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-pamiatka-chrztu-sw-1  AND "product_productpricelookup"."siteid" = 1 ); args=('kartka-pamiatka-chrztu-sw-1', 1)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 37  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(37, '2012-01-10')
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 37  AND "product_price"."quantity" = 1.0  AND "product_price"."expires" IS NULL); args=(37, Decimal('1.0'))
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) INSERT INTO "product_price" ("product_id", "price", "quantity", "expires") VALUES (37, 3.500000, 1.000000, None); args=(37, u'3.500000', u'1.000000', None)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-pamiatka-chrztu-sw-1  AND "product_productpricelookup"."siteid" = 1 ); args=('kartka-pamiatka-chrztu-sw-1', 1)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 37  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(37, '2012-01-10')
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 37 ; args=(37,)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 37 ; args=(37,)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 37 ; args=(37,)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, None, None, kartka-pamiatka-chrztu-sw-1, 3.500000, 1.000000, True, True, 50.000000); args=(1, None, None, 'kartka-pamiatka-chrztu-sw-1', u'3.500000', u'1.000000', True, True, u'50.000000')
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) INSERT INTO "product_productimage" ("product_id", "picture", "caption", "sort") VALUES (37, images/foto_311.jpg, None, 0); args=(37, u'images/foto_311.jpg', None, 0)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_productimage" WHERE "product_productimage"."id" = 29  LIMIT 1; args=(29,)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) UPDATE "product_productimage" SET "product_id" = 37, "picture" = images/productimage-picture-kartka-pamiatka-chrztu-sw-1-29.jpg, "caption" = NULL, "sort" = 0 WHERE "product_productimage"."id" = 29 ; args=(37, u'images/productimage-picture-kartka-pamiatka-chrztu-sw-1-29.jpg', 0, 29)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product"."slug" = kartka-pamiatka-chrztu-sw  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=('kartka-pamiatka-chrztu-sw',)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.007) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product"."slug" = kartka-pamiatka-chrztu-sw-1  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=('kartka-pamiatka-chrztu-sw-1',)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product"."slug" = kartka-pamiatka-chrztu-sw-2  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=('kartka-pamiatka-chrztu-sw-2',)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) INSERT INTO "product_product" ("site_id", "name", "slug", "sku", "short_description", "description", "items_in_stock", "meta", "date_added", "active", "featured", "ordering", "weight", "weight_units", "length", "length_units", "width", "width_units", "height", "height_units", "total_sold", "taxable", "taxClass_id", "shipclass") VALUES (1, Kartka Pamiątka Chrztu Św., kartka-pamiatka-chrztu-sw-2, KDL-R-CH-03, Kartka z Okazji Chrztu Św., Kartka z Okazji Chrztu Św., 0.000000, None, 2012-01-10, True, False, 0, None, None, None, None, None, None, None, None, 0.000000, True, None, DEFAULT); args=(1, u'Kartka Pami\u0105tka Chrztu \u015aw.', 'kartka-pamiatka-chrztu-sw-2', u'KDL-R-CH-03', u'Kartka z Okazji Chrztu \u015aw.', u'Kartka z Okazji Chrztu \u015aw.', u'0.000000', None, '2012-01-10', True, False, 0, None, None, None, None, None, None, None, None, u'0.000000', True, None, u'DEFAULT')
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 38 ; args=(38,)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 38 ; args=(38,)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 38 ; args=(38,)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-pamiatka-chrztu-sw-2  AND "product_productpricelookup"."siteid" = 1 ); args=('kartka-pamiatka-chrztu-sw-2', 1)
Tue, 10 Jan 2012 06:32:50 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:10.584341 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:10.584341')
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.020) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."slug" = kartka-rocznica-slubu  AND "product_product"."site_id" = 1 ); args=(True, u'kartka-rocznica-slubu', 1)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.001) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.002) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2012-01-10  AND "product_discount"."endDate" > 2012-01-10  AND ("product_discount_valid_products"."product_id" IN (52) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2012-01-10', '2012-01-10', 52, True)
Tue, 10 Jan 2012 06:33:10 root         DEBUG    subtypes = ()
Tue, 10 Jan 2012 06:33:10 product.views DEBUG    finding product template: ['product/product.html']
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.001) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = kartka-rocznica-slubu ; args=(u'kartka-rocznica-slubu',)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.001) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.001) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:33:10.745463 ; args=(u'2012-01-03 06:33:10.745463',)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:33:10.745479 ; args=(u'2012-01-09 06:33:10.745479',)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:33:10.745484 ; args=(u'2012-01-10 05:33:10.745484',)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.001) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 52  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(52,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 52  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(52,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."id" = 11 ); args=(True, 11)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 52  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(52, u'pl-pl')
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 52  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(52, u'pl')
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 52  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(52, u'pl%')
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 52  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(52, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:10 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.001) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 52  ORDER BY "product_productimage"."sort" ASC; args=(52,)
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productattribute" WHERE ("product_productattribute"."product_id" = 52  AND "product_productattribute"."languagecode" = pl-pl ); args=(52, 'pl-pl')
Tue, 10 Jan 2012 06:33:10 django.db.backends DEBUG    (0.000) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE ("product_productattribute"."product_id" = 52  AND ("product_productattribute"."languagecode" IS NULL OR "product_productattribute"."languagecode" =  )) ORDER BY "product_attributeoption"."sort_order" ASC; args=(52, '')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.020) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.039507 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.039507')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.013) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.084064 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.084064')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.003) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.109386 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.109386')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.126208 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.126208')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.016) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.145450 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.145450')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.192403 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.192403')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.221896 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.221896')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.001) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.234385 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.234385')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.023) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.339589 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.339589')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.372156 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.372156')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.401540 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.401540')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.420308 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.420308')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.441079 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.441079')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.496378 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.496378')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.018) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.530988 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.530988')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.566299 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.566299')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.024) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.592858 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.592858')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.661867 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.661867')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.680143 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.680143')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.713725 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.713725')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.738552 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.738552')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.759034 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.759034')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:11.780957 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:11.780957')
Tue, 10 Jan 2012 06:33:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:17.074405 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:17.074405')
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.017) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:17.821395 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:17.821395')
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."slug" = wedding-cards  AND "product_category"."site_id" = 1 ); args=(True, u'wedding-cards', 1)
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.008) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "product_product_category" ON ("product_product"."id" = "product_product_category"."product_id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") LEFT OUTER JOIN "configurable_productvariation" ON ("product_product"."id" = "configurable_productvariation"."product_id") LEFT OUTER JOIN "configurable_configurableproduct" ON ("configurable_productvariation"."parent_id" = "configurable_configurableproduct"."product_id") WHERE ("product_product_category"."category_id" = 11  AND "product_product"."active" = True  AND "product_product"."site_id" = 1  AND "configurable_configurableproduct"."product_id" IS NULL) ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=(11, True, 1)
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.013) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2012-01-10  AND "product_discount"."endDate" > 2012-01-10  AND ("product_discount_valid_products"."product_id" IN (52, 53, 54, 55, 56, 57, 58, 31, 32, 33, 34, 35, 30) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2012-01-10', '2012-01-10', 52, 53, 54, 55, 56, 57, 58, 31, 32, 33, 34, 35, 30, True)
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PRODUCT  AND "livesettings_setting"."key" = NUM_PAGINATED ); args=(1, 1, 'PRODUCT', 'NUM_PAGINATED')
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PRODUCT  AND "livesettings_longsetting"."key" = NUM_PAGINATED ); args=(1, 1, 'PRODUCT', 'NUM_PAGINATED')
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 11  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(11, True)
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = wedding-cards ; args=(u'wedding-cards',)
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:33:17.939462 ; args=(u'2012-01-03 06:33:17.939462',)
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:33:17.939477 ; args=(u'2012-01-09 06:33:17.939477',)
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:33:17.939482 ; args=(u'2012-01-10 05:33:17.939482',)
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:33:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."id" = 11 ); args=(True, 11)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 11  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(11, u'pl-pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 11  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(11, u'pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 11  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(11, u'pl%')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categoryimage" WHERE "product_categoryimage"."category_id" = 11 ; args=(11,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_categoryimage" WHERE "product_categoryimage"."category_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PRODUCT  AND "livesettings_setting"."key" = SHOW_NO_PHOTO_IN_CATEGORY ); args=(1, 1, 'PRODUCT', 'SHOW_NO_PHOTO_IN_CATEGORY')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PRODUCT  AND "livesettings_longsetting"."key" = SHOW_NO_PHOTO_IN_CATEGORY ); args=(1, 1, 'PRODUCT', 'SHOW_NO_PHOTO_IN_CATEGORY')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 52  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(52,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 52  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(52, u'pl-pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 52  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(52, u'pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 52  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(52, u'pl%')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 52  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(52, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.003) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:18 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 53  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(53,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 53  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(53, u'pl-pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 53  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(53, u'pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 53  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(53, u'pl%')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 53  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(53, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.004) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:18 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 54 ; args=(54,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 54  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(54,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 54  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(54, u'pl-pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 54  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(54, u'pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 54  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(54, u'pl%')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 54 ; args=(54,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 54 ; args=(54,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 54 ; args=(54,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 54  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(54, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:18 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 55  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(55,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 55  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(55, u'pl-pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 55  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(55, u'pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 55  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(55, u'pl%')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 55  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(55, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:18 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 56 ; args=(56,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 56  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(56,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 56  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(56, u'pl-pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 56  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(56, u'pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 56  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(56, u'pl%')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 56 ; args=(56,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 56 ; args=(56,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 56 ; args=(56,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 56  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(56, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:18 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 57 ; args=(57,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 57  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(57,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 57  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(57, u'pl-pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 57  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(57, u'pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 57  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(57, u'pl%')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 57 ; args=(57,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 57 ; args=(57,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 57 ; args=(57,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 57  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(57, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.001) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:18 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 58 ; args=(58,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 58  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(58,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 58  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(58, u'pl-pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 58  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(58, u'pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 58  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(58, u'pl%')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 58 ; args=(58,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 58 ; args=(58,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 58 ; args=(58,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 58  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(58, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.001) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:18 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 31  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(31,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 31  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(31, u'pl-pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 31  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(31, u'pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 31  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(31, u'pl%')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 31  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(31, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.007) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:18 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 32  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(32,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 32  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(32, u'pl-pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 32  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(32, u'pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 32  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(32, u'pl%')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 32  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(32, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.002) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:18 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 33  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(33,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 33  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(33, u'pl-pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 33  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(33, u'pl')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 33  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(33, u'pl%')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 33  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(33, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:18 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.024) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:18.912700 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:18.912700')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:18.958060 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:18.958060')
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:18 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:18.982295 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:18.982295')
Tue, 10 Jan 2012 06:33:19 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:19 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:19.013405 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:19.013405')
Tue, 10 Jan 2012 06:33:19 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:19 django.db.backends DEBUG    (0.014) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:19.037675 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:19.037675')
Tue, 10 Jan 2012 06:33:19 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:19 django.db.backends DEBUG    (0.017) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:19.078338 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:19.078338')
Tue, 10 Jan 2012 06:33:19 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:19 django.db.backends DEBUG    (0.021) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:19.119994 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:19.119994')
Tue, 10 Jan 2012 06:33:19 django.db.backends DEBUG    (0.004) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:19 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:19.155374 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:19.155374')
Tue, 10 Jan 2012 06:33:19 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:19 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:19.170341 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:19.170341')
Tue, 10 Jan 2012 06:33:19 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:19 django.db.backends DEBUG    (0.022) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:19.197822 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:19.197822')
Tue, 10 Jan 2012 06:33:19 django.db.backends DEBUG    (0.010) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:19 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:19.431965 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:19.431965')
Tue, 10 Jan 2012 06:33:19 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:37.505752 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:37.505752')
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.003) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."slug" = kartka-slubna-2  AND "product_product"."site_id" = 1 ); args=(True, u'kartka-slubna-2', 1)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.011) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2012-01-10  AND "product_discount"."endDate" > 2012-01-10  AND ("product_discount_valid_products"."product_id" IN (33) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2012-01-10', '2012-01-10', 33, True)
Tue, 10 Jan 2012 06:33:37 root         DEBUG    subtypes = ()
Tue, 10 Jan 2012 06:33:37 product.views DEBUG    finding product template: ['product/product.html']
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = kartka-slubna-2 ; args=(u'kartka-slubna-2',)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:33:37.624974 ; args=(u'2012-01-03 06:33:37.624974',)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:33:37.624989 ; args=(u'2012-01-09 06:33:37.624989',)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:33:37.624994 ; args=(u'2012-01-10 05:33:37.624994',)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 33  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(33,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 33  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(33,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."id" = 11 ); args=(True, 11)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 33  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(33, u'pl-pl')
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 33  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(33, u'pl')
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 33  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(33, u'pl%')
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 33  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(33, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:37 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 33  ORDER BY "product_productimage"."sort" ASC; args=(33,)
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productattribute" WHERE ("product_productattribute"."product_id" = 33  AND "product_productattribute"."languagecode" = pl-pl ); args=(33, 'pl-pl')
Tue, 10 Jan 2012 06:33:37 django.db.backends DEBUG    (0.003) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE ("product_productattribute"."product_id" = 33  AND ("product_productattribute"."languagecode" IS NULL OR "product_productattribute"."languagecode" =  )) ORDER BY "product_attributeoption"."sort_order" ASC; args=(33, '')
Tue, 10 Jan 2012 06:33:38 django.db.backends DEBUG    (0.028) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:37.977302 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:37.977302')
Tue, 10 Jan 2012 06:33:38 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:38 django.db.backends DEBUG    (0.015) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:38.049308 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:38.049308')
Tue, 10 Jan 2012 06:33:38 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:38 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:38.232656 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:38.232656')
Tue, 10 Jan 2012 06:33:38 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:43 django.db.backends DEBUG    (0.015) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:43.291558 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:43.291558')
Tue, 10 Jan 2012 06:33:43 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:54.311159 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:54.311159')
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."slug" = kartka-rocznica-slubu-1  AND "product_product"."site_id" = 1 ); args=(True, u'kartka-rocznica-slubu-1', 1)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2012-01-10  AND "product_discount"."endDate" > 2012-01-10  AND ("product_discount_valid_products"."product_id" IN (53) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2012-01-10', '2012-01-10', 53, True)
Tue, 10 Jan 2012 06:33:54 root         DEBUG    subtypes = ()
Tue, 10 Jan 2012 06:33:54 product.views DEBUG    finding product template: ['product/product.html']
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.002) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = kartka-rocznica-slubu-1 ; args=(u'kartka-rocznica-slubu-1',)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.008) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:33:54.460061 ; args=(u'2012-01-03 06:33:54.460061',)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:33:54.460076 ; args=(u'2012-01-09 06:33:54.460076',)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:33:54.460082 ; args=(u'2012-01-10 05:33:54.460082',)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 53  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(53,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 53  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(53,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."id" = 11 ); args=(True, 11)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 53  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(53, u'pl-pl')
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 53  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(53, u'pl')
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 53  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(53, u'pl%')
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 53  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(53, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:33:54 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 53  ORDER BY "product_productimage"."sort" ASC; args=(53,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_productattribute" WHERE ("product_productattribute"."product_id" = 53  AND "product_productattribute"."languagecode" = pl-pl ); args=(53, 'pl-pl')
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.001) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE ("product_productattribute"."product_id" = 53  AND ("product_productattribute"."languagecode" IS NULL OR "product_productattribute"."languagecode" =  )) ORDER BY "product_attributeoption"."sort_order" ASC; args=(53, '')
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:54.807234 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:54.807234')
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.016) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:54.852449 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:54.852449')
Tue, 10 Jan 2012 06:33:54 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:33:55 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:33:55.118234 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:33:55.118234')
Tue, 10 Jan 2012 06:33:55 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:34:17.407492 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:34:17.407492')
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."slug" = kartka-slubna  AND "product_product"."site_id" = 1 ); args=(True, u'kartka-slubna', 1)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2012-01-10  AND "product_discount"."endDate" > 2012-01-10  AND ("product_discount_valid_products"."product_id" IN (31) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2012-01-10', '2012-01-10', 31, True)
Tue, 10 Jan 2012 06:34:17 root         DEBUG    subtypes = ()
Tue, 10 Jan 2012 06:34:17 product.views DEBUG    finding product template: ['product/product.html']
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.006) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = kartka-slubna ; args=(u'kartka-slubna',)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.004) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:34:17.637706 ; args=(u'2012-01-03 06:34:17.637706',)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:34:17.637721 ; args=(u'2012-01-09 06:34:17.637721',)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:34:17.637727 ; args=(u'2012-01-10 05:34:17.637727',)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.002) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 31  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(31,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 31  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(31,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."id" = 11 ); args=(True, 11)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 31  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(31, u'pl-pl')
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 31  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(31, u'pl')
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 31  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(31, u'pl%')
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 31  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(31, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.010) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:34:17 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 31  ORDER BY "product_productimage"."sort" ASC; args=(31,)
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_productattribute" WHERE ("product_productattribute"."product_id" = 31  AND "product_productattribute"."languagecode" = pl-pl ); args=(31, 'pl-pl')
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.000) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE ("product_productattribute"."product_id" = 31  AND ("product_productattribute"."languagecode" IS NULL OR "product_productattribute"."languagecode" =  )) ORDER BY "product_attributeoption"."sort_order" ASC; args=(31, '')
Tue, 10 Jan 2012 06:34:17 django.db.backends DEBUG    (0.015) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:34:17.977976 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:34:17.977976')
Tue, 10 Jan 2012 06:34:18 django.db.backends DEBUG    (0.001) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:18 django.db.backends DEBUG    (0.019) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:34:18.069979 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:34:18.069979')
Tue, 10 Jan 2012 06:34:18 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:18 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:34:18.395384 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:34:18.395384')
Tue, 10 Jan 2012 06:34:18 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:34:22.066306 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:34:22.066306')
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.005) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."slug" = kartka-rocznica-slubu-3  AND "product_product"."site_id" = 1 ); args=(True, u'kartka-rocznica-slubu-3', 1)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2012-01-10  AND "product_discount"."endDate" > 2012-01-10  AND ("product_discount_valid_products"."product_id" IN (55) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2012-01-10', '2012-01-10', 55, True)
Tue, 10 Jan 2012 06:34:22 root         DEBUG    subtypes = ()
Tue, 10 Jan 2012 06:34:22 product.views DEBUG    finding product template: ['product/product.html']
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.001) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = kartka-rocznica-slubu-3 ; args=(u'kartka-rocznica-slubu-3',)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.005) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:34:22.161174 ; args=(u'2012-01-03 06:34:22.161174',)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:34:22.161193 ; args=(u'2012-01-09 06:34:22.161193',)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:34:22.161202 ; args=(u'2012-01-10 05:34:22.161202',)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 55  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(55,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 55  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(55,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."id" = 11 ); args=(True, 11)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.007) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 55  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(55, u'pl-pl')
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 55  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(55, u'pl')
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 55  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(55, u'pl%')
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 55  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(55, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:34:22 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 55  ORDER BY "product_productimage"."sort" ASC; args=(55,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productattribute" WHERE ("product_productattribute"."product_id" = 55  AND "product_productattribute"."languagecode" = pl-pl ); args=(55, 'pl-pl')
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE ("product_productattribute"."product_id" = 55  AND ("product_productattribute"."languagecode" IS NULL OR "product_productattribute"."languagecode" =  )) ORDER BY "product_attributeoption"."sort_order" ASC; args=(55, '')
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:34:22.586869 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:34:22.586869')
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.017) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:34:22.644727 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:34:22.644727')
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:34:22.919905 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:34:22.919905')
Tue, 10 Jan 2012 06:34:22 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:27 django.db.backends DEBUG    (0.014) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:34:27.625569 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:34:27.625569')
Tue, 10 Jan 2012 06:34:27 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:34:32.723004 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:34:32.723004')
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."slug" = wedding-cards  AND "product_category"."site_id" = 1 ); args=(True, u'wedding-cards', 1)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "product_product_category" ON ("product_product"."id" = "product_product_category"."product_id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") LEFT OUTER JOIN "configurable_productvariation" ON ("product_product"."id" = "configurable_productvariation"."product_id") LEFT OUTER JOIN "configurable_configurableproduct" ON ("configurable_productvariation"."parent_id" = "configurable_configurableproduct"."product_id") WHERE ("product_product_category"."category_id" = 11  AND "product_product"."active" = True  AND "product_product"."site_id" = 1  AND "configurable_configurableproduct"."product_id" IS NULL) ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=(11, True, 1)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2012-01-10  AND "product_discount"."endDate" > 2012-01-10  AND ("product_discount_valid_products"."product_id" IN (52, 53, 54, 55, 56, 57, 58, 31, 32, 33, 34, 35, 30) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2012-01-10', '2012-01-10', 52, 53, 54, 55, 56, 57, 58, 31, 32, 33, 34, 35, 30, True)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 11  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(11, True)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.007) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = wedding-cards ; args=(u'wedding-cards',)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:34:32.813938 ; args=(u'2012-01-03 06:34:32.813938',)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:34:32.813957 ; args=(u'2012-01-09 06:34:32.813957',)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:34:32.813966 ; args=(u'2012-01-10 05:34:32.813966',)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.001) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."id" = 11 ); args=(True, 11)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 11  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(11, u'pl-pl')
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 11  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(11, u'pl')
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 11  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(11, u'pl%')
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categoryimage" WHERE "product_categoryimage"."category_id" = 11 ; args=(11,)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categoryimage" WHERE "product_categoryimage"."category_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:34:32 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 34  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(34,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 34  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(34, u'pl-pl')
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 34  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(34, u'pl')
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 34  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(34, u'pl%')
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 34  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(34, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.006) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.001) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:34:33 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 35  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(35,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 35  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(35, u'pl-pl')
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 35  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(35, u'pl')
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 35  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(35, u'pl%')
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 35  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(35, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:34:33 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 30 ; args=(30,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 30  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(30,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 30  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(30, u'pl-pl')
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 30  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(30, u'pl')
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 30  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(30, u'pl%')
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 30 ; args=(30,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 30 ; args=(30,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 30 ; args=(30,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 30  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(30, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 3 ); args=(176, 3)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:34:33 tax.area     DEBUG    Got rate [Kartka] = Kartka - Poland = 8.00%
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.014) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:34:33.388182 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:34:33.388182')
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.014) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:34:33.440139 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:34:33.440139')
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:34:33.465553 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:34:33.465553')
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.015) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.014) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:34:33.656727 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:34:33.656727')
Tue, 10 Jan 2012 06:34:33 django.db.backends DEBUG    (0.001) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.016) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:34:37.527490 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:34:37.527490')
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.003) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."slug" = kartka-slubna-4  AND "product_product"."site_id" = 1 ); args=(True, u'kartka-slubna-4', 1)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2012-01-10  AND "product_discount"."endDate" > 2012-01-10  AND ("product_discount_valid_products"."product_id" IN (35) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2012-01-10', '2012-01-10', 35, True)
Tue, 10 Jan 2012 06:34:37 root         DEBUG    subtypes = ()
Tue, 10 Jan 2012 06:34:37 product.views DEBUG    finding product template: ['product/product.html']
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = kartka-slubna-4 ; args=(u'kartka-slubna-4',)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.001) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:34:37.638746 ; args=(u'2012-01-03 06:34:37.638746',)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:34:37.638746 ; args=(u'2012-01-09 06:34:37.638746',)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:34:37.638746 ; args=(u'2012-01-10 05:34:37.638746',)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 35  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(35,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.002) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 35  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(35,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."id" = 11 ); args=(True, 11)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 35  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(35, u'pl-pl')
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 35  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(35, u'pl')
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 35  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(35, u'pl%')
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 35  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(35, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:34:37 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 35  ORDER BY "product_productimage"."sort" ASC; args=(35,)
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productattribute" WHERE ("product_productattribute"."product_id" = 35  AND "product_productattribute"."languagecode" = pl-pl ); args=(35, 'pl-pl')
Tue, 10 Jan 2012 06:34:37 django.db.backends DEBUG    (0.000) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE ("product_productattribute"."product_id" = 35  AND ("product_productattribute"."languagecode" IS NULL OR "product_productattribute"."languagecode" =  )) ORDER BY "product_attributeoption"."sort_order" ASC; args=(35, '')
Tue, 10 Jan 2012 06:34:38 django.db.backends DEBUG    (0.020) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:34:38.004717 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:34:38.004717')
Tue, 10 Jan 2012 06:34:38 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:38 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:34:38.047343 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:34:38.047343')
Tue, 10 Jan 2012 06:34:38 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:34:38 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:34:38.278456 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:34:38.278456')
Tue, 10 Jan 2012 06:34:38 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:06 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:06.138924 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:06.138924')
Tue, 10 Jan 2012 06:37:06 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:10.170014 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:10.170014')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.002) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."slug" = birthday-cards  AND "product_category"."site_id" = 1 ); args=(True, u'birthday-cards', 1)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "product_product_category" ON ("product_product"."id" = "product_product_category"."product_id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") LEFT OUTER JOIN "configurable_productvariation" ON ("product_product"."id" = "configurable_productvariation"."product_id") LEFT OUTER JOIN "configurable_configurableproduct" ON ("configurable_productvariation"."parent_id" = "configurable_configurableproduct"."product_id") WHERE ("product_product_category"."category_id" = 8  AND "product_product"."active" = True  AND "product_product"."site_id" = 1  AND "configurable_configurableproduct"."product_id" IS NULL) ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=(8, True, 1)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2012-01-10  AND "product_discount"."endDate" > 2012-01-10  AND ("product_discount_valid_products"."product_id" IN (44, 45, 46, 47, 48, 49, 50, 51, 29, 25, 26, 28, 3, 27) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2012-01-10', '2012-01-10', 44, 45, 46, 47, 48, 49, 50, 51, 29, 25, 26, 28, 3, 27, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 8  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(8, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 16  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(16, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 18  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(18, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 17  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(17, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "shop_config"."site_id", "shop_config"."store_name", "shop_config"."store_description", "shop_config"."store_email", "shop_config"."street1", "shop_config"."street2", "shop_config"."city", "shop_config"."state", "shop_config"."postal_code", "shop_config"."country_id", "shop_config"."phone", "shop_config"."in_country_only", "shop_config"."sales_country_id" FROM "shop_config" WHERE "shop_config"."site_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_discount" WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."site_id" = 1  AND "product_discount"."startDate" <= 2012-01-10  AND "product_discount"."endDate" > 2012-01-10 ); args=(True, True, 1, '2012-01-10', '2012-01-10')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.002) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = birthday-cards ; args=(u'birthday-cards',)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:37:10.270198 ; args=(u'2012-01-03 06:37:10.270198',)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:37:10.270220 ; args=(u'2012-01-09 06:37:10.270220',)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:37:10.270233 ; args=(u'2012-01-10 05:37:10.270233',)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.005) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = page_head ; args=(u'page_head',)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "app_plugins_plugin"."id", "app_plugins_plugin"."point_id", "app_plugins_plugin"."label", "app_plugins_plugin"."index", "app_plugins_plugin"."registered", "app_plugins_plugin"."status", "app_plugins_plugin"."required", "app_plugins_plugin"."template", "app_plugins_plugin"."_order" FROM "app_plugins_plugin" WHERE "app_plugins_plugin"."label" = satchmo_toolbar.page_head ; args=(u'satchmo_toolbar.page_head',)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = page_top ; args=(u'page_top',)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "app_plugins_plugin"."id", "app_plugins_plugin"."point_id", "app_plugins_plugin"."label", "app_plugins_plugin"."index", "app_plugins_plugin"."registered", "app_plugins_plugin"."status", "app_plugins_plugin"."required", "app_plugins_plugin"."template", "app_plugins_plugin"."_order" FROM "app_plugins_plugin" WHERE "app_plugins_plugin"."label" = satchmo_toolbar.page_top ; args=(u'satchmo_toolbar.page_top',)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = satchmo_toolbar ; args=(u'satchmo_toolbar',)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = SHOP  AND "livesettings_setting"."key" = CART_QTY ); args=(1, 1, 'SHOP', 'CART_QTY')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = SHOP  AND "livesettings_longsetting"."key" = CART_QTY ); args=(1, 1, 'SHOP', 'CART_QTY')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."id" = 8 ); args=(True, 8)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") WHERE ("product_category"."is_active" = True  AND "product_category"."site_id" = 1  AND T3."id" IS NULL) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(True, 1)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 23  AND "product_category"."is_active" = True ); args=(23, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 23  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(23, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 23  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(23, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 23  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(23, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 20  AND "product_category"."is_active" = True ); args=(20, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 20  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(20, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.004) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 20  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(20, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 20  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(20, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 20  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(20, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 21  AND "product_category"."is_active" = True ); args=(21, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 21  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(21, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 21  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(21, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 21  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(21, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.004) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 22  AND "product_category"."is_active" = True ); args=(22, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 22  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(22, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 22  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(22, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 22  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(22, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 24  AND "product_category"."is_active" = True ); args=(24, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 24  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(24, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 24  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(24, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 24  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(24, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 1  AND "product_category"."is_active" = True ); args=(1, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 1  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(1, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 1  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(1, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 1  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(1, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 1  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(1, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 2  AND "product_category"."is_active" = True ); args=(2, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 2  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(2, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 2  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(2, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 2  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(2, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 4  AND "product_category"."is_active" = True ); args=(4, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 4  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(4, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 4  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(4, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 4  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(4, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 4  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(4, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 10  AND "product_category"."is_active" = True ); args=(10, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 10  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(10, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 10  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(10, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 10  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(10, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 9  AND "product_category"."is_active" = True ); args=(9, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 9  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(9, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 9  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(9, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 9  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(9, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 19  AND "product_category"."is_active" = True ); args=(19, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 19  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(19, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 19  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(19, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 19  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(19, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 8  AND "product_category"."is_active" = True ); args=(8, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 8  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(8, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 8  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(8, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 8  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(8, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 8  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(8, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 16  AND "product_category"."is_active" = True ); args=(16, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.001) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 16  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(16, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 16  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(16, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 16  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(16, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 18  AND "product_category"."is_active" = True ); args=(18, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.001) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 18  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(18, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 18  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(18, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 18  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(18, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 17  AND "product_category"."is_active" = True ); args=(17, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 17  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(17, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 17  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(17, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 17  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(17, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 12  AND "product_category"."is_active" = True ); args=(12, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 12  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(12, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 12  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(12, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 12  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(12, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 12  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(12, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 15  AND "product_category"."is_active" = True ); args=(15, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 15  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(15, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 15  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(15, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 15  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(15, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 14  AND "product_category"."is_active" = True ); args=(14, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 14  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(14, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 14  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(14, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 14  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(14, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 13  AND "product_category"."is_active" = True ); args=(13, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 13  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(13, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 13  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(13, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 13  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(13, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 11  AND "product_category"."is_active" = True ); args=(11, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 11  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(11, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 11  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(11, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 11  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(11, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 7  AND "product_category"."is_active" = True ); args=(7, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 7  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(7, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 7  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(7, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 7  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(7, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 3  AND "product_category"."is_active" = True ); args=(3, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 3  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(3, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 3  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(3, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 3  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(3, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 3  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(3, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 6  AND "product_category"."is_active" = True ); args=(6, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 6  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(6, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 6  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(6, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 6  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(6, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 5  AND "product_category"."is_active" = True ); args=(5, True)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 5  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(5, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 5  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(5, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 5  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(5, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = sidebar_secondary_bottom ; args=(u'sidebar_secondary_bottom',)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 8  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(8, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 8  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(8, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 8  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(8, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categoryimage" WHERE "product_categoryimage"."category_id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categoryimage" WHERE "product_categoryimage"."category_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.002) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 44  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(44,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 44  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(44, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 44  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(44, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 44  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(44, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = TAX  AND "livesettings_setting"."key" = DEFAULT_VIEW_TAX ); args=(1, 1, 'TAX', 'DEFAULT_VIEW_TAX')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 44  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(44, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = TAX  AND "livesettings_setting"."key" = TAX_AREA_ADDRESS ); args=(1, 1, 'TAX', 'TAX_AREA_ADDRESS')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = TAX  AND "livesettings_longsetting"."key" = TAX_AREA_ADDRESS ); args=(1, 1, 'TAX', 'TAX_AREA_ADDRESS')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:10 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 45  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(45,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 45  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(45, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 45  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(45, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 45  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(45, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 45  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(45, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:10 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 46  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(46,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 46  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(46, u'pl-pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 46  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(46, u'pl')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 46  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(46, u'pl%')
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 46  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(46, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.001) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:10 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:37:10 django.db.backends DEBUG    (0.001) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 47  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(47,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 47  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(47, u'pl-pl')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 47  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(47, u'pl')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 47  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(47, u'pl%')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 47  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(47, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:11 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 48  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(48,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 48  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(48, u'pl-pl')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 48  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(48, u'pl')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 48  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(48, u'pl%')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 48  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(48, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:11 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 49  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(49,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 49  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(49, u'pl-pl')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 49  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(49, u'pl')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 49  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(49, u'pl%')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:11 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.003) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.007) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 50  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(50,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 50  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(50, u'pl-pl')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 50  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(50, u'pl')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.013) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 50  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(50, u'pl%')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 50  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(50, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:11 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 51  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(51,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 51  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(51, u'pl-pl')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 51  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(51, u'pl')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 51  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(51, u'pl%')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.005) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 51  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(51, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.006) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:11 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 29  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(29,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 29  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(29, u'pl-pl')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 29  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(29, u'pl')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 29  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(29, u'pl%')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 29  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(29, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.007) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 3 ); args=(176, 3)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:11 tax.area     DEBUG    Got rate [Kartka] = Kartka - Poland = 8.00%
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 25  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(25,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(25, u'pl-pl')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(25, u'pl')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(25, u'pl%')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 25  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(25, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:11 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 16  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(16, u'pl-pl')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 16  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(16, u'pl')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 16  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(16, u'pl%')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 18  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(18, u'pl-pl')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 18  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(18, u'pl')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 18  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(18, u'pl%')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 17  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(17, u'pl-pl')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 17  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(17, u'pl')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 17  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(17, u'pl%')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = GOOGLE  AND "livesettings_setting"."key" = ANALYTICS ); args=(1, 1, 'GOOGLE', 'ANALYTICS')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = GOOGLE  AND "livesettings_longsetting"."key" = ANALYTICS ); args=(1, 1, 'GOOGLE', 'ANALYTICS')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.015) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:11.848729 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:11.848729')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:11.884660 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:11.884660')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:11.906518 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:11.906518')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.007) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:11.945133 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:11.945133')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:11.969607 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:11.969607')
Tue, 10 Jan 2012 06:37:11 django.db.backends DEBUG    (0.003) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:12 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:12.002163 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:12.002163')
Tue, 10 Jan 2012 06:37:12 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:12 django.db.backends DEBUG    (0.013) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:12.033856 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:12.033856')
Tue, 10 Jan 2012 06:37:12 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:12 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:12.068001 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:12.068001')
Tue, 10 Jan 2012 06:37:12 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:12 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:12.087058 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:12.087058')
Tue, 10 Jan 2012 06:37:12 django.db.backends DEBUG    (0.002) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:12 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:12.119073 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:12.119073')
Tue, 10 Jan 2012 06:37:12 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:12 django.db.backends DEBUG    (0.033) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:12.136089 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:12.136089')
Tue, 10 Jan 2012 06:37:12 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:12 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:12.221522 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:12.221522')
Tue, 10 Jan 2012 06:37:12 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:26 django.db.backends DEBUG    (0.033) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:25.957146 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:25.957146')
Tue, 10 Jan 2012 06:37:26 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.021) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:33.977609 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:33.977609')
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.001) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."slug" = kartka-urodzinowa-5  AND "product_product"."site_id" = 1 ); args=(True, u'kartka-urodzinowa-5', 1)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2012-01-10  AND "product_discount"."endDate" > 2012-01-10  AND ("product_discount_valid_products"."product_id" IN (48) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2012-01-10', '2012-01-10', 48, True)
Tue, 10 Jan 2012 06:37:34 root         DEBUG    subtypes = ()
Tue, 10 Jan 2012 06:37:34 product.views DEBUG    finding product template: ['product/product.html']
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.002) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = kartka-urodzinowa-5 ; args=(u'kartka-urodzinowa-5',)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:37:34.128327 ; args=(u'2012-01-03 06:37:34.128327',)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:37:34.128342 ; args=(u'2012-01-09 06:37:34.128342',)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.005) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:37:34.128347 ; args=(u'2012-01-10 05:37:34.128347',)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.006) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 48  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(48,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 48  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(48,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."id" = 8 ); args=(True, 8)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 48  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(48, u'pl-pl')
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 48  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(48, u'pl')
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 48  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(48, u'pl%')
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 48  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(48, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:34 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 48  ORDER BY "product_productimage"."sort" ASC; args=(48,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productattribute" WHERE ("product_productattribute"."product_id" = 48  AND "product_productattribute"."languagecode" = pl-pl ); args=(48, 'pl-pl')
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE ("product_productattribute"."product_id" = 48  AND ("product_productattribute"."languagecode" IS NULL OR "product_productattribute"."languagecode" =  )) ORDER BY "product_attributeoption"."sort_order" ASC; args=(48, '')
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = product_add_buttons ; args=(u'product_add_buttons',)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = product_form ; args=(u'product_form',)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = product_footer ; args=(u'product_footer',)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.013) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:34.627483 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:34.627483')
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:34.670240 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:34.670240')
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.003) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:34.821558 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:34.821558')
Tue, 10 Jan 2012 06:37:34 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:39 django.db.backends DEBUG    (0.038) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:39.014813 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:39.014813')
Tue, 10 Jan 2012 06:37:39 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:41.137829 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:41.137829')
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.004) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."slug" = one-year  AND "product_category"."site_id" = 1 ); args=(True, u'one-year', 1)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.004) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "product_product_category" ON ("product_product"."id" = "product_product_category"."product_id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") LEFT OUTER JOIN "configurable_productvariation" ON ("product_product"."id" = "configurable_productvariation"."product_id") LEFT OUTER JOIN "configurable_configurableproduct" ON ("configurable_productvariation"."parent_id" = "configurable_configurableproduct"."product_id") WHERE ("product_product_category"."category_id" = 17  AND "product_product"."active" = True  AND "product_product"."site_id" = 1  AND "configurable_configurableproduct"."product_id" IS NULL) ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=(17, True, 1)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2012-01-10  AND "product_discount"."endDate" > 2012-01-10  AND ("product_discount_valid_products"."product_id" IN (27) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2012-01-10', '2012-01-10', 27, True)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 17  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(17, True)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.001) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = one-year ; args=(u'one-year',)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:37:41.232323 ; args=(u'2012-01-03 06:37:41.232323',)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:37:41.232340 ; args=(u'2012-01-09 06:37:41.232340',)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:37:41.232345 ; args=(u'2012-01-10 05:37:41.232345',)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."id" = 17 ); args=(True, 17)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 17  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(17, u'pl-pl')
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 17  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(17, u'pl')
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 17  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(17, u'pl%')
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categoryimage" WHERE "product_categoryimage"."category_id" = 17 ; args=(17,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categoryimage" WHERE "product_categoryimage"."category_id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categoryimage" WHERE "product_categoryimage"."category_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 27  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(27,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(27, u'pl-pl')
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(27, u'pl')
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(27, u'pl%')
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.002) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:41 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.016) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:41.699593 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:41.699593')
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.014) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:41.728623 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:41.728623')
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.001) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:41.882472 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:41.882472')
Tue, 10 Jan 2012 06:37:41 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:44 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:44.544586 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:44.544586')
Tue, 10 Jan 2012 06:37:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.019) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:47.132544 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:47.132544')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."slug" = birthday-cards  AND "product_category"."site_id" = 1 ); args=(True, u'birthday-cards', 1)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "product_product_category" ON ("product_product"."id" = "product_product_category"."product_id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") LEFT OUTER JOIN "configurable_productvariation" ON ("product_product"."id" = "configurable_productvariation"."product_id") LEFT OUTER JOIN "configurable_configurableproduct" ON ("configurable_productvariation"."parent_id" = "configurable_configurableproduct"."product_id") WHERE ("product_product_category"."category_id" = 8  AND "product_product"."active" = True  AND "product_product"."site_id" = 1  AND "configurable_configurableproduct"."product_id" IS NULL) ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=(8, True, 1)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2012-01-10  AND "product_discount"."endDate" > 2012-01-10  AND ("product_discount_valid_products"."product_id" IN (44, 45, 46, 47, 48, 49, 50, 51, 29, 25, 26, 28, 3, 27) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2012-01-10', '2012-01-10', 44, 45, 46, 47, 48, 49, 50, 51, 29, 25, 26, 28, 3, 27, True)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 8  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(8, True)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 16  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(16, True)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 18  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(18, True)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 17  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(17, True)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = birthday-cards ; args=(u'birthday-cards',)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:37:47.261040 ; args=(u'2012-01-03 06:37:47.261040',)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:37:47.261055 ; args=(u'2012-01-09 06:37:47.261055',)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:37:47.261061 ; args=(u'2012-01-10 05:37:47.261061',)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.001) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.003) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."id" = 8 ); args=(True, 8)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 8  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(8, u'pl-pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 8  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(8, u'pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 8  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(8, u'pl%')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categoryimage" WHERE "product_categoryimage"."category_id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categoryimage" WHERE "product_categoryimage"."category_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 44  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(44,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 44  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(44, u'pl-pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 44  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(44, u'pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 44  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(44, u'pl%')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 44  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(44, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.001) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:47 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 45  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(45,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 45  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(45, u'pl-pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 45  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(45, u'pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 45  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(45, u'pl%')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 45  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(45, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:47 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 46  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(46,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 46  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(46, u'pl-pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 46  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(46, u'pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 46  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(46, u'pl%')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 46  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(46, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.001) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:47 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 47  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(47,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 47  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(47, u'pl-pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 47  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(47, u'pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 47  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(47, u'pl%')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 47  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(47, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.002) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:47 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 48  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(48,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 48  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(48, u'pl-pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 48  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(48, u'pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 48  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(48, u'pl%')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 48  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(48, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:47 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 49  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(49,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 49  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(49, u'pl-pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 49  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(49, u'pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 49  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(49, u'pl%')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:47 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 50  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(50,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 50  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(50, u'pl-pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 50  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(50, u'pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 50  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(50, u'pl%')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 50  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(50, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.001) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:47 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 51  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(51,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 51  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(51, u'pl-pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 51  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(51, u'pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 51  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(51, u'pl%')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 51  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(51, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:47 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 29  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(29,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 29  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(29, u'pl-pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 29  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(29, u'pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 29  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(29, u'pl%')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 29  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(29, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 3 ); args=(176, 3)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.001) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:47 tax.area     DEBUG    Got rate [Kartka] = Kartka - Poland = 8.00%
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 25  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(25,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(25, u'pl-pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(25, u'pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(25, u'pl%')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 25  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(25, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:37:47 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 16  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(16, u'pl-pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 16  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(16, u'pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 16  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(16, u'pl%')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 18  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(18, u'pl-pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 18  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(18, u'pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 18  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(18, u'pl%')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 17  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(17, u'pl-pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 17  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(17, u'pl')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 17  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(17, u'pl%')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.014) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:47.901351 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:47.901351')
Tue, 10 Jan 2012 06:37:47 django.db.backends DEBUG    (0.005) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:48 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:48.147303 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:48.147303')
Tue, 10 Jan 2012 06:37:48 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:48 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:48.169265 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:48.169265')
Tue, 10 Jan 2012 06:37:48 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:48 django.db.backends DEBUG    (0.016) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:48.194450 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:48.194450')
Tue, 10 Jan 2012 06:37:48 django.db.backends DEBUG    (0.009) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:48 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:48.230429 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:48.230429')
Tue, 10 Jan 2012 06:37:48 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:48 django.db.backends DEBUG    (0.023) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:48.256395 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:48.256395')
Tue, 10 Jan 2012 06:37:48 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:48 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:48.295643 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:48.295643')
Tue, 10 Jan 2012 06:37:48 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:48 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:48.315940 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:48.315940')
Tue, 10 Jan 2012 06:37:48 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:48 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:48.332215 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:48.332215')
Tue, 10 Jan 2012 06:37:48 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:37:48 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:37:48.359835 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:37:48.359835')
Tue, 10 Jan 2012 06:37:48 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:03 django.db.backends DEBUG    (0.019) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:38:03.907293 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:38:03.907293')
Tue, 10 Jan 2012 06:38:03 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:03 django.db.backends DEBUG    (0.006) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:03 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."slug" = kartka-urodzinowa-6  AND "product_product"."site_id" = 1 ); args=(True, u'kartka-urodzinowa-6', 1)
Tue, 10 Jan 2012 06:38:03 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:03 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:03 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:03 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2012-01-10  AND "product_discount"."endDate" > 2012-01-10  AND ("product_discount_valid_products"."product_id" IN (49) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2012-01-10', '2012-01-10', 49, True)
Tue, 10 Jan 2012 06:38:03 root         DEBUG    subtypes = ()
Tue, 10 Jan 2012 06:38:03 product.views DEBUG    finding product template: ['product/product.html']
Tue, 10 Jan 2012 06:38:03 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:03 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:38:03 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:38:03 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = kartka-urodzinowa-6 ; args=(u'kartka-urodzinowa-6',)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:38:04.014957 ; args=(u'2012-01-03 06:38:04.014957',)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:38:04.014972 ; args=(u'2012-01-09 06:38:04.014972',)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:38:04.014977 ; args=(u'2012-01-10 05:38:04.014977',)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.001) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 49  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(49,)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 49  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(49,)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."id" = 8 ); args=(True, 8)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 49  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(49, u'pl-pl')
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 49  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(49, u'pl')
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 49  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(49, u'pl%')
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:04 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 49  ORDER BY "product_productimage"."sort" ASC; args=(49,)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productattribute" WHERE ("product_productattribute"."product_id" = 49  AND "product_productattribute"."languagecode" = pl-pl ); args=(49, 'pl-pl')
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE ("product_productattribute"."product_id" = 49  AND ("product_productattribute"."languagecode" IS NULL OR "product_productattribute"."languagecode" =  )) ORDER BY "product_attributeoption"."sort_order" ASC; args=(49, '')
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:38:04.443471 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:38:04.443471')
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:38:04.489830 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:38:04.489830')
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:38:04.673790 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:38:04.673790')
Tue, 10 Jan 2012 06:38:04 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:13 django.db.backends DEBUG    (0.018) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:38:13.549557 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:38:13.549557')
Tue, 10 Jan 2012 06:38:13 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.014) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:38:17.036264 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:38:17.036264')
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 shop.views.cart DEBUG    FORM: <QueryDict: {u'addcart': [u'Dodaj do koszyka'], u'csrfmiddlewaretoken': [u'1a7ac02f45ca3c34c255dc083796c317'], u'productname': [u'kartka-urodzinowa-6'], u'quantity': [u'5']}>
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = SHOP  AND "livesettings_setting"."key" = CART_PRECISION ); args=(1, 1, 'SHOP', 'CART_PRECISION')
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = SHOP  AND "livesettings_longsetting"."key" = CART_PRECISION ); args=(1, 1, 'SHOP', 'CART_PRECISION')
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.005) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = SHOP  AND "livesettings_setting"."key" = CART_ROUNDING ); args=(1, 1, 'SHOP', 'CART_ROUNDING')
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = SHOP  AND "livesettings_longsetting"."key" = CART_ROUNDING ); args=(1, 1, 'SHOP', 'CART_ROUNDING')
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE ("product_product"."slug" = kartka-urodzinowa-6  AND "product_product"."site_id" = 1 ); args=(u'kartka-urodzinowa-6', 1)
Tue, 10 Jan 2012 06:38:17 shop.views.cart DEBUG    found product: Kartka Urodzinowa
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.002) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:17 shop.views.cart DEBUG    product kartka-urodzinowa-6 is active
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.001) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.001) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE ("shop_cartitem"."cart_id" = 4  AND "shop_cartitem"."product_id" = 49 ) ORDER BY "shop_cartitem"."id" ASC; args=(4, 49)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PRODUCT  AND "livesettings_setting"."key" = NO_STOCK_CHECKOUT ); args=(1, 1, 'PRODUCT', 'NO_STOCK_CHECKOUT')
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PRODUCT  AND "livesettings_longsetting"."key" = NO_STOCK_CHECKOUT ); args=(1, 1, 'PRODUCT', 'NO_STOCK_CHECKOUT')
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.001) INSERT INTO "shop_cartitem" ("cart_id", "product_id", "quantity") VALUES (4, 49, 0.000000); args=(4, 49, u'0.000000')
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "shop_cartitem" WHERE "shop_cartitem"."id" = 6  LIMIT 1; args=(6,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) UPDATE "shop_cartitem" SET "cart_id" = 4, "product_id" = 49, "quantity" = 5.000000 WHERE "shop_cartitem"."id" = 6 ; args=(4, 49, u'5.000000', 6)
Tue, 10 Jan 2012 06:38:17 shop.listeners DEBUG    caught cart changed signal - remove_order_on_cart_update
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:38:17.215471 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:38:17.215471')
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2012-01-10  AND "product_discount"."endDate" > 2012-01-10  AND ("product_discount_valid_products"."product_id" IN (27, 49) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2012-01-10', '2012-01-10', 27, 49, True)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.001) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = cart ; args=(u'cart',)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.005) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:38:17.254490 ; args=(u'2012-01-03 06:38:17.254490',)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:38:17.254509 ; args=(u'2012-01-09 06:38:17.254509',)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:38:17.254518 ; args=(u'2012-01-10 05:38:17.254518',)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.002) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 5 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('5'))
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.004) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(27, u'pl-pl')
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(27, u'pl')
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(27, u'pl%')
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.002) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:17 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:17 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:38:17 shop.templatetags.satchmo_cart DEBUG    sub details
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 49  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(49, u'pl-pl')
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 49  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(49, u'pl')
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 49  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(49, u'pl%')
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.002) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 5 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('5'))
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:17 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 5 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('5'))
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:17 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:38:17 shop.templatetags.satchmo_cart DEBUG    sub details
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:17 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 5 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('5'))
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:17 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.013) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:38:17.753268 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:38:17.753268')
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:38:17.859864 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:38:17.859864')
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:17 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:38:17.982334 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:38:17.982334')
Tue, 10 Jan 2012 06:38:18 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:51 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:38:51.819503 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:38:51.819503')
Tue, 10 Jan 2012 06:38:51 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:51 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PRODUCT  AND "livesettings_setting"."key" = NUM_DISPLAY ); args=(1, 1, 'PRODUCT', 'NUM_DISPLAY')
Tue, 10 Jan 2012 06:38:51 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PRODUCT  AND "livesettings_longsetting"."key" = NUM_DISPLAY ); args=(1, 1, 'PRODUCT', 'NUM_DISPLAY')
Tue, 10 Jan 2012 06:38:51 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PRODUCT  AND "livesettings_setting"."key" = RANDOM_FEATURED ); args=(1, 1, 'PRODUCT', 'RANDOM_FEATURED')
Tue, 10 Jan 2012 06:38:51 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PRODUCT  AND "livesettings_longsetting"."key" = RANDOM_FEATURED ); args=(1, 1, 'PRODUCT', 'RANDOM_FEATURED')
Tue, 10 Jan 2012 06:38:51 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PRODUCT  AND "livesettings_setting"."key" = NUM_PAGINATED ); args=(1, 1, 'PRODUCT', 'NUM_PAGINATED')
Tue, 10 Jan 2012 06:38:51 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PRODUCT  AND "livesettings_longsetting"."key" = NUM_PAGINATED ); args=(1, 1, 'PRODUCT', 'NUM_PAGINATED')
Tue, 10 Jan 2012 06:38:51 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."site_id" = 1  AND "product_product"."featured" = True ); args=(True, 1, True)
Tue, 10 Jan 2012 06:38:51 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:51 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:38:51 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:38:51 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" =  ; args=(u'',)
Tue, 10 Jan 2012 06:38:51 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:38:51 django.db.backends DEBUG    (0.003) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:38:51 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:38:51.961704 ; args=(u'2012-01-03 06:38:51.961704',)
Tue, 10 Jan 2012 06:38:51 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:38:51.961720 ; args=(u'2012-01-09 06:38:51.961720',)
Tue, 10 Jan 2012 06:38:51 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:38:51.961725 ; args=(u'2012-01-10 05:38:51.961725',)
Tue, 10 Jan 2012 06:38:51 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:38:51 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 5 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('5'))
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.006) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_product"."active" = True  AND "product_product"."site_id" = 1  AND "product_product"."featured" = True ) ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC LIMIT 8; args=(True, 1, True)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.001) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 22  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(22,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 22  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(22,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 22  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(22, u'pl-pl')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 22  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(22, u'pl')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 22  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(22, u'pl%')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 22  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(22, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:52 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.005) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 20  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(20,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 20  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(20,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 20  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(20, u'pl-pl')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 20  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(20, u'pl')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 20  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(20, u'pl%')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 20  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(20, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:52 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 2  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(2,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 2  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(2,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 2  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(2, u'pl-pl')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 2  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(2, u'pl')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 2  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(2, u'pl%')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 2  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(2, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:52 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 25  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(25,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 25  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(25,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(25, u'pl-pl')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(25, u'pl')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(25, u'pl%')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.001) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 25  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(25, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.001) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:52 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 26  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(26,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 26  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(26,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 26  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(26, u'pl-pl')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 26  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(26, u'pl')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 26  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(26, u'pl%')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.002) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 26  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(26, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.001) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:52 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 3  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(3,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 3  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(3,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(3, u'pl-pl')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(3, u'pl')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(3, u'pl%')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:52 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 27  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(27,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 27  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(27,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(27, u'pl-pl')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(27, u'pl')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(27, u'pl%')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:52 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 4  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(4,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 4  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(4,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 4  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(4, u'pl-pl')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 4  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(4, u'pl')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 4  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(4, u'pl%')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.002) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:38:52 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:38:52.673652 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:38:52.673652')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.023) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:38:52.699716 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:38:52.699716')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.015) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:38:52.735901 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:38:52.735901')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.014) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:38:52.774270 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:38:52.774270')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.014) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:38:52.808766 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:38:52.808766')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.003) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:38:52.850581 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:38:52.850581')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:38:52.908911 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:38:52.908911')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.002) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:38:52.932696 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:38:52.932696')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:38:52.950594 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:38:52.950594')
Tue, 10 Jan 2012 06:38:52 django.db.backends DEBUG    (0.006) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:38:53 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:38:53.174220 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:38:53.174220')
Tue, 10 Jan 2012 06:38:53 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:03 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:03.984144 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:03.984144')
Tue, 10 Jan 2012 06:39:04 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:09.183741 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:09.183741')
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.005) SELECT COUNT(*) FROM "product_product"; args=()
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.001) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=()
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.001) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.004) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" ASC; args=()
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = product ; args=(u'product',)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:39:09.357857 ; args=(u'2012-01-03 06:39:09.357857',)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:39:09.357872 ; args=(u'2012-01-09 06:39:09.357872',)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:39:09.357877 ; args=(u'2012-01-10 05:39:09.357877',)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 2  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(2, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 5  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(5, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 6  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(6, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 7 ; args=(7,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 7 ; args=(7,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.001) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 7 ; args=(7,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 7  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(7, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 8  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(8, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 9 ; args=(9,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 9 ; args=(9,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 9 ; args=(9,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 9  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(9, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 10 ; args=(10,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 10 ; args=(10,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 10 ; args=(10,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 10  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(10, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 13 ; args=(13,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 13 ; args=(13,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 13 ; args=(13,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 13  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(13, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 14 ; args=(14,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 14 ; args=(14,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 14 ; args=(14,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 14 ; args=(14,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 14  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(14, '2012-01-10')
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 14  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(14,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 14  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(14, '2012-01-10')
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 14  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(14,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 15 ; args=(15,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 15 ; args=(15,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 15 ; args=(15,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 15 ; args=(15,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 15  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(15, '2012-01-10')
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.001) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 15  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(15,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 15  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(15, '2012-01-10')
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 15  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(15,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 16 ; args=(16,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 16 ; args=(16,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 16 ; args=(16,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 16 ; args=(16,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 16  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(16, '2012-01-10')
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 16  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(16,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 16  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(16, '2012-01-10')
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 16  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(16,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 17 ; args=(17,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 17 ; args=(17,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 17 ; args=(17,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 17 ; args=(17,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 17  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(17, '2012-01-10')
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(17,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 17  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(17, '2012-01-10')
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(17,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 18 ; args=(18,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 18 ; args=(18,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 18 ; args=(18,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 18 ; args=(18,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 18  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(18, '2012-01-10')
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(18,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 18  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(18, '2012-01-10')
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(18,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 19 ; args=(19,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 19 ; args=(19,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 19 ; args=(19,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 19 ; args=(19,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 19  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(19, '2012-01-10')
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 19  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(19,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 19  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(19, '2012-01-10')
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 19  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(19,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 20  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(20, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 21 ; args=(21,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 21 ; args=(21,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 21 ; args=(21,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 21  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(21, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 22  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(22, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 23 ; args=(23,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 23 ; args=(23,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 23 ; args=(23,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 23 ; args=(23,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 23  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(23, '2012-01-10')
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.003) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 23  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(23,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 23  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(23, '2012-01-10')
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 23  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(23,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 24 ; args=(24,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 24 ; args=(24,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 24 ; args=(24,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 24 ; args=(24,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 24  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(24, '2012-01-10')
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 24  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(24,)
Tue, 10 Jan 2012 06:39:09 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 24  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(24, '2012-01-10')
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 24  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(24,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 25  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(25, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 26  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(26, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 28 ; args=(28,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 28 ; args=(28,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 28 ; args=(28,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.002) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 28  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(28, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.002) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 29  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(29, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 30 ; args=(30,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 30 ; args=(30,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 30 ; args=(30,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 30  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(30, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 31  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(31, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 32  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(32, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.003) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 33  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(33, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 34  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(34, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 35  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(35, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 36 ; args=(36,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 36 ; args=(36,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 36 ; args=(36,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 36  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(36, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 37 ; args=(37,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 37 ; args=(37,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 37 ; args=(37,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 37  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(37, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 38 ; args=(38,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 38 ; args=(38,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 38 ; args=(38,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 38  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(38, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 39 ; args=(39,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 39 ; args=(39,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 39 ; args=(39,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 39  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(39, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 40 ; args=(40,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 40 ; args=(40,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 40 ; args=(40,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 40  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(40, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 41 ; args=(41,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.003) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 41 ; args=(41,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 41 ; args=(41,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 41  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(41, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 42 ; args=(42,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 42 ; args=(42,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 42 ; args=(42,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 42  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(42, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 43  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(43, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 44  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(44, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 45  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(45, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 46  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(46, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 47  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(47, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.003) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 48  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(48, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.002) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 50  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(50, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 51  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(51, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 52  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(52, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 53  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(53, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 54 ; args=(54,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 54 ; args=(54,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 54 ; args=(54,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 54  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(54, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 55  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(55, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 56 ; args=(56,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 56 ; args=(56,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 56 ; args=(56,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 56  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(56, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 57 ; args=(57,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 57 ; args=(57,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 57 ; args=(57,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 57  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(57, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 58 ; args=(58,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 58 ; args=(58,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 58 ; args=(58,)
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 58  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(58, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.014) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:10.461042 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:10.461042')
Tue, 10 Jan 2012 06:39:10 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.016) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:42.809306 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:42.809306')
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_product"; args=()
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=()
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.002) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.002) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.001) UPDATE "product_product" SET "active" = False WHERE "product_product"."id" IN (4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24); args=(False, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.001) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:42.942536 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:42.942536')
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_product"; args=()
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=()
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.001) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.003) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:39:42 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.011) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.006) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.003) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.006) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" ASC; args=()
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = product ; args=(u'product',)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.001) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:39:43.104917 ; args=(u'2012-01-03 06:39:43.104917',)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:39:43.104933 ; args=(u'2012-01-09 06:39:43.104933',)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:39:43.104938 ; args=(u'2012-01-10 05:39:43.104938',)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 2  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(2, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 5  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(5, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 6  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(6, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.002) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 7 ; args=(7,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 7 ; args=(7,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 7 ; args=(7,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 7  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(7, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 8  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(8, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 9 ; args=(9,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 9 ; args=(9,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 9 ; args=(9,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 9  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(9, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 10 ; args=(10,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 10 ; args=(10,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 10 ; args=(10,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.003) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 10  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(10, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 13 ; args=(13,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 13 ; args=(13,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 13 ; args=(13,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 13  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(13, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 14 ; args=(14,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 14 ; args=(14,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 14 ; args=(14,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 14 ; args=(14,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 14  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(14, '2012-01-10')
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 14  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(14,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 14  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(14, '2012-01-10')
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 14  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(14,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.003) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 15 ; args=(15,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 15 ; args=(15,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 15 ; args=(15,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 15 ; args=(15,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 15  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(15, '2012-01-10')
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 15  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(15,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 15  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(15, '2012-01-10')
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 15  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(15,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 16 ; args=(16,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 16 ; args=(16,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 16 ; args=(16,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 16 ; args=(16,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 16  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(16, '2012-01-10')
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 16  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(16,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 16  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(16, '2012-01-10')
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 16  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(16,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 17 ; args=(17,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 17 ; args=(17,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 17 ; args=(17,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 17 ; args=(17,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 17  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(17, '2012-01-10')
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(17,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 17  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(17, '2012-01-10')
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(17,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 18 ; args=(18,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 18 ; args=(18,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 18 ; args=(18,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 18 ; args=(18,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 18  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(18, '2012-01-10')
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.002) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(18,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.004) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 18  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(18, '2012-01-10')
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(18,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 19 ; args=(19,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 19 ; args=(19,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 19 ; args=(19,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 19 ; args=(19,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.003) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 19  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(19, '2012-01-10')
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 19  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(19,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 19  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(19, '2012-01-10')
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 19  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(19,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 20  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(20, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 21 ; args=(21,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 21 ; args=(21,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 21 ; args=(21,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.002) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 21  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(21, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 22  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(22, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 23 ; args=(23,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 23 ; args=(23,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 23 ; args=(23,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 23 ; args=(23,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 23  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(23, '2012-01-10')
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 23  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(23,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 23  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(23, '2012-01-10')
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 23  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(23,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 24 ; args=(24,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 24 ; args=(24,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 24 ; args=(24,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 24 ; args=(24,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 24  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(24, '2012-01-10')
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 24  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(24,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 24  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(24, '2012-01-10')
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 24  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(24,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 25  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(25, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 26  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(26, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 28 ; args=(28,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 28 ; args=(28,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.002) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 28 ; args=(28,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 28  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(28, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 29  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(29, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 30 ; args=(30,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 30 ; args=(30,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 30 ; args=(30,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 30  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(30, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 31  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(31, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 32  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(32, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.002) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 33  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(33, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:39:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 34  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(34, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 35  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(35, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 36 ; args=(36,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 36 ; args=(36,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 36 ; args=(36,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 36  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(36, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 37 ; args=(37,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 37 ; args=(37,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 37 ; args=(37,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 37  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(37, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 38 ; args=(38,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 38 ; args=(38,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 38 ; args=(38,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 38  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(38, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 39 ; args=(39,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 39 ; args=(39,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 39 ; args=(39,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 39  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(39, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 40 ; args=(40,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 40 ; args=(40,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 40 ; args=(40,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 40  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(40, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.006) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 41 ; args=(41,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 41 ; args=(41,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 41 ; args=(41,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 41  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(41, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 42 ; args=(42,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 42 ; args=(42,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 42 ; args=(42,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 42  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(42, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 43  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(43, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 44  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(44, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 45  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(45, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.002) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 46  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(46, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 47  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(47, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 48  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(48, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.001) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.003) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 50  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(50, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 51  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(51, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 52  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(52, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 53  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(53, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 54 ; args=(54,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 54 ; args=(54,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 54 ; args=(54,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 54  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(54, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 55  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(55, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 56 ; args=(56,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.009) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 56 ; args=(56,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 56 ; args=(56,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 56  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(56, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 57 ; args=(57,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 57 ; args=(57,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 57 ; args=(57,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 57  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(57, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 58 ; args=(58,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.002) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 58 ; args=(58,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 58 ; args=(58,)
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 58  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(58, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:44.333194 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:44.333194')
Tue, 10 Jan 2012 06:39:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:49 django.db.backends DEBUG    (0.015) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:49.846851 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:49.846851')
Tue, 10 Jan 2012 06:39:49 django.db.backends DEBUG    (0.001) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:49 django.db.backends DEBUG    (0.004) SELECT COUNT(*) FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."site_id" = 1  AND "product_product"."featured" = True ); args=(True, 1, True)
Tue, 10 Jan 2012 06:39:49 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:49 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:49 django.db.backends DEBUG    (0.011) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:39:49 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" =  ; args=(u'',)
Tue, 10 Jan 2012 06:39:49 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:39:49 django.db.backends DEBUG    (0.003) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:39:49 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:39:49.927607 ; args=(u'2012-01-03 06:39:49.927607',)
Tue, 10 Jan 2012 06:39:49 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:39:49.927623 ; args=(u'2012-01-09 06:39:49.927623',)
Tue, 10 Jan 2012 06:39:49 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:39:49.927628 ; args=(u'2012-01-10 05:39:49.927628',)
Tue, 10 Jan 2012 06:39:49 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:39:49 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 5 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('5'))
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_product"."active" = True  AND "product_product"."site_id" = 1  AND "product_product"."featured" = True ) ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC LIMIT 6; args=(True, 1, True)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 22  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(22,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.003) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 22  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(22,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 22  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(22, u'pl-pl')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 22  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(22, u'pl')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 22  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(22, u'pl%')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.002) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 22  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(22, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.001) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:39:50 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 2  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(2,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 2  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(2,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 2  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(2, u'pl-pl')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 2  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(2, u'pl')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 2  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(2, u'pl%')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.002) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 2  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(2, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:39:50 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.001) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 25  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(25,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 25  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(25,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(25, u'pl-pl')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(25, u'pl')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(25, u'pl%')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 25  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(25, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:39:50 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 26  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(26,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.004) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 26  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(26,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 26  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(26, u'pl-pl')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 26  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(26, u'pl')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 26  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(26, u'pl%')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 26  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(26, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.001) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:39:50 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 3  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(3,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 3  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(3,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(3, u'pl-pl')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(3, u'pl')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(3, u'pl%')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.005) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.002) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:39:50 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 27  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(27,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 27  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(27,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(27, u'pl-pl')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(27, u'pl')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(27, u'pl%')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:39:50 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.015) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:50.380924 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:50.380924')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:50.405598 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:50.405598')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:50.430274 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:50.430274')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.020) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:50.459078 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:50.459078')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:50.497219 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:50.497219')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:50.510504 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:50.510504')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.032) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:50.537252 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:50.537252')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:50.667200 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:50.667200')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:50.698065 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:50.698065')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.001) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.018) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:50.729301 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:50.729301')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:50.756037 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:50.756037')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:50.778127 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:50.778127')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:50.817039 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:50.817039')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.016) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:50.840322 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:50.840322')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.005) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.020) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:50.871970 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:50.871970')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.021) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:50.907233 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:50.907233')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:50.953894 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:50.953894')
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:50 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:50.979474 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:50.979474')
Tue, 10 Jan 2012 06:39:51 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:51 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:51.020436 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:51.020436')
Tue, 10 Jan 2012 06:39:51 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:51 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:51.044079 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:51.044079')
Tue, 10 Jan 2012 06:39:51 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:51 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:51.065976 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:51.065976')
Tue, 10 Jan 2012 06:39:51 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:51 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:51.084127 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:51.084127')
Tue, 10 Jan 2012 06:39:51 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:51 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:51.113439 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:51.113439')
Tue, 10 Jan 2012 06:39:51 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:51 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:51.129204 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:51.129204')
Tue, 10 Jan 2012 06:39:51 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:51 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:51.186448 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:51.186448')
Tue, 10 Jan 2012 06:39:51 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:51 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:51.200290 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:51.200290')
Tue, 10 Jan 2012 06:39:51 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:39:51 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:39:51.219425 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:39:51.219425')
Tue, 10 Jan 2012 06:39:51 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.015) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:02.684299 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:02.684299')
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.005) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PRODUCT  AND "livesettings_setting"."key" = MEASUREMENT_SYSTEM ); args=(1, 1, 'PRODUCT', 'MEASUREMENT_SYSTEM')
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 44  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(44,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "product_product_related_items" ON ("product_product"."id" = "product_product_related_items"."to_product_id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product_related_items"."from_product_id" = 44  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=(44,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "product_product_also_purchased" ON ("product_product"."id" = "product_product_also_purchased"."to_product_id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product_also_purchased"."from_product_id" = 44  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=(44,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE "product_productattribute"."product_id" = 44  ORDER BY "product_attributeoption"."sort_order" ASC; args=(44,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE "product_price"."product_id" = 44  ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(44,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.001) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 44  ORDER BY "product_productimage"."sort" ASC; args=(44,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = price  AND "django_content_type"."app_label" = product ); args=('price', 'product')
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = productimage  AND "django_content_type"."app_label" = product ); args=('productimage', 'product')
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "django_content_type"."id", "django_content_type"."name", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = product  AND "django_content_type"."app_label" = product ); args=('product', 'product')
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.001) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = 44 ; args=(u'44',)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:40:02.860982 ; args=(u'2012-01-03 06:40:02.860982',)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:40:02.861010 ; args=(u'2012-01-09 06:40:02.861010',)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:40:02.861028 ; args=(u'2012-01-10 05:40:02.861028',)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" ORDER BY "django_site"."domain" ASC; args=()
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=()
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.006) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:40:02 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass"; args=()
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=()
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=()
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Tue, 10 Jan 2012 06:40:03 satchmo_utils.widgets DEBUG    value: <class 'decimal.Decimal'>
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = THUMBNAIL  AND "livesettings_setting"."key" = IMAGE_QUALITY ); args=(1, 1, 'THUMBNAIL', 'IMAGE_QUALITY')
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = THUMBNAIL  AND "livesettings_longsetting"."key" = IMAGE_QUALITY ); args=(1, 1, 'THUMBNAIL', 'IMAGE_QUALITY')
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:03.561241 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:03.561241')
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:03.591721 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:03.591721')
Tue, 10 Jan 2012 06:40:03 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.013) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:12.335915 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:12.335915')
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 44  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "product_product_related_items" ON ("product_product"."id" = "product_product_related_items"."to_product_id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product_related_items"."from_product_id" = 44  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "product_product_also_purchased" ON ("product_product"."id" = "product_product_also_purchased"."to_product_id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product_also_purchased"."from_product_id" = 44  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") WHERE "product_category"."id" IN (8) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(8,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.002) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "django_site" WHERE "django_site"."id" = 1  LIMIT 1; args=(1,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1  LIMIT 1; args=(1,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_product" WHERE ("product_product"."sku" = KDL-R-UR-01  AND "product_product"."site_id" = 1  AND NOT ("product_product"."id" = 44 )) LIMIT 1; args=(u'KDL-R-UR-01', 1, 44)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_product" WHERE ("product_product"."site_id" = 1  AND "product_product"."slug" = kartka-urodzinowa-1  AND NOT ("product_product"."id" = 44 )) LIMIT 1; args=(1, u'kartka-urodzinowa-1', 44)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE "product_price"."product_id" = 44  ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 44  ORDER BY "product_productimage"."sort" ASC; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE "product_price"."id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.002) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."id" = 36 ; args=(36,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_product" WHERE "product_product"."id" = 44  LIMIT 1; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.002) UPDATE "product_product" SET "site_id" = 1, "name" = Kartka Urodzinowa, "slug" = kartka-urodzinowa-1, "sku" = KDL-R-UR-01, "short_description" = Kartka Urodzinowa, "description" = Kartka Urodzinowa, "items_in_stock" = 50.000000, "meta" = , "date_added" = 2012-01-10, "active" = True, "featured" = True, "ordering" = 0, "weight" = NULL, "weight_units" = , "length" = NULL, "length_units" = , "width" = NULL, "width_units" = , "height" = NULL, "height_units" = , "total_sold" = 0.000000, "taxable" = True, "taxClass_id" = 1, "shipclass" = DEFAULT WHERE "product_product"."id" = 44 ; args=(1, u'Kartka Urodzinowa', u'kartka-urodzinowa-1', u'KDL-R-UR-01', u'Kartka Urodzinowa', u'Kartka Urodzinowa', u'50.000000', u'', '2012-01-10', True, True, 0, u'', u'', u'', u'', u'0.000000', True, 1, u'DEFAULT', 44)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.003) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.002) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-urodzinowa-1  AND "product_productpricelookup"."siteid" = 1 ); args=(u'kartka-urodzinowa-1', 1)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (18); args=(18,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 44  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(44, '2012-01-10')
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, None, None, kartka-urodzinowa-1, 3.500000, 1.000000, True, True, 50.000000); args=(1, None, None, u'kartka-urodzinowa-1', u'3.500000', u'1.000000', True, True, u'50.000000')
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_product_category"."id", "product_product_category"."product_id", "product_product_category"."category_id" FROM "product_product_category" WHERE "product_product_category"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) DELETE FROM "product_product_category" WHERE "id" IN (97); args=(97,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_product_category"."category_id" FROM "product_product_category" WHERE ("product_product_category"."product_id" = 44  AND "product_product_category"."category_id" IN (8)); args=(44, 8)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) INSERT INTO "product_product_category" ("product_id", "category_id") VALUES (44, 8); args=(44, 8)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_product_related_items"."id", "product_product_related_items"."from_product_id", "product_product_related_items"."to_product_id" FROM "product_product_related_items" WHERE "product_product_related_items"."from_product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_product_related_items"."id", "product_product_related_items"."from_product_id", "product_product_related_items"."to_product_id" FROM "product_product_related_items" WHERE "product_product_related_items"."to_product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_product_also_purchased"."id", "product_product_also_purchased"."from_product_id", "product_product_also_purchased"."to_product_id" FROM "product_product_also_purchased" WHERE "product_product_also_purchased"."from_product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_product_also_purchased"."id", "product_product_also_purchased"."from_product_id", "product_product_also_purchased"."to_product_id" FROM "product_product_also_purchased" WHERE "product_product_also_purchased"."to_product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE "product_productattribute"."product_id" = 44  ORDER BY "product_attributeoption"."sort_order" ASC; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE "product_price"."id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 44  AND "product_price"."quantity" = 1  AND "product_price"."expires" IS NULL AND NOT ("product_price"."id" = 26 )); args=(44, Decimal('1'), 26)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_price" WHERE "product_price"."id" = 26  LIMIT 1; args=(26,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) UPDATE "product_price" SET "product_id" = 44, "price" = 3.500000, "quantity" = 1.000000, "expires" = NULL WHERE "product_price"."id" = 26 ; args=(44, u'3.500000', u'1.000000', 26)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-urodzinowa-1  AND "product_productpricelookup"."siteid" = 1 ); args=(u'kartka-urodzinowa-1', 1)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (48); args=(48,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 44  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(44, '2012-01-10')
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, None, None, kartka-urodzinowa-1, 3.500000, 1.000000, True, True, 50.000000); args=(1, None, None, u'kartka-urodzinowa-1', u'3.500000', u'1.000000', True, True, u'50.000000')
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.001) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."id" = 36 ; args=(36,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) INSERT INTO "django_admin_log" ("action_time", "user_id", "content_type_id", "object_id", "object_repr", "action_flag", "change_message") VALUES (2012-01-10 06:40:12.624985, 1, 49, 44, Kartka Urodzinowa, 2, Zmieniono featured Zmieniono price w Cena "3.50".); args=(u'2012-01-10 06:40:12.624985', 1, 49, u'44', u'Kartka Urodzinowa', 2, u'Zmieniono featured Zmieniono price w Cena "3.50".')
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:12.671371 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:12.671371')
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_product"; args=()
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=()
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.001) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.006) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.004) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" ASC; args=()
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = product ; args=(u'product',)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:40:12.777943 ; args=(u'2012-01-03 06:40:12.777943',)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:40:12.777959 ; args=(u'2012-01-09 06:40:12.777959',)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:40:12.777964 ; args=(u'2012-01-10 05:40:12.777964',)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.002) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 2  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(2, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 5  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(5, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 6  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(6, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 7 ; args=(7,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 7 ; args=(7,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 7 ; args=(7,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 7  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(7, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 8  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(8, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 9 ; args=(9,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 9 ; args=(9,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 9 ; args=(9,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 9  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(9, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 10 ; args=(10,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 10 ; args=(10,)
Tue, 10 Jan 2012 06:40:12 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 10 ; args=(10,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 10  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(10, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 13 ; args=(13,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 13 ; args=(13,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 13 ; args=(13,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 13  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(13, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 14 ; args=(14,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 14 ; args=(14,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 14 ; args=(14,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 14 ; args=(14,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 14  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(14, '2012-01-10')
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 14  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(14,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 14  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(14, '2012-01-10')
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 14  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(14,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 15 ; args=(15,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 15 ; args=(15,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 15 ; args=(15,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 15 ; args=(15,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 15  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(15, '2012-01-10')
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 15  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(15,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 15  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(15, '2012-01-10')
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.003) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 15  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(15,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 16 ; args=(16,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 16 ; args=(16,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 16 ; args=(16,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 16 ; args=(16,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 16  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(16, '2012-01-10')
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.002) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 16  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(16,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 16  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(16, '2012-01-10')
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 16  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(16,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 17 ; args=(17,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 17 ; args=(17,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 17 ; args=(17,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 17 ; args=(17,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 17  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(17, '2012-01-10')
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.003) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(17,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 17  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(17, '2012-01-10')
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(17,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 18 ; args=(18,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 18 ; args=(18,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 18 ; args=(18,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 18 ; args=(18,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 18  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(18, '2012-01-10')
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.002) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(18,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 18  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(18, '2012-01-10')
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.005) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.002) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(18,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 19 ; args=(19,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 19 ; args=(19,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.003) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 19 ; args=(19,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 19 ; args=(19,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 19  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(19, '2012-01-10')
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 19  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(19,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 19  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(19, '2012-01-10')
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 19  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(19,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 20  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(20, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 21 ; args=(21,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 21 ; args=(21,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 21 ; args=(21,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 21  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(21, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.001) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 22  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(22, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 23 ; args=(23,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 23 ; args=(23,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.001) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 23 ; args=(23,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 23 ; args=(23,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 23  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(23, '2012-01-10')
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.001) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 23  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(23,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 23  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(23, '2012-01-10')
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 23  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(23,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 24 ; args=(24,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 24 ; args=(24,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.004) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 24 ; args=(24,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 24 ; args=(24,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 24  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(24, '2012-01-10')
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.002) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 24  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(24,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 24  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(24, '2012-01-10')
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 24  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(24,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.001) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 25  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(25, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 26  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(26, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 28 ; args=(28,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 28 ; args=(28,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 28 ; args=(28,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 28  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(28, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 29  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(29, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 30 ; args=(30,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 30 ; args=(30,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 30 ; args=(30,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 30  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(30, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 31  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(31, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 32  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(32, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 33  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(33, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 34  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(34, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 35  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(35, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 36 ; args=(36,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 36 ; args=(36,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 36 ; args=(36,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 36  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(36, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 37 ; args=(37,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 37 ; args=(37,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 37 ; args=(37,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 37  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(37, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 38 ; args=(38,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 38 ; args=(38,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 38 ; args=(38,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 38  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(38, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 39 ; args=(39,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 39 ; args=(39,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 39 ; args=(39,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 39  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(39, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 40 ; args=(40,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 40 ; args=(40,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 40 ; args=(40,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 40  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(40, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 41 ; args=(41,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 41 ; args=(41,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 41 ; args=(41,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 41  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(41, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 42 ; args=(42,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 42 ; args=(42,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 42 ; args=(42,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.006) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 42  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(42, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.001) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.002) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 43  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(43, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.007) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 44  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(44, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 45  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(45, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 46  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(46, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 47  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(47, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 48  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(48, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.002) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 50  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(50, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 51  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(51, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 52  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(52, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 53  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(53, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 54 ; args=(54,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 54 ; args=(54,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 54 ; args=(54,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 54  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(54, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 55  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(55, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 56 ; args=(56,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 56 ; args=(56,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 56 ; args=(56,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 56  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(56, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 57 ; args=(57,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 57 ; args=(57,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 57 ; args=(57,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 57  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(57, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 58 ; args=(58,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 58 ; args=(58,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 58 ; args=(58,)
Tue, 10 Jan 2012 06:40:13 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 58  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(58, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:14 django.db.backends DEBUG    (0.015) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:14.546303 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:14.546303')
Tue, 10 Jan 2012 06:40:14 django.db.backends DEBUG    (0.001) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:15.524343 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:15.524343')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.001) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."site_id" = 1  AND "product_product"."featured" = True ); args=(True, 1, True)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.001) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.005) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" =  ; args=(u'',)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:40:15.568367 ; args=(u'2012-01-03 06:40:15.568367',)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:40:15.568389 ; args=(u'2012-01-09 06:40:15.568389',)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:40:15.568401 ; args=(u'2012-01-10 05:40:15.568401',)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 5 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('5'))
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.005) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_product"."active" = True  AND "product_product"."site_id" = 1  AND "product_product"."featured" = True ) ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC LIMIT 7; args=(True, 1, True)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 22  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(22,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 22  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(22,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 22  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(22, u'pl-pl')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 22  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(22, u'pl')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 22  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(22, u'pl%')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.002) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 22  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(22, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.002) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.001) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:15 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 2  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(2,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 2  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(2,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 2  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(2, u'pl-pl')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 2  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(2, u'pl')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 2  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(2, u'pl%')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 2  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(2, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:15 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 44  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(44,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 44  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(44,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 44  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(44, u'pl-pl')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 44  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(44, u'pl')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 44  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(44, u'pl%')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 44  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(44, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.001) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.001) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:15 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 25  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(25,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 25  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(25,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(25, u'pl-pl')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(25, u'pl')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(25, u'pl%')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 25  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(25, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.001) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:15 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 26  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(26,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.008) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 26  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(26,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 26  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(26, u'pl-pl')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 26  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(26, u'pl')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 26  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(26, u'pl%')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.002) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 26  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(26, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.004) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:15 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 3  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(3,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 3  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(3,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(3, u'pl-pl')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(3, u'pl')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.004) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(3, u'pl%')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.004) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.001) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:15 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 27  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(27,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 27  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(27,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(27, u'pl-pl')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(27, u'pl')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(27, u'pl%')
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:15 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:15 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.043391 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.043391')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.067234 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.067234')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.018) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.089561 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.089561')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.006) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.134669 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.134669')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.165859 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.165859')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.016) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.193907 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.193907')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.019) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.229438 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.229438')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.269095 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.269095')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.016) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.375652 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.375652')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.401689 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.401689')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.429953 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.429953')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.446431 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.446431')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.466669 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.466669')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.481784 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.481784')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.499672 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.499672')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.526506 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.526506')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.013) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.551003 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.551003')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.027) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.587088 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.587088')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.645683 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.645683')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.670608 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.670608')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.019) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.712665 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.712665')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.037) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.762589 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.762589')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.830309 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.830309')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.859495 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.859495')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.880959 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.880959')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.019) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.922664 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.922664')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.950646 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.950646')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.003) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:16.977020 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:16.977020')
Tue, 10 Jan 2012 06:40:16 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.016) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:27.235776 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:27.235776')
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.002) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.008) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 43  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(43,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "product_product_related_items" ON ("product_product"."id" = "product_product_related_items"."to_product_id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product_related_items"."from_product_id" = 43  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=(43,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "product_product_also_purchased" ON ("product_product"."id" = "product_product_also_purchased"."to_product_id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product_also_purchased"."from_product_id" = 43  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=(43,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE "product_productattribute"."product_id" = 43  ORDER BY "product_attributeoption"."sort_order" ASC; args=(43,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE "product_price"."product_id" = 43  ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(43,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.001) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 43  ORDER BY "product_productimage"."sort" ASC; args=(43,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = 43 ; args=(u'43',)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:40:27.379984 ; args=(u'2012-01-03 06:40:27.379984',)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:40:27.379999 ; args=(u'2012-01-09 06:40:27.379999',)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:40:27.380005 ; args=(u'2012-01-10 05:40:27.380005',)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" ORDER BY "django_site"."domain" ASC; args=()
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.001) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=()
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.008) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.009) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass"; args=()
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.002) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=()
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=()
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "product_attributeoption"."id", "product_attributeoption"."description", "product_attributeoption"."name", "product_attributeoption"."validation", "product_attributeoption"."sort_order", "product_attributeoption"."error_message" FROM "product_attributeoption" ORDER BY "product_attributeoption"."sort_order" ASC; args=()
Tue, 10 Jan 2012 06:40:27 satchmo_utils.widgets DEBUG    value: <class 'decimal.Decimal'>
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.007) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:27 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:28 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:28.112388 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:28.112388')
Tue, 10 Jan 2012 06:40:28 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:28 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:28.141966 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:28.141966')
Tue, 10 Jan 2012 06:40:28 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:39.738753 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:39.738753')
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.002) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 43  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(43,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "product_product_related_items" ON ("product_product"."id" = "product_product_related_items"."to_product_id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product_related_items"."from_product_id" = 43  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=(43,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "product_product_also_purchased" ON ("product_product"."id" = "product_product_also_purchased"."to_product_id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE "product_product_also_purchased"."from_product_id" = 43  ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=(43,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") WHERE "product_category"."id" IN (9) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(9,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "django_site" WHERE "django_site"."id" = 1  LIMIT 1; args=(1,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1  LIMIT 1; args=(1,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_product" WHERE ("product_product"."sku" = KDL-RD-IM-03  AND "product_product"."site_id" = 1  AND NOT ("product_product"."id" = 43 )) LIMIT 1; args=(u'KDL-RD-IM-03', 1, 43)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_product" WHERE ("product_product"."site_id" = 1  AND "product_product"."slug" = kartka-imieninowa-3  AND NOT ("product_product"."id" = 43 )) LIMIT 1; args=(1, u'kartka-imieninowa-3', 43)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE "product_price"."product_id" = 43  ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(43,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 43  ORDER BY "product_productimage"."sort" ASC; args=(43,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE "product_price"."id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_product" WHERE "product_product"."id" = 43  LIMIT 1; args=(43,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.005) UPDATE "product_product" SET "site_id" = 1, "name" = Kartka Imieninowa, "slug" = kartka-imieninowa-3, "sku" = KDL-RD-IM-03, "short_description" = Kartka Imieninowa, "description" = Kartka Imieninowa, "items_in_stock" = 50.000000, "meta" = , "date_added" = 2012-01-10, "active" = True, "featured" = True, "ordering" = 0, "weight" = NULL, "weight_units" = , "length" = NULL, "length_units" = , "width" = NULL, "width_units" = , "height" = NULL, "height_units" = , "total_sold" = 0.000000, "taxable" = True, "taxClass_id" = 1, "shipclass" = DEFAULT WHERE "product_product"."id" = 43 ; args=(1, u'Kartka Imieninowa', u'kartka-imieninowa-3', u'KDL-RD-IM-03', u'Kartka Imieninowa', u'Kartka Imieninowa', u'50.000000', u'', '2012-01-10', True, True, 0, u'', u'', u'', u'', u'0.000000', True, 1, u'DEFAULT', 43)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.001) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-imieninowa-3  AND "product_productpricelookup"."siteid" = 1 ); args=(u'kartka-imieninowa-3', 1)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (6); args=(6,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 43  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(43, '2012-01-10')
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, None, None, kartka-imieninowa-3, 4.100000, 1.000000, True, True, 50.000000); args=(1, None, None, u'kartka-imieninowa-3', u'4.100000', u'1.000000', True, True, u'50.000000')
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "product_product_category"."id", "product_product_category"."product_id", "product_product_category"."category_id" FROM "product_product_category" WHERE "product_product_category"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) DELETE FROM "product_product_category" WHERE "id" IN (96); args=(96,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "product_product_category"."category_id" FROM "product_product_category" WHERE ("product_product_category"."product_id" = 43  AND "product_product_category"."category_id" IN (9)); args=(43, 9)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) INSERT INTO "product_product_category" ("product_id", "category_id") VALUES (43, 9); args=(43, 9)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "product_product_related_items"."id", "product_product_related_items"."from_product_id", "product_product_related_items"."to_product_id" FROM "product_product_related_items" WHERE "product_product_related_items"."from_product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "product_product_related_items"."id", "product_product_related_items"."from_product_id", "product_product_related_items"."to_product_id" FROM "product_product_related_items" WHERE "product_product_related_items"."to_product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "product_product_also_purchased"."id", "product_product_also_purchased"."from_product_id", "product_product_also_purchased"."to_product_id" FROM "product_product_also_purchased" WHERE "product_product_also_purchased"."from_product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "product_product_also_purchased"."id", "product_product_also_purchased"."from_product_id", "product_product_also_purchased"."to_product_id" FROM "product_product_also_purchased" WHERE "product_product_also_purchased"."to_product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE "product_productattribute"."product_id" = 43  ORDER BY "product_attributeoption"."sort_order" ASC; args=(43,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE "product_price"."id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 43  AND "product_price"."quantity" = 1  AND "product_price"."expires" IS NULL AND NOT ("product_price"."id" = 25 )); args=(43, Decimal('1'), 25)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT (1) AS "a" FROM "product_price" WHERE "product_price"."id" = 25  LIMIT 1; args=(25,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) UPDATE "product_price" SET "product_id" = 43, "price" = 4.100000, "quantity" = 1.000000, "expires" = NULL WHERE "product_price"."id" = 25 ; args=(43, u'4.100000', u'1.000000', 25)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "product_productpricelookup"."id", "product_productpricelookup"."siteid", "product_productpricelookup"."key", "product_productpricelookup"."parentid", "product_productpricelookup"."productslug", "product_productpricelookup"."price", "product_productpricelookup"."quantity", "product_productpricelookup"."active", "product_productpricelookup"."discountable", "product_productpricelookup"."items_in_stock" FROM "product_productpricelookup" WHERE ("product_productpricelookup"."productslug" = kartka-imieninowa-3  AND "product_productpricelookup"."siteid" = 1 ); args=(u'kartka-imieninowa-3', 1)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) DELETE FROM "product_productpricelookup" WHERE "id" IN (49); args=(49,)
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires", "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_price" INNER JOIN "product_product" ON ("product_price"."product_id" = "product_product"."id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_price"."product_id" = 43  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))) ORDER BY "product_price"."expires" ASC, "product_price"."quantity" DESC; args=(43, '2012-01-10')
Tue, 10 Jan 2012 06:40:39 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.005) INSERT INTO "product_productpricelookup" ("siteid", "key", "parentid", "productslug", "price", "quantity", "active", "discountable", "items_in_stock") VALUES (1, None, None, kartka-imieninowa-3, 4.100000, 1.000000, True, True, 50.000000); args=(1, None, None, u'kartka-imieninowa-3', u'4.100000', u'1.000000', True, True, u'50.000000')
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.001) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) INSERT INTO "django_admin_log" ("action_time", "user_id", "content_type_id", "object_id", "object_repr", "action_flag", "change_message") VALUES (2012-01-10 06:40:40.019520, 1, 49, 43, Kartka Imieninowa, 2, Zmieniono featured Zmieniono price w Cena "4.10".); args=(u'2012-01-10 06:40:40.019520', 1, 49, u'43', u'Kartka Imieninowa', 2, u'Zmieniono featured Zmieniono price w Cena "4.10".')
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:40.104051 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:40.104051')
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_product"; args=()
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=()
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.001) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.001) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.004) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass", "django_site"."id", "django_site"."domain", "django_site"."name" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") ORDER BY "django_site"."domain" ASC; args=()
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.001) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = product ; args=(u'product',)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.002) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:40:40.258759 ; args=(u'2012-01-03 06:40:40.258759',)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:40:40.258777 ; args=(u'2012-01-09 06:40:40.258777',)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:40:40.258782 ; args=(u'2012-01-10 05:40:40.258782',)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 2  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(2, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.005) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 5  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(5, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 6  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(6, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 7 ; args=(7,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 7 ; args=(7,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 7 ; args=(7,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 7  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(7, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.005) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.002) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 8  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(8, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.003) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 9 ; args=(9,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 9 ; args=(9,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 9 ; args=(9,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 9  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(9, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 10 ; args=(10,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 10 ; args=(10,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 10 ; args=(10,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 10  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(10, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 13 ; args=(13,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 13 ; args=(13,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 13 ; args=(13,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 13  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(13, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 14 ; args=(14,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 14 ; args=(14,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 14 ; args=(14,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 14 ; args=(14,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 14  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(14, '2012-01-10')
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 14  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(14,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 14  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(14, '2012-01-10')
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 14  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(14,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 15 ; args=(15,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 15 ; args=(15,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 15 ; args=(15,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 15 ; args=(15,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 15  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(15, '2012-01-10')
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 15  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(15,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 15  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(15, '2012-01-10')
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.001) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 15  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(15,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 16 ; args=(16,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 16 ; args=(16,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 16 ; args=(16,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 16 ; args=(16,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 16  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(16, '2012-01-10')
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.002) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 16  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(16,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 16  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(16, '2012-01-10')
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 16  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(16,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 17 ; args=(17,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 17 ; args=(17,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 17 ; args=(17,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 17 ; args=(17,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 17  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(17, '2012-01-10')
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(17,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 17  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(17, '2012-01-10')
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 17  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(17,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 18 ; args=(18,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 18 ; args=(18,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 18 ; args=(18,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 18 ; args=(18,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 18  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(18, '2012-01-10')
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(18,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 18  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(18, '2012-01-10')
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 18  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(18,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 19 ; args=(19,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 19 ; args=(19,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 19 ; args=(19,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 19 ; args=(19,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 19  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(19, '2012-01-10')
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.005) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 19  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(19,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 19  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(19, '2012-01-10')
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 4  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(4, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 19  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(19,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 20  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(20, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 21 ; args=(21,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 21 ; args=(21,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 21 ; args=(21,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 21  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(21, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 22  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(22, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 23 ; args=(23,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 23 ; args=(23,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 23 ; args=(23,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 23 ; args=(23,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 23  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(23, '2012-01-10')
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 23  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(23,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 23  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(23, '2012-01-10')
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.002) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 23  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(23,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 24 ; args=(24,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 24 ; args=(24,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 24 ; args=(24,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 24 ; args=(24,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 24  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(24, '2012-01-10')
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 24  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(24,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_price" WHERE ("product_price"."product_id" = 24  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL))); args=(24, '2012-01-10')
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_option"."id", "product_option"."option_group_id", "product_option"."name", "product_option"."value", "product_option"."price_change", "product_option"."sort_order" FROM "product_option" INNER JOIN "configurable_productvariation_options" ON ("product_option"."id" = "configurable_productvariation_options"."option_id") INNER JOIN "product_optiongroup" ON ("product_option"."option_group_id" = "product_optiongroup"."id") WHERE "configurable_productvariation_options"."productvariation_id" = 24  ORDER BY "product_optiongroup"."sort_order" ASC, "product_optiongroup"."name" ASC, "product_option"."sort_order" ASC, "product_option"."name" ASC; args=(24,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.001) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 25  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(25, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 26  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(26, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 28 ; args=(28,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 28 ; args=(28,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 28 ; args=(28,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 28  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(28, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 29  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(29, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:40 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 30 ; args=(30,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 30 ; args=(30,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 30 ; args=(30,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 30  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(30, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 31 ; args=(31,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.002) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 31  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(31, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 32 ; args=(32,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 32  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(32, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 33 ; args=(33,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 33  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(33, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 34 ; args=(34,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 34  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(34, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 35 ; args=(35,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 35  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(35, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.002) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 36 ; args=(36,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 36 ; args=(36,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 36 ; args=(36,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.017) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 36  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(36, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 37 ; args=(37,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 37 ; args=(37,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 37 ; args=(37,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 37  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(37, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 38 ; args=(38,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 38 ; args=(38,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 38 ; args=(38,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 38  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(38, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 39 ; args=(39,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 39 ; args=(39,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 39 ; args=(39,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 39  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(39, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 40 ; args=(40,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 40 ; args=(40,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 40 ; args=(40,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 40  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(40, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 41 ; args=(41,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.002) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 41 ; args=(41,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 41 ; args=(41,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 41  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(41, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 42 ; args=(42,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 42 ; args=(42,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 42 ; args=(42,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 42  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(42, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 43  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(43, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.007) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 44  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(44, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 45  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(45, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 46  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(46, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 47  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(47, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 48  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(48, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 50  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(50, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 51  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(51, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.006) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 52 ; args=(52,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 52  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(52, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 53 ; args=(53,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 53  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(53, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 54 ; args=(54,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 54 ; args=(54,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 54 ; args=(54,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 54  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(54, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.007) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 55 ; args=(55,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.004) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 55  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(55, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 56 ; args=(56,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 56 ; args=(56,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 56 ; args=(56,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 56  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(56, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 57 ; args=(57,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.005) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 57 ; args=(57,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 57 ; args=(57,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 57  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(57, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 58 ; args=(58,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 58 ; args=(58,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.008) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 58 ; args=(58,)
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 58  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(58, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.017) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:41.941642 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:41.941642')
Tue, 10 Jan 2012 06:40:41 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:43.214103 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:43.214103')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."site_id" = 1  AND "product_product"."featured" = True ); args=(True, 1, True)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" =  ; args=(u'',)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:40:43.262398 ; args=(u'2012-01-03 06:40:43.262398',)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:40:43.262414 ; args=(u'2012-01-09 06:40:43.262414',)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:40:43.262419 ; args=(u'2012-01-10 05:40:43.262419',)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.001) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 5 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('5'))
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_product"."active" = True  AND "product_product"."site_id" = 1  AND "product_product"."featured" = True ) ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC LIMIT 8; args=(True, 1, True)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 22  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(22,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 22  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(22,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 22  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(22, u'pl-pl')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 22  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(22, u'pl')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 22  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(22, u'pl%')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 22  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(22, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:43 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 2  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(2,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 2  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(2,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 2  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(2, u'pl-pl')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 2  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(2, u'pl')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 2  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(2, u'pl%')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 2  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(2, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:43 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 43  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(43,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 43  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(43,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 43  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(43, u'pl-pl')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 43  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(43, u'pl')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 43  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(43, u'pl%')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 43  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(43, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.002) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:43 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 44  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(44,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 44  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(44,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 44  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(44, u'pl-pl')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 44  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(44, u'pl')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 44  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(44, u'pl%')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 44  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(44, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:43 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 25  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(25,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 25  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(25,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(25, u'pl-pl')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(25, u'pl')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(25, u'pl%')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 25  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(25, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.002) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.001) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:43 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 26  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(26,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 26  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(26,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.004) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 26  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(26, u'pl-pl')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 26  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(26, u'pl')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 26  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(26, u'pl%')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 26  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(26, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.001) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.004) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:43 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 3  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(3,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 3  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(3,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(3, u'pl-pl')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(3, u'pl')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(3, u'pl%')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:43 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 27  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(27,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 27  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(27,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(27, u'pl-pl')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(27, u'pl')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(27, u'pl%')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.001) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:40:43 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:43.911089 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:43.911089')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:43.941998 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:43.941998')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:43.974121 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:43.974121')
Tue, 10 Jan 2012 06:40:43 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.005181 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.005181')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.002) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.040655 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.040655')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.077759 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.077759')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.122136 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.122136')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.139453 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.139453')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.001) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.204374 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.204374')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.029) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.023) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.264054 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.264054')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.015) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.308107 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.308107')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.041) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.349821 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.349821')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.012) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.441380 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.441380')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.031) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.467413 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.467413')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.002) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.013) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.513386 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.513386')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.013) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.544592 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.544592')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.570081 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.570081')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.600829 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.600829')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.621911 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.621911')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.651577 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.651577')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.006) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.015) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.813754 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.813754')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.010) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.849013 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.849013')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.016) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.877387 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.877387')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.009) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.921912 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.921912')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.943109 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.943109')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.965683 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.965683')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.014) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.978622 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.978622')
Tue, 10 Jan 2012 06:40:44 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:45 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:44.997366 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:44.997366')
Tue, 10 Jan 2012 06:40:45 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:45 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:45.021394 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:45.021394')
Tue, 10 Jan 2012 06:40:45 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:40:49 django.db.backends DEBUG    (0.013) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:40:49.654373 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:40:49.654373')
Tue, 10 Jan 2012 06:40:49 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.015) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:44:55.529973 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:44:55.529973')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.010) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."slug" = kartka-imieninowa-3  AND "product_product"."site_id" = 1 ); args=(True, u'kartka-imieninowa-3', 1)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = TAX  AND "livesettings_setting"."key" = DEFAULT_VIEW_TAX ); args=(1, 1, 'TAX', 'DEFAULT_VIEW_TAX')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.004) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2012-01-10  AND "product_discount"."endDate" > 2012-01-10  AND ("product_discount_valid_products"."product_id" IN (43) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2012-01-10', '2012-01-10', 43, True)
Tue, 10 Jan 2012 06:44:55 root         DEBUG    subtypes = ()
Tue, 10 Jan 2012 06:44:55 product.views DEBUG    finding product template: ['product/product.html']
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "shop_config"."site_id", "shop_config"."store_name", "shop_config"."store_description", "shop_config"."store_email", "shop_config"."street1", "shop_config"."street2", "shop_config"."city", "shop_config"."state", "shop_config"."postal_code", "shop_config"."country_id", "shop_config"."phone", "shop_config"."in_country_only", "shop_config"."sales_country_id" FROM "shop_config" WHERE "shop_config"."site_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_discount" WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."site_id" = 1  AND "product_discount"."startDate" <= 2012-01-10  AND "product_discount"."endDate" > 2012-01-10 ); args=(True, True, 1, '2012-01-10', '2012-01-10')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = kartka-imieninowa-3 ; args=(u'kartka-imieninowa-3',)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:44:55.646676 ; args=(u'2012-01-03 06:44:55.646676',)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:44:55.646691 ; args=(u'2012-01-09 06:44:55.646691',)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:44:55.646697 ; args=(u'2012-01-10 05:44:55.646697',)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = page_head ; args=(u'page_head',)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "app_plugins_plugin"."id", "app_plugins_plugin"."point_id", "app_plugins_plugin"."label", "app_plugins_plugin"."index", "app_plugins_plugin"."registered", "app_plugins_plugin"."status", "app_plugins_plugin"."required", "app_plugins_plugin"."template", "app_plugins_plugin"."_order" FROM "app_plugins_plugin" WHERE "app_plugins_plugin"."label" = satchmo_toolbar.page_head ; args=(u'satchmo_toolbar.page_head',)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = page_top ; args=(u'page_top',)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.003) SELECT "app_plugins_plugin"."id", "app_plugins_plugin"."point_id", "app_plugins_plugin"."label", "app_plugins_plugin"."index", "app_plugins_plugin"."registered", "app_plugins_plugin"."status", "app_plugins_plugin"."required", "app_plugins_plugin"."template", "app_plugins_plugin"."_order" FROM "app_plugins_plugin" WHERE "app_plugins_plugin"."label" = satchmo_toolbar.page_top ; args=(u'satchmo_toolbar.page_top',)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = satchmo_toolbar ; args=(u'satchmo_toolbar',)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = SHOP  AND "livesettings_setting"."key" = CART_QTY ); args=(1, 1, 'SHOP', 'CART_QTY')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = SHOP  AND "livesettings_longsetting"."key" = CART_QTY ); args=(1, 1, 'SHOP', 'CART_QTY')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 5 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('5'))
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 43  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(43,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 43  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(43,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."id" = 9 ); args=(True, 9)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.001) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T3 ON ("product_category"."parent_id" = T3."id") WHERE ("product_category"."is_active" = True  AND "product_category"."site_id" = 1  AND T3."id" IS NULL) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(True, 1)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 23  AND "product_category"."is_active" = True ); args=(23, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 23  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(23, u'pl-pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 23  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(23, u'pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 23  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(23, u'pl%')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 20  AND "product_category"."is_active" = True ); args=(20, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.009) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 20  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(20, u'pl-pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 20  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(20, u'pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 20  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(20, u'pl%')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.003) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 20  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(20, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 21  AND "product_category"."is_active" = True ); args=(21, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 21  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(21, u'pl-pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 21  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(21, u'pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 21  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(21, u'pl%')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 22  AND "product_category"."is_active" = True ); args=(22, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 20 ; args=(20,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 22  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(22, u'pl-pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 22  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(22, u'pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 22  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(22, u'pl%')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 24  AND "product_category"."is_active" = True ); args=(24, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 24  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(24, u'pl-pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 24  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(24, u'pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 24  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(24, u'pl%')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 1  AND "product_category"."is_active" = True ); args=(1, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 1  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(1, u'pl-pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 1  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(1, u'pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 1  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(1, u'pl%')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 1  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(1, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 2  AND "product_category"."is_active" = True ); args=(2, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 2  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(2, u'pl-pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 2  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(2, u'pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 2  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(2, u'pl%')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 4  AND "product_category"."is_active" = True ); args=(4, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 4  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(4, u'pl-pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 4  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(4, u'pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 4  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(4, u'pl%')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 4  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(4, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 10  AND "product_category"."is_active" = True ); args=(10, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 10  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(10, u'pl-pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 10  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(10, u'pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 10  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(10, u'pl%')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 9  AND "product_category"."is_active" = True ); args=(9, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 9  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(9, u'pl-pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 9  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(9, u'pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 9  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(9, u'pl%')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 19  AND "product_category"."is_active" = True ); args=(19, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 19  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(19, u'pl-pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 19  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(19, u'pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 19  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(19, u'pl%')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 8  AND "product_category"."is_active" = True ); args=(8, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 8  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(8, u'pl-pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 8  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(8, u'pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 8  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(8, u'pl%')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 8  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(8, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 16  AND "product_category"."is_active" = True ); args=(16, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 16  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(16, u'pl-pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 16  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(16, u'pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 16  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(16, u'pl%')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 18  AND "product_category"."is_active" = True ); args=(18, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 18  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(18, u'pl-pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 18  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(18, u'pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 18  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(18, u'pl%')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 17  AND "product_category"."is_active" = True ); args=(17, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 17  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(17, u'pl-pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 17  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(17, u'pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 17  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(17, u'pl%')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 12  AND "product_category"."is_active" = True ); args=(12, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 12  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(12, u'pl-pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 12  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(12, u'pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 12  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(12, u'pl%')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 12  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(12, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 15  AND "product_category"."is_active" = True ); args=(15, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 15  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(15, u'pl-pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 15  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(15, u'pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 15  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(15, u'pl%')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 14  AND "product_category"."is_active" = True ); args=(14, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 14  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(14, u'pl-pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 14  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(14, u'pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 14  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(14, u'pl%')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 13  AND "product_category"."is_active" = True ); args=(13, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 12 ; args=(12,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 13  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(13, u'pl-pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 13  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(13, u'pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 13  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(13, u'pl%')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 11  AND "product_category"."is_active" = True ); args=(11, True)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 11  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(11, u'pl-pl')
Tue, 10 Jan 2012 06:44:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 11  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(11, u'pl')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 11  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(11, u'pl%')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 7  AND "product_category"."is_active" = True ); args=(7, True)
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 7  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(7, u'pl-pl')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 7  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(7, u'pl')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 7  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(7, u'pl%')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 3  AND "product_category"."is_active" = True ); args=(3, True)
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 3  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(3, u'pl-pl')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 3  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(3, u'pl')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 3  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(3, u'pl%')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 3  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(3, True)
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 6  AND "product_category"."is_active" = True ); args=(6, True)
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.001) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 6  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(6, u'pl-pl')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 6  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(6, u'pl')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 6  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(6, u'pl%')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_category" WHERE ("product_category"."parent_id" = 5  AND "product_category"."is_active" = True ); args=(5, True)
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 5  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(5, u'pl-pl')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 5  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(5, u'pl')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 5  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(5, u'pl%')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = sidebar_secondary_bottom ; args=(u'sidebar_secondary_bottom',)
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 43  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(43, u'pl-pl')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 43  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(43, u'pl')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 43  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(43, u'pl%')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 43  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(43, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = TAX  AND "livesettings_setting"."key" = TAX_AREA_ADDRESS ); args=(1, 1, 'TAX', 'TAX_AREA_ADDRESS')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = TAX  AND "livesettings_longsetting"."key" = TAX_AREA_ADDRESS ); args=(1, 1, 'TAX', 'TAX_AREA_ADDRESS')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:44:56 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.002) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 43  ORDER BY "product_productimage"."sort" ASC; args=(43,)
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productattribute" WHERE ("product_productattribute"."product_id" = 43  AND "product_productattribute"."languagecode" = pl-pl ); args=(43, 'pl-pl')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE ("product_productattribute"."product_id" = 43  AND ("product_productattribute"."languagecode" IS NULL OR "product_productattribute"."languagecode" =  )) ORDER BY "product_attributeoption"."sort_order" ASC; args=(43, '')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = product_add_buttons ; args=(u'product_add_buttons',)
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = product_form ; args=(u'product_form',)
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT "app_plugins_pluginpoint"."id", "app_plugins_pluginpoint"."label", "app_plugins_pluginpoint"."index", "app_plugins_pluginpoint"."registered", "app_plugins_pluginpoint"."status" FROM "app_plugins_pluginpoint" WHERE "app_plugins_pluginpoint"."label" = product_footer ; args=(u'product_footer',)
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.003) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = GOOGLE  AND "livesettings_setting"."key" = ANALYTICS ); args=(1, 1, 'GOOGLE', 'ANALYTICS')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = GOOGLE  AND "livesettings_longsetting"."key" = ANALYTICS ); args=(1, 1, 'GOOGLE', 'ANALYTICS')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:44:56.309489 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:44:56.309489')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:44:56.360415 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:44:56.360415')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:44:56.505023 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:44:56.505023')
Tue, 10 Jan 2012 06:44:56 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:45:44.132631 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:45:44.132631')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.006) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."slug" = birthday-cards  AND "product_category"."site_id" = 1 ); args=(True, u'birthday-cards', 1)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "django_site"."id", "django_site"."domain", "django_site"."name" FROM "django_site" WHERE "django_site"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "product_product_category" ON ("product_product"."id" = "product_product_category"."product_id") INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") LEFT OUTER JOIN "configurable_productvariation" ON ("product_product"."id" = "configurable_productvariation"."product_id") LEFT OUTER JOIN "configurable_configurableproduct" ON ("configurable_productvariation"."parent_id" = "configurable_configurableproduct"."product_id") WHERE ("product_product_category"."category_id" = 8  AND "product_product"."active" = True  AND "product_product"."site_id" = 1  AND "configurable_configurableproduct"."product_id" IS NULL) ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC; args=(8, True, 1)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2012-01-10  AND "product_discount"."endDate" > 2012-01-10  AND ("product_discount_valid_products"."product_id" IN (44, 45, 46, 47, 48, 49, 50, 51, 29, 25, 26, 28, 3, 27) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2012-01-10', '2012-01-10', 44, 45, 46, 47, 48, 49, 50, 51, 29, 25, 26, 28, 3, 27, True)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PRODUCT  AND "livesettings_setting"."key" = NUM_PAGINATED ); args=(1, 1, 'PRODUCT', 'NUM_PAGINATED')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PRODUCT  AND "livesettings_longsetting"."key" = NUM_PAGINATED ); args=(1, 1, 'PRODUCT', 'NUM_PAGINATED')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 8  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(8, True)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 16  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(16, True)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 18  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(18, True)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" LEFT OUTER JOIN "product_category" T2 ON ("product_category"."parent_id" = T2."id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") WHERE ("product_category"."parent_id" = 17  AND "product_category"."is_active" = True ) ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC; args=(17, True)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.009) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = birthday-cards ; args=(u'birthday-cards',)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:45:44.264696 ; args=(u'2012-01-03 06:45:44.264696',)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:45:44.264712 ; args=(u'2012-01-09 06:45:44.264712',)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:45:44.264718 ; args=(u'2012-01-10 05:45:44.264718',)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.002) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 5 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('5'))
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."id" = 8 ); args=(True, 8)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 8  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(8, u'pl-pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 8  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(8, u'pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 8  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(8, u'pl%')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categoryimage" WHERE "product_categoryimage"."category_id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categoryimage" WHERE "product_categoryimage"."category_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PRODUCT  AND "livesettings_setting"."key" = SHOW_NO_PHOTO_IN_CATEGORY ); args=(1, 1, 'PRODUCT', 'SHOW_NO_PHOTO_IN_CATEGORY')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PRODUCT  AND "livesettings_longsetting"."key" = SHOW_NO_PHOTO_IN_CATEGORY ); args=(1, 1, 'PRODUCT', 'SHOW_NO_PHOTO_IN_CATEGORY')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.001) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 44  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(44,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 44  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(44, u'pl-pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 44  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(44, u'pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 44  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(44, u'pl%')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 44  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(44, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.006) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.001) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:44 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 45  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(45,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 45  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(45, u'pl-pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 45  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(45, u'pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 45  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(45, u'pl%')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 45 ; args=(45,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.002) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 45  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(45, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:44 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 46  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(46,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 46  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(46, u'pl-pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 46  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(46, u'pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 46  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(46, u'pl%')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 46 ; args=(46,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 46  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(46, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.002) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.001) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:44 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 47  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(47,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 47  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(47, u'pl-pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 47  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(47, u'pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 47  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(47, u'pl%')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 47 ; args=(47,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 47  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(47, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:44 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 48  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(48,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 48  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(48, u'pl-pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 48  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(48, u'pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 48  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(48, u'pl%')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 48 ; args=(48,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 48  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(48, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:44 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 49  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(49,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 49  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(49, u'pl-pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.003) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 49  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(49, u'pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 49  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(49, u'pl%')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:44 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 50  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(50,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 50  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(50, u'pl-pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 50  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(50, u'pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 50  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(50, u'pl%')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 50  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(50, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:44 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.004) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 51  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(51,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 51  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(51, u'pl-pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 51  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(51, u'pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 51  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(51, u'pl%')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 51 ; args=(51,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 51  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(51, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:44 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 29  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(29,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 29  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(29, u'pl-pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 29  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(29, u'pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 29  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(29, u'pl%')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 29 ; args=(29,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 29  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(29, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 3 ); args=(176, 3)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:44 tax.area     DEBUG    Got rate [Kartka] = Kartka - Poland = 8.00%
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 25  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(25,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(25, u'pl-pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(25, u'pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(25, u'pl%')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 25  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(25, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:44 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 16  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(16, u'pl-pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 16  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(16, u'pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 16  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(16, u'pl%')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 18  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(18, u'pl-pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 18  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(18, u'pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 18  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(18, u'pl%')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 8 ; args=(8,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.002) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE "product_category"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 17  AND "product_categorytranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(17, u'pl-pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 17  AND "product_categorytranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(17, u'pl')
Tue, 10 Jan 2012 06:45:44 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_categorytranslation" WHERE ("product_categorytranslation"."category_id" = 17  AND "product_categorytranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(17, u'pl%')
Tue, 10 Jan 2012 06:45:45 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:45:45.029984 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:45:45.029984')
Tue, 10 Jan 2012 06:45:45 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:45 django.db.backends DEBUG    (0.016) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:45:45.066730 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:45:45.066730')
Tue, 10 Jan 2012 06:45:45 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:45 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:45:45.094470 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:45:45.094470')
Tue, 10 Jan 2012 06:45:45 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:45 django.db.backends DEBUG    (0.014) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:45:45.120705 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:45:45.120705')
Tue, 10 Jan 2012 06:45:45 django.db.backends DEBUG    (0.002) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:45 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:45:45.151464 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:45:45.151464')
Tue, 10 Jan 2012 06:45:45 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:45 django.db.backends DEBUG    (0.016) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:45:45.186461 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:45:45.186461')
Tue, 10 Jan 2012 06:45:45 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:45 django.db.backends DEBUG    (0.018) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:45:45.225951 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:45:45.225951')
Tue, 10 Jan 2012 06:45:45 django.db.backends DEBUG    (0.001) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:45 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:45:45.267175 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:45:45.267175')
Tue, 10 Jan 2012 06:45:45 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:45 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:45:45.278908 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:45:45.278908')
Tue, 10 Jan 2012 06:45:45 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:45 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:45:45.444608 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:45:45.444608')
Tue, 10 Jan 2012 06:45:45 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.013) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:45:55.117745 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:45:55.117745')
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."slug" = kartka-urodzinowa-7  AND "product_product"."site_id" = 1 ); args=(True, u'kartka-urodzinowa-7', 1)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2012-01-10  AND "product_discount"."endDate" > 2012-01-10  AND ("product_discount_valid_products"."product_id" IN (50) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2012-01-10', '2012-01-10', 50, True)
Tue, 10 Jan 2012 06:45:55 root         DEBUG    subtypes = ()
Tue, 10 Jan 2012 06:45:55 product.views DEBUG    finding product template: ['product/product.html']
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = kartka-urodzinowa-7 ; args=(u'kartka-urodzinowa-7',)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 50 ; args=(50,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:45:55.216911 ; args=(u'2012-01-03 06:45:55.216911',)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:45:55.216939 ; args=(u'2012-01-09 06:45:55.216939',)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:45:55.216956 ; args=(u'2012-01-10 05:45:55.216956',)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 5 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('5'))
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 50  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(50,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 50  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(50,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."id" = 8 ); args=(True, 8)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 50  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(50, u'pl-pl')
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 50  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(50, u'pl')
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 50  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(50, u'pl%')
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 50  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(50, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:45:55 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 50  ORDER BY "product_productimage"."sort" ASC; args=(50,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "product_productattribute" WHERE ("product_productattribute"."product_id" = 50  AND "product_productattribute"."languagecode" = pl-pl ); args=(50, 'pl-pl')
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE ("product_productattribute"."product_id" = 50  AND ("product_productattribute"."languagecode" IS NULL OR "product_productattribute"."languagecode" =  )) ORDER BY "product_attributeoption"."sort_order" ASC; args=(50, '')
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:45:55.614975 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:45:55.614975')
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:45:55.684726 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:45:55.684726')
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:45:55.854723 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:45:55.854723')
Tue, 10 Jan 2012 06:45:55 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:13 django.db.backends DEBUG    (0.017) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:46:13.401324 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:46:13.401324')
Tue, 10 Jan 2012 06:46:13 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.023) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:46:35.184514 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:46:35.184514')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.006) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PRODUCT  AND "livesettings_setting"."key" = NUM_DISPLAY ); args=(1, 1, 'PRODUCT', 'NUM_DISPLAY')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PRODUCT  AND "livesettings_longsetting"."key" = NUM_DISPLAY ); args=(1, 1, 'PRODUCT', 'NUM_DISPLAY')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.009) SELECT "livesettings_setting"."id", "livesettings_setting"."site_id", "livesettings_setting"."group", "livesettings_setting"."key", "livesettings_setting"."value" FROM "livesettings_setting" WHERE ("livesettings_setting"."site_id" = 1  AND "livesettings_setting"."site_id" = 1  AND "livesettings_setting"."group" = PRODUCT  AND "livesettings_setting"."key" = RANDOM_FEATURED ); args=(1, 1, 'PRODUCT', 'RANDOM_FEATURED')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "livesettings_longsetting"."id", "livesettings_longsetting"."site_id", "livesettings_longsetting"."group", "livesettings_longsetting"."key", "livesettings_longsetting"."value" FROM "livesettings_longsetting" WHERE ("livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."site_id" = 1  AND "livesettings_longsetting"."group" = PRODUCT  AND "livesettings_longsetting"."key" = RANDOM_FEATURED ); args=(1, 1, 'PRODUCT', 'RANDOM_FEATURED')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."site_id" = 1  AND "product_product"."featured" = True ); args=(True, 1, True)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.006) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" =  ; args=(u'',)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.003) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:46:35.326701 ; args=(u'2012-01-03 06:46:35.326701',)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:46:35.326726 ; args=(u'2012-01-09 06:46:35.326726',)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:46:35.326731 ; args=(u'2012-01-10 05:46:35.326731',)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 5 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('5'))
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_product"."active" = True  AND "product_product"."site_id" = 1  AND "product_product"."featured" = True ) ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC LIMIT 8; args=(True, 1, True)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 22  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(22,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 22  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(22,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 22  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(22, u'pl-pl')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 22  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(22, u'pl')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 22  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(22, u'pl%')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.001) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 22  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(22, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:46:35 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 2  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(2,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 2  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(2,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 2  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(2, u'pl-pl')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 2  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(2, u'pl')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 2  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(2, u'pl%')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 2  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(2, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.001) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:46:35 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 43  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(43,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 43  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(43,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 43  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(43, u'pl-pl')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 43  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(43, u'pl')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 43  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(43, u'pl%')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 43  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(43, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:46:35 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 44  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(44,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 44  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(44,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 44  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(44, u'pl-pl')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 44  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(44, u'pl')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.003) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 44  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(44, u'pl%')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 44  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(44, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:46:35 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 25  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(25,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 25  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(25,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(25, u'pl-pl')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(25, u'pl')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(25, u'pl%')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 25  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(25, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.005) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:46:35 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.001) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 26  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(26,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 26  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(26,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 26  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(26, u'pl-pl')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 26  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(26, u'pl')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 26  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(26, u'pl%')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 26  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(26, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:46:35 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.001) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 3  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(3,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 3  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(3,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(3, u'pl-pl')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(3, u'pl')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(3, u'pl%')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.003) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.001) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:46:35 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 27  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(27,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 27  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(27,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(27, u'pl-pl')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(27, u'pl')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(27, u'pl%')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.001) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:46:35 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:46:35.912383 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:46:35.912383')
Tue, 10 Jan 2012 06:46:35 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:36 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:46:36.138411 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:46:36.138411')
Tue, 10 Jan 2012 06:46:36 django.db.backends DEBUG    (0.001) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:36 django.db.backends DEBUG    (0.010) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:46:36.167807 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:46:36.167807')
Tue, 10 Jan 2012 06:46:36 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:36 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:46:36.184336 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:46:36.184336')
Tue, 10 Jan 2012 06:46:36 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:36 django.db.backends DEBUG    (0.023) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:46:36.214398 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:46:36.214398')
Tue, 10 Jan 2012 06:46:36 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:36 django.db.backends DEBUG    (0.013) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:46:36.253942 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:46:36.253942')
Tue, 10 Jan 2012 06:46:36 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:36 django.db.backends DEBUG    (0.018) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:46:36.283902 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:46:36.283902')
Tue, 10 Jan 2012 06:46:36 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:57 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:46:57.840211 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:46:57.840211')
Tue, 10 Jan 2012 06:46:57 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:57 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:57 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:46:57 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:46:57 django.db.backends DEBUG    (0.007) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = contact ; args=(u'contact',)
Tue, 10 Jan 2012 06:46:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:46:57 django.db.backends DEBUG    (0.004) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:46:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:46:57.928530 ; args=(u'2012-01-03 06:46:57.928530',)
Tue, 10 Jan 2012 06:46:57 django.db.backends DEBUG    (0.004) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:46:57.928944 ; args=(u'2012-01-09 06:46:57.928944',)
Tue, 10 Jan 2012 06:46:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:46:57.928956 ; args=(u'2012-01-10 05:46:57.928956',)
Tue, 10 Jan 2012 06:46:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:46:57 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 5 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('5'))
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:46:58.080362 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:46:58.080362')
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = contact ; args=(u'contact',)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:46:58.104407 ; args=(u'2012-01-03 06:46:58.104407',)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:46:58.104422 ; args=(u'2012-01-09 06:46:58.104422',)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:46:58.104427 ; args=(u'2012-01-10 05:46:58.104427',)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.001) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.004) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.003) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 5 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('5'))
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.004) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:46:58.394230 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:46:58.394230')
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.003) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:46:58.574012 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:46:58.574012')
Tue, 10 Jan 2012 06:46:58 django.db.backends DEBUG    (0.002) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.007) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:47:00.266165 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:47:00.266165')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."site_id" = 1  AND "product_product"."featured" = True ); args=(True, 1, True)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" =  ; args=(u'',)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:47:00.336617 ; args=(u'2012-01-03 06:47:00.336617',)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:47:00.336632 ; args=(u'2012-01-09 06:47:00.336632',)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:47:00.336637 ; args=(u'2012-01-10 05:47:00.336637',)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.001) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 5 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('5'))
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.004) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" INNER JOIN "django_site" ON ("product_product"."site_id" = "django_site"."id") WHERE ("product_product"."active" = True  AND "product_product"."site_id" = 1  AND "product_product"."featured" = True ) ORDER BY "django_site"."domain" ASC, "product_product"."ordering" ASC, "product_product"."name" ASC LIMIT 8; args=(True, 1, True)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 22  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(22,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 22  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(22,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 22  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(22, u'pl-pl')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 22  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(22, u'pl')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 22  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(22, u'pl%')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 22 ; args=(22,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.002) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 22  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(22, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:47:00 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 2  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(2,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 2  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(2,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 2  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(2, u'pl-pl')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 2  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(2, u'pl')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 2  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(2, u'pl%')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 2 ; args=(2,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 2  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(2, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:47:00 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 43  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(43,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 43  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(43,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 43  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(43, u'pl-pl')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 43  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(43, u'pl')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 43  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(43, u'pl%')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 43 ; args=(43,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.003) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 43  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(43, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:47:00 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 44  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(44,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 44  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(44,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 44  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(44, u'pl-pl')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 44  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(44, u'pl')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 44  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(44, u'pl%')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 44 ; args=(44,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 44  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(44, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:47:00 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 25  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(25,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.002) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 25  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(25,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(25, u'pl-pl')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(25, u'pl')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(25, u'pl%')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 25  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(25, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:47:00 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 26  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(26,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 26  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(26,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 26  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(26, u'pl-pl')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 26  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(26, u'pl')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 26  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(26, u'pl%')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 26 ; args=(26,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 26  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(26, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:47:00 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 3  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(3,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.005) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.002) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 3  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(3,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(3, u'pl-pl')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(3, u'pl')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 3  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(3, u'pl%')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 3 ; args=(3,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 3  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(3, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:47:00 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 27  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(27,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productimage" WHERE "product_productimage"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 27  ORDER BY "product_productimage"."sort" ASC LIMIT 1; args=(27,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(27, u'pl-pl')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(27, u'pl')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 27  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(27, u'pl%')
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.013) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:00 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:47:00 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:47:01 django.db.backends DEBUG    (0.011) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:47:01.043391 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:47:01.043391')
Tue, 10 Jan 2012 06:47:01 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:01 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:47:01.178329 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:47:01.178329')
Tue, 10 Jan 2012 06:47:01 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.006) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:47:07.552577 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:47:07.552577')
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.005) SELECT "auth_message"."id", "auth_message"."user_id", "auth_message"."message" FROM "auth_message" WHERE "auth_message"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE ("product_product"."active" = True  AND "product_product"."slug" = kartka-18  AND "product_product"."site_id" = 1 ); args=(True, u'kartka-18', 1)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.001) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "product_discount"."id", "product_discount"."site_id", "product_discount"."description", "product_discount"."code", "product_discount"."active", "product_discount"."amount", "product_discount"."percentage", "product_discount"."automatic", "product_discount"."allowedUses", "product_discount"."numUses", "product_discount"."minOrder", "product_discount"."startDate", "product_discount"."endDate", "product_discount"."shipping", "product_discount"."allValid" FROM "product_discount" LEFT OUTER JOIN "product_discount_valid_products" ON ("product_discount"."id" = "product_discount_valid_products"."discount_id") WHERE ("product_discount"."active" = True  AND "product_discount"."automatic" = True  AND "product_discount"."startDate" <= 2012-01-10  AND "product_discount"."endDate" > 2012-01-10  AND ("product_discount_valid_products"."product_id" IN (25) OR "product_discount"."allValid" = True )) ORDER BY "product_discount"."percentage" DESC; args=(True, True, '2012-01-10', '2012-01-10', 25, True)
Tue, 10 Jan 2012 06:47:07 root         DEBUG    subtypes = ()
Tue, 10 Jan 2012 06:47:07 product.views DEBUG    finding product template: ['product/product.html']
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "shop_cart"."id", "shop_cart"."site_id", "shop_cart"."desc", "shop_cart"."date_time_created", "shop_cart"."customer_id" FROM "shop_cart" WHERE "shop_cart"."id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."slug" = kartka-18 ; args=(u'kartka-18',)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 25 ; args=(25,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.006) SELECT COUNT(*) FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "shop_order"."total" FROM "shop_order" WHERE "shop_order"."status" = New ; args=('New',)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-03 06:47:07.702517 ; args=(u'2012-01-03 06:47:07.702517',)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-09 06:47:07.702533 ; args=(u'2012-01-09 06:47:07.702533',)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cart" WHERE "shop_cart"."date_time_created" >= 2012-01-10 05:47:07.702538 ; args=(u'2012-01-10 05:47:07.702538',)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact"; args=()
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "contact_contact" WHERE "contact_contact"."create_date" >= 2012-01-03 ; args=('2012-01-03',)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4 ; args=(4,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "shop_cartitem"."id", "shop_cartitem"."cart_id", "shop_cartitem"."product_id", "shop_cartitem"."quantity" FROM "shop_cartitem" WHERE "shop_cartitem"."cart_id" = 4  ORDER BY "shop_cartitem"."id" ASC; args=(4,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.021) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.001) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 27 ; args=(27,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.001) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 27  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(27, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 5 ; args=(5,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.008) SELECT "product_product"."id", "product_product"."site_id", "product_product"."name", "product_product"."slug", "product_product"."sku", "product_product"."short_description", "product_product"."description", "product_product"."items_in_stock", "product_product"."meta", "product_product"."date_added", "product_product"."active", "product_product"."featured", "product_product"."ordering", "product_product"."weight", "product_product"."weight_units", "product_product"."length", "product_product"."length_units", "product_product"."width", "product_product"."width_units", "product_product"."height", "product_product"."height_units", "product_product"."total_sold", "product_product"."taxable", "product_product"."taxClass_id", "product_product"."shipclass" FROM "product_product" WHERE "product_product"."id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "configurable_configurableproduct"."product_id", "configurable_configurableproduct"."create_subs" FROM "configurable_configurableproduct" WHERE "configurable_configurableproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "configurable_productvariation"."product_id", "configurable_productvariation"."parent_id" FROM "configurable_productvariation" WHERE "configurable_productvariation"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "custom_customproduct"."product_id", "custom_customproduct"."downpayment", "custom_customproduct"."deferred_shipping" FROM "custom_customproduct" WHERE "custom_customproduct"."product_id" = 49 ; args=(49,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 49  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 5 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(49, '2012-01-10', Decimal('5'))
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.003) SELECT COUNT(*) FROM "shop_cartitemdetails" WHERE "shop_cartitemdetails"."cartitem_id" = 6 ; args=(6,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 25  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(25,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" INNER JOIN "product_product_category" ON ("product_category"."id" = "product_product_category"."category_id") INNER JOIN "django_site" ON ("product_category"."site_id" = "django_site"."id") LEFT OUTER JOIN "product_category" T5 ON ("product_category"."parent_id" = T5."id") WHERE "product_product_category"."product_id" = 25  ORDER BY "django_site"."domain" ASC, "product_category"."parent_id" ASC, "product_category"."ordering" ASC, "product_category"."name" ASC LIMIT 1; args=(25,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "product_category"."id", "product_category"."site_id", "product_category"."name", "product_category"."slug", "product_category"."parent_id", "product_category"."meta", "product_category"."description", "product_category"."ordering", "product_category"."is_active" FROM "product_category" WHERE ("product_category"."is_active" = True  AND "product_category"."id" = 8 ); args=(True, 8)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl-pl ESCAPE '\' ); args=(25, u'pl-pl')
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl ESCAPE '\' ); args=(25, u'pl')
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_producttranslation" WHERE ("product_producttranslation"."product_id" = 25  AND "product_producttranslation"."languagecode" LIKE pl% ESCAPE '\' ); args=(25, u'pl%')
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "product_price"."id", "product_price"."product_id", "product_price"."price", "product_price"."quantity", "product_price"."expires" FROM "product_price" WHERE ("product_price"."product_id" = 25  AND NOT ("product_price"."expires" IS NOT NULL AND ("product_price"."expires" < 2012-01-10  AND "product_price"."expires" IS NOT NULL)) AND "product_price"."quantity" <= 1 ) ORDER BY "product_price"."price" ASC, "product_price"."quantity" DESC, "product_price"."expires" ASC LIMIT 1; args=(25, '2012-01-10', Decimal('1'))
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "contact_contact"."id", "contact_contact"."title", "contact_contact"."first_name", "contact_contact"."last_name", "contact_contact"."user_id", "contact_contact"."role_id", "contact_contact"."organization_id", "contact_contact"."dob", "contact_contact"."email", "contact_contact"."notes", "contact_contact"."create_date" FROM "contact_contact" WHERE "contact_contact"."user_id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.001) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."title" LIKE Default ESCAPE '\' ; args=(u'Default',)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "area_taxrate"."id", "area_taxrate"."taxClass_id", "area_taxrate"."taxZone_id", "area_taxrate"."taxCountry_id", "area_taxrate"."percentage" FROM "area_taxrate" WHERE ("area_taxrate"."taxCountry_id" = 176  AND "area_taxrate"."taxClass_id" = 1 ); args=(176, 1)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "product_taxclass"."id", "product_taxclass"."title", "product_taxclass"."description" FROM "product_taxclass" WHERE "product_taxclass"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "l10n_country"."id", "l10n_country"."iso2_code", "l10n_country"."name", "l10n_country"."printable_name", "l10n_country"."iso3_code", "l10n_country"."numcode", "l10n_country"."active", "l10n_country"."continent", "l10n_country"."admin_area" FROM "l10n_country" WHERE "l10n_country"."id" = 176 ; args=(176,)
Tue, 10 Jan 2012 06:47:07 tax.area     DEBUG    Got rate [Default] = Default - Poland = 8.00%
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "product_productimage"."id", "product_productimage"."product_id", "product_productimage"."picture", "product_productimage"."caption", "product_productimage"."sort" FROM "product_productimage" WHERE "product_productimage"."product_id" = 25  ORDER BY "product_productimage"."sort" ASC; args=(25,)
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT COUNT(*) FROM "product_productattribute" WHERE ("product_productattribute"."product_id" = 25  AND "product_productattribute"."languagecode" = pl-pl ); args=(25, 'pl-pl')
Tue, 10 Jan 2012 06:47:07 django.db.backends DEBUG    (0.000) SELECT "product_productattribute"."id", "product_productattribute"."product_id", "product_productattribute"."languagecode", "product_productattribute"."option_id", "product_productattribute"."value" FROM "product_productattribute" INNER JOIN "product_attributeoption" ON ("product_productattribute"."option_id" = "product_attributeoption"."id") WHERE ("product_productattribute"."product_id" = 25  AND ("product_productattribute"."languagecode" IS NULL OR "product_productattribute"."languagecode" =  )) ORDER BY "product_attributeoption"."sort_order" ASC; args=(25, '')
Tue, 10 Jan 2012 06:47:08 django.db.backends DEBUG    (0.008) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:47:08.142689 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:47:08.142689')
Tue, 10 Jan 2012 06:47:08 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:08 django.db.backends DEBUG    (0.014) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:47:08.173015 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:47:08.173015')
Tue, 10 Jan 2012 06:47:08 django.db.backends DEBUG    (0.003) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
Tue, 10 Jan 2012 06:47:08 django.db.backends DEBUG    (0.005) SELECT "django_session"."session_key", "django_session"."session_data", "django_session"."expire_date" FROM "django_session" WHERE ("django_session"."session_key" = bfc24ee7091667f9b958b48992bf653d  AND "django_session"."expire_date" > 2012-01-10 06:47:08.347874 ); args=('bfc24ee7091667f9b958b48992bf653d', u'2012-01-10 06:47:08.347874')
Tue, 10 Jan 2012 06:47:08 django.db.backends DEBUG    (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
